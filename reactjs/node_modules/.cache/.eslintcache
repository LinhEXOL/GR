[{"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\index.js":"1","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\redux.js":"2","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\serviceWorker.js":"3","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\App.js":"4","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\IntlProviderWrapper.js":"5","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\authentication.js":"6","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\Home.js":"7","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\Header.js":"8","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomToast.js":"9","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\System.js":"10","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\ConfirmModal.js":"11","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Auth\\Login.js":"12","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\actionTypes.js":"13","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\rootReducer.js":"14","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\index.js":"15","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\menuApp.js":"16","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Navigator.js":"17","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomScrollbars.js":"18","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\appReducer.js":"19","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\userReducer.js":"20","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\UserManage.js":"21","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\userService.js":"22","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\index.js":"23","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\constant.js":"24","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\CommonUtils.js":"25","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\LanguageUtils.js":"26","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\KeyCodeUtils.js":"27","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\ToastUtil.js":"28","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\axios.js":"29","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\userActions.js":"30","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\appActions.js":"31","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\HotpotManage.js":"32","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\hotpotService.js":"33","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalHotpot.js":"34","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\emitter.js":"35","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalEditHotpot.js":"36","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomePage.js":"37","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeHeader.js":"38","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HotpotType.js":"39","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Restaurant.js":"40","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Hotpot.js":"41","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HandBook.js":"42","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Video.js":"43","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeFooter.js":"44","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\HotpotRedux.js":"45","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\UserRedux.js":"46","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\adminActions.js":"47","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\adminReducer.js":"48","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\TableManageHotpot.js":"49","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ManageHotpot.js":"50","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\DetailHotpot.js":"51","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ManageSchedule.js":"52","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Input\\DatePicker.js":"53","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Formating\\FormattedDate.js":"54","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotSchedule.js":"55","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotExtraInfo.js":"56","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\Modal\\BookingModal.js":"57","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotProfile.js":"58","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Type\\ManageType.js":"59","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Restaurant\\ManageRestaurant.js":"60","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Restaurant\\DetailRestaurant.js":"61","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Type\\DetailType.js":"62"},{"size":926,"mtime":1704765285128,"results":"63","hashOfConfig":"64"},{"size":1477,"mtime":1704765285128,"results":"65","hashOfConfig":"64"},{"size":5086,"mtime":1704765285128,"results":"66","hashOfConfig":"64"},{"size":3857,"mtime":1704870584460,"results":"67","hashOfConfig":"64"},{"size":1095,"mtime":1704765285128,"results":"68","hashOfConfig":"64"},{"size":789,"mtime":1704765285128,"results":"69","hashOfConfig":"64"},{"size":797,"mtime":1704765285128,"results":"70","hashOfConfig":"64"},{"size":2244,"mtime":1704765285103,"results":"71","hashOfConfig":"64"},{"size":2282,"mtime":1704765285088,"results":"72","hashOfConfig":"64"},{"size":2251,"mtime":1704832677558,"results":"73","hashOfConfig":"64"},{"size":3862,"mtime":1697161875064,"results":"74","hashOfConfig":"64"},{"size":5385,"mtime":1704765285093,"results":"75","hashOfConfig":"64"},{"size":2146,"mtime":1704765285128,"results":"76","hashOfConfig":"64"},{"size":964,"mtime":1704765285143,"results":"77","hashOfConfig":"64"},{"size":259,"mtime":1704765285146,"results":"78","hashOfConfig":"64"},{"size":1692,"mtime":1704765285103,"results":"79","hashOfConfig":"64"},{"size":9326,"mtime":1704765285093,"results":"80","hashOfConfig":"64"},{"size":3173,"mtime":1704765285077,"results":"81","hashOfConfig":"64"},{"size":1063,"mtime":1704765285143,"results":"82","hashOfConfig":"64"},{"size":830,"mtime":1704765285143,"results":"83","hashOfConfig":"64"},{"size":2143,"mtime":1705943796948,"results":"84","hashOfConfig":"64"},{"size":303,"mtime":1704765285128,"results":"85","hashOfConfig":"64"},{"size":96,"mtime":1704765285128,"results":"86","hashOfConfig":"64"},{"size":551,"mtime":1704870497127,"results":"87","hashOfConfig":"64"},{"size":323,"mtime":1704765285146,"results":"88","hashOfConfig":"64"},{"size":961,"mtime":1704765285146,"results":"89","hashOfConfig":"64"},{"size":684,"mtime":1704765285146,"results":"90","hashOfConfig":"64"},{"size":3001,"mtime":1704765285146,"results":"91","hashOfConfig":"64"},{"size":378,"mtime":1704765285077,"results":"92","hashOfConfig":"64"},{"size":418,"mtime":1704765285128,"results":"93","hashOfConfig":"64"},{"size":444,"mtime":1704765285128,"results":"94","hashOfConfig":"64"},{"size":6318,"mtime":1705943796866,"results":"95","hashOfConfig":"64"},{"size":3182,"mtime":1705949913068,"results":"96","hashOfConfig":"64"},{"size":7789,"mtime":1704765285119,"results":"97","hashOfConfig":"64"},{"size":161,"mtime":1704765285146,"results":"98","hashOfConfig":"64"},{"size":7572,"mtime":1705943796888,"results":"99","hashOfConfig":"64"},{"size":1388,"mtime":1705953926597,"results":"100","hashOfConfig":"64"},{"size":8874,"mtime":1708855013070,"results":"101","hashOfConfig":"64"},{"size":3050,"mtime":1705943797420,"results":"102","hashOfConfig":"64"},{"size":3122,"mtime":1705948716722,"results":"103","hashOfConfig":"64"},{"size":3755,"mtime":1705943797390,"results":"104","hashOfConfig":"64"},{"size":2412,"mtime":1704765285111,"results":"105","hashOfConfig":"64"},{"size":1999,"mtime":1704765285111,"results":"106","hashOfConfig":"64"},{"size":1133,"mtime":1704765285103,"results":"107","hashOfConfig":"64"},{"size":18497,"mtime":1705943797095,"results":"108","hashOfConfig":"64"},{"size":3719,"mtime":1704765285119,"results":"109","hashOfConfig":"64"},{"size":10034,"mtime":1704765285128,"results":"110","hashOfConfig":"64"},{"size":3141,"mtime":1704765285128,"results":"111","hashOfConfig":"64"},{"size":3832,"mtime":1705943797140,"results":"112","hashOfConfig":"64"},{"size":5214,"mtime":1705943797148,"results":"113","hashOfConfig":"64"},{"size":3103,"mtime":1705943796970,"results":"114","hashOfConfig":"64"},{"size":6655,"mtime":1705943797214,"results":"115","hashOfConfig":"64"},{"size":5954,"mtime":1704765285088,"results":"116","hashOfConfig":"64"},{"size":609,"mtime":1697161875069,"results":"117","hashOfConfig":"64"},{"size":6733,"mtime":1705946260822,"results":"118","hashOfConfig":"64"},{"size":6312,"mtime":1705946400511,"results":"119","hashOfConfig":"64"},{"size":5739,"mtime":1705947285475,"results":"120","hashOfConfig":"64"},{"size":4729,"mtime":1705947748663,"results":"121","hashOfConfig":"64"},{"size":4511,"mtime":1705943797273,"results":"122","hashOfConfig":"64"},{"size":5008,"mtime":1705943797238,"results":"123","hashOfConfig":"64"},{"size":3661,"mtime":1705963350773,"results":"124","hashOfConfig":"64"},{"size":5515,"mtime":1705947239174,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"1rwdc50",{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"128"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"128"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"128"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"128"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"128"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"128"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"128"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"228","usedDeprecatedRules":"128"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"128"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"128"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"128"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"128"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"128"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"128"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"128"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"128"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"128"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"128"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"128"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"128"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"128"},"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\index.js",[],["279","280"],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\redux.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\serviceWorker.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\App.js",["281","282"],"import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ConnectedRouter as Router } from \"connected-react-router\";\r\nimport { history } from \"../redux\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport {\r\n  userIsAuthenticated,\r\n  userIsNotAuthenticated,\r\n} from \"../hoc/authentication\";\r\n\r\nimport { path } from \"../utils\";\r\n\r\nimport Home from \"../routes/Home\";\r\n// import Login from '../routes/Login';\r\nimport Login from \"./Auth/Login\";\r\n\r\nimport Header from \"./Header/Header\";\r\nimport System from \"../routes/System\";\r\n\r\nimport { CustomToastCloseButton } from \"../components/CustomToast\";\r\nimport HomePage from \"./HomePage/HomePage.js\";\r\n\r\nimport CustomScrollbars from \"../components/CustomScrollbars.js\";\r\n\r\nimport DetailHotpot from \"./Customer/Hotpot/DetailHotpot.js\";\r\nimport DetailRestaurant from \"./Customer/Restaurant/DetailRestaurant.js\";\r\nimport DetailType from \"./Customer/Type/DetailType.js\";\r\nclass App extends Component {\r\n  handlePersistorState = () => {\r\n    const { persistor } = this.props;\r\n    let { bootstrapped } = persistor.getState();\r\n    if (bootstrapped) {\r\n      if (this.props.onBeforeLift) {\r\n        Promise.resolve(this.props.onBeforeLift())\r\n          .then(() => this.setState({ bootstrapped: true }))\r\n          .catch(() => this.setState({ bootstrapped: true }));\r\n      } else {\r\n        this.setState({ bootstrapped: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.handlePersistorState();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Router history={history}>\r\n          <div className=\"main-container\">\r\n            {/* {this.props.isLoggedIn && <Header />} */}\r\n\r\n            <div className=\"content-container\">\r\n              <CustomScrollbars style={{ height: \"100vh\", width: \"100%\" }}>\r\n                <Switch>\r\n                  <Route path={path.HOME} exact component={Home} />\r\n                  <Route\r\n                    path={path.LOGIN}\r\n                    component={userIsNotAuthenticated(Login)}\r\n                  />\r\n                  <Route\r\n                    path={path.SYSTEM}\r\n                    component={userIsAuthenticated(System)}\r\n                  />\r\n                  <Route path={path.HOMEPAGE} component={HomePage} />\r\n                  <Route path={path.DETAIL_HOTPOT} component={DetailHotpot} />\r\n                  <Route\r\n                    path={path.DETAIL_RESTAURANT}\r\n                    component={DetailRestaurant}\r\n                  />\r\n                  <Route path={path.DETAIL_TYPE} component={DetailType} />\r\n                </Switch>\r\n              </CustomScrollbars>\r\n            </div>\r\n\r\n            {/* <ToastContainer\r\n              className=\"toast-container\"\r\n              toastClassName=\"toast-item\"\r\n              bodyClassName=\"toast-item-body\"\r\n              autoClose={false}\r\n              hideProgressBar={true}\r\n              pauseOnHover={false}\r\n              pauseOnFocusLoss={true}\r\n              closeOnClick={false}\r\n              draggable={false}\r\n              closeButton={<CustomToastCloseButton />}\r\n            /> */}\r\n\r\n            <ToastContainer\r\n              position=\"bottom-right\"\r\n              autoClose={5000}\r\n              hideProgressBar={false}\r\n              newestOnTop={false}\r\n              closeOnClick\r\n              rtl={false}\r\n              pauseOnFocusLoss\r\n              draggable\r\n              pauseOnHover\r\n            />\r\n          </div>\r\n        </Router>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    started: state.app.started,\r\n    isLoggedIn: state.user.isLoggedIn,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\IntlProviderWrapper.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\authentication.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\Home.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\Header.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomToast.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\System.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\ConfirmModal.js",[],["283","284"],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Auth\\Login.js",["285"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n// import * as actions from \"../store/actions\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\n// import { userService } from '../../services/userService';\r\nimport { handleLoginApi } from '../../services/userService';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            showPassword: false,\r\n            errMessage: ''\r\n        }\r\n    }\r\n\r\n    handleOnChangeUserName = (e) => {\r\n        this.setState({\r\n            username: e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleOnChangePassword = (e) => {\r\n        this.setState({\r\n            password: e.target.value\r\n        })\r\n\r\n\r\n    }\r\n\r\n    handleLogin = async () => {\r\n        this.setState({\r\n            errMessage: ''\r\n        })\r\n        try {\r\n\r\n            let data = await handleLoginApi(this.state.username, this.state.password);\r\n            if (data && data.errCode !== 0) {\r\n                this.setState({\r\n                    errMessage: data.message\r\n                })\r\n            }\r\n            if (data && data.errCode === 0) {\r\n                this.props.userLoginSuccess(data.user);\r\n                console.log('loging success');\r\n            }\r\n\r\n        } catch (e) {\r\n            if (e.response) {\r\n                if (e.response.data) {\r\n                    this.setState({\r\n                        errMessage: e.response.data.message\r\n                    })\r\n                }\r\n            }\r\n            console.log('error message', e.response);\r\n        }\r\n    }\r\n\r\n    handleShowHidePassword = () => {\r\n\r\n        this.setState({\r\n            showPassword: !this.state.showPassword\r\n        })\r\n        console.log(this.state.showPassword);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"login-background\">\r\n                <div className=\"login-container\">\r\n                    <div className=\"login-content row\">\r\n                        <div className=\"col-12 text-center login-title\">Login</div>\r\n                        <div className=\"col-12 form-group\">\r\n                            <label>Username: </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control login-input\"\r\n                                placeholder=\"Enter your user name\"\r\n                                value={this.state.username}\r\n                                onChange={(e) => this.handleOnChangeUserName(e)}\r\n\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-12 form-group\">\r\n                            <label>Password: </label>\r\n                            <div className=\"login-password\">\r\n                                <input\r\n                                    type={this.state.showPassword ? 'text' : 'password'}\r\n                                    className=\"form-control login-input\"\r\n                                    placeholder=\"Enter your password\"\r\n                                    value={this.state.password}\r\n                                    onChange={(e) => this.handleOnChangePassword(e)}\r\n\r\n                                />\r\n                                <span onClick={() => this.handleShowHidePassword()}>\r\n                                    <i className={this.state.showPassword ? 'fas fa-eye show-password' : 'fas fa-eye-slash show-password'} ></i>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12\" style={{ color: 'red' }}>\r\n                            {this.state.errMessage}\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button\r\n                                className=\"btn-login\"\r\n                                onClick={() => this.handleLogin()}\r\n                            >Login</button>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <span className=\"forgot-password\">Forgot your password?</span>\r\n                        </div>\r\n                        <div className=\"col-12 text-center login-with mt-3\">\r\n                            <span className=\"\">Or login with:</span>\r\n                        </div>\r\n                        <div className=\"col-12 social-login\">\r\n                            <i className=\"fab fa-facebook social-icon fb\"></i>\r\n                            <i className=\"fab fa-google-plus social-icon gg\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        // userLoginFail: () => dispatch(actions.adminLoginFail()),\r\n        userLoginSuccess: (userInfo) => dispatch(actions.userLoginSuccess(userInfo))\r\n    };\r\n\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\rootReducer.js",["286"],"import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\n\r\nimport appReducer from \"./appReducer\";\r\nimport userReducer from \"./userReducer\";\r\nimport adminReducer from \"./adminReducer\";\r\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer } from \"redux-persist\";\r\n\r\nconst persistCommonConfig = {\r\n  storage: storage,\r\n  stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n  ...persistCommonConfig,\r\n  key: \"user\",\r\n  whitelist: [\"isLoggedIn\", \"userInfo\"],\r\n};\r\n\r\nconst appPersistConfig = {\r\n  ...persistCommonConfig,\r\n  key: \"app\",\r\n  whitelist: [\"language\"],\r\n};\r\n\r\nexport default (history) =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: adminReducer,\r\n  });\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\index.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\menuApp.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Navigator.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomScrollbars.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\appReducer.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\UserManage.js",["287","288"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotManage.scss\";\r\nimport { emitter } from \"../../utils/emitter\";\r\nimport { getAllUsers } from \"../../services/userService\";\r\n\r\nclass UserManage extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class HotpotManage này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrUsers: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getAllUsersFromReact();\r\n  }\r\n\r\n  getAllUsersFromReact = async () => {\r\n    let response = await getAllUsers(\"ALL\");\r\n    if (response && response.errCode === 0) {\r\n      this.setState({\r\n        arrUsers: response.users,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let arrUsers = this.state.arrUsers;\r\n    return (\r\n      <div className=\"hotpots-container\">\r\n        <div className=\"title text-center\">Manage user</div>\r\n        <div className=\"hotpots-table mt-3 mx-1\">\r\n          <table id=\"customers\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Email</th>\r\n                <th>First Name</th>\r\n                <th>Last Name</th>\r\n                <th>Phone number</th>\r\n                <th>Address</th>\r\n              </tr>\r\n\r\n              {arrUsers &&\r\n                arrUsers.map((item, index) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{item.email}</td>\r\n                      <td>{item.firstName}</td>\r\n                      <td>{item.lastName}</td>\r\n                      <td>{item.phonenumber}</td>\r\n                      <td>{item.address}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\userService.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\index.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\constant.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\CommonUtils.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\LanguageUtils.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\KeyCodeUtils.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\ToastUtil.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\axios.js",["289","290"],"import axios from 'axios';\r\nimport _ from 'lodash';\r\n// import config from './config';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true\r\n});\r\n\r\n\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n\r\n        const { data } = response;\r\n        return response.data;\r\n    })\r\n\r\n\r\nexport default instance;\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\userActions.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\appActions.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\HotpotManage.js",["291","292"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotManage.scss\";\r\nimport {\r\n  getAllHotpots,\r\n  createNewHotpotService,\r\n  deleteHotpotService,\r\n  editHotpotService,\r\n} from \"../../services/hotpotService\";\r\nimport ModalHotpot from \"./ModalHotpot\";\r\nimport ModalEditHotpot from \"./ModalEditHotpot\";\r\nimport { emitter } from \"../../utils/emitter\";\r\n\r\nclass HotpotManage extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class HotpotManage này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpots: [],\r\n      isOpenModalHotpot: false,\r\n      isOpenModalEditHotpot: false,\r\n      hotpotEdit: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getAllHotpotsFromReact();\r\n  }\r\n\r\n  /**\r\n   *Life cycle:\r\n   Run component:\r\n   1. Run constructor -> init state (khởi tạo những biến sẽ dùng)\r\n   2. Run Did mount: khi nào muốn gán gtri cho 1 state nào đấy sẽ dùng trong hàm did mount \r\n   - gọi API lấy giá trị vào và set state cho component \r\n   - state lưu giá trị của các biến, và được dùng trong render \r\n   3. Run render \r\n   render cho ta nhìn thấy trên màn hình \r\n   *\r\n   *\r\n   *\r\n   *\r\n   */\r\n\r\n  getAllHotpotsFromReact = async () => {\r\n    let response = await getAllHotpots(\"ALL\");\r\n    if (response && response.errCode === 0) {\r\n      this.setState({\r\n        arrHotpots: response.hotpots,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleAddNewHopot = () => {\r\n    this.setState({\r\n      isOpenModalHotpot: true,\r\n    });\r\n  };\r\n\r\n  toggleHotpotModal = () => {\r\n    this.setState({\r\n      isOpenModalHotpot: !this.state.isOpenModalHotpot,\r\n    });\r\n  };\r\n\r\n  toggleHotpotEditModal = () => {\r\n    this.setState({\r\n      isOpenModalEditHotpot: !this.state.isOpenModalEditHotpot,\r\n    });\r\n  };\r\n\r\n  createNewHotpot = async (data) => {\r\n    try {\r\n      let response = await createNewHotpotService(data);\r\n      //   if (response && response.errCode !== 0) {\r\n      //     alert(response.errMessage);\r\n      //   } else {\r\n      //     await this.getAllHotpotsFromReact();\r\n      //   }\r\n      await this.getAllHotpotsFromReact();\r\n      this.setState({\r\n        isOpenModalHotpot: false,\r\n      });\r\n      emitter.emit(\"EVENT_CLEAR_MODAL_DATA\");\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  handleDeleteHotpot = async (hotpot) => {\r\n    try {\r\n      let res = await deleteHotpotService(hotpot.id);\r\n      if (res && res.errCode === 0) {\r\n        await this.getAllHotpotsFromReact();\r\n      } else {\r\n        alert(res.errMessage);\r\n      }\r\n      console.log(res);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    this.setState({\r\n      isOpenModalEditHotpot: true,\r\n      hotpotEdit: hotpot,\r\n    });\r\n  };\r\n\r\n  doEditHotpot = async (hotpot) => {\r\n    try {\r\n      let res = await editHotpotService(hotpot);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          isOpenModalEditHotpot: false,\r\n        });\r\n        await this.getAllHotpotsFromReact();\r\n      } else {\r\n        alert(res.errCode);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let arrHotpots = this.state.arrHotpots.hotpots;\r\n    return (\r\n      <div className=\"hotpots-container\">\r\n        <ModalHotpot\r\n          isOpen={this.state.isOpenModalHotpot}\r\n          toggleFromParent={this.toggleHotpotModal}\r\n          createNewHotpot={this.createNewHotpot}\r\n        />\r\n        {this.state.isOpenModalEditHotpot && (\r\n          <ModalEditHotpot\r\n            //isOpen={true}\r\n            isOpen={this.state.isOpenModalEditHotpot}\r\n            toggleFromParent={this.toggleHotpotEditModal}\r\n            currentHotpot={this.state.hotpotEdit}\r\n            editHotpot={this.doEditHotpot}\r\n          />\r\n        )}\r\n\r\n        <div className=\"title text-center\">Manage hotpot</div>\r\n        <div className=\"mx-1\">\r\n          <button\r\n            className=\"btn btn-primary px-3\"\r\n            onClick={() => this.handleAddNewHopot()}\r\n          >\r\n            <i className=\"fas fa-plus\"></i> Add new hotpot\r\n          </button>\r\n        </div>\r\n        <div className=\"hotpots-table mt-3 mx-1\">\r\n          <table id=\"customers\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>ProvinceId</th>\r\n                <th>Phone number</th>\r\n                <th>Restaurant Id</th>\r\n                <th>Type Id</th>\r\n                <th>PriceId</th>\r\n                <th>Note</th>\r\n                <th>PaymentId</th>\r\n                <th>Action</th>\r\n              </tr>\r\n\r\n              {arrHotpots &&\r\n                arrHotpots.map((item, index) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{item.name}</td>\r\n                      <td>{item.provinceId}</td>\r\n                      <td>{item.phonenumber}</td>\r\n                      <td>{item.restaurantId}</td>\r\n                      <td>{item.typeId}</td>\r\n                      <td>{item.priceId}</td>\r\n                      <td>{item.note}</td>\r\n                      <td>{item.paymentId}</td>\r\n                      <td>\r\n                        <button\r\n                          className=\"btn-edit\"\r\n                          onClick={() => this.handleEditHotpot(item)}\r\n                        >\r\n                          <i className=\"fas fa-pencil-alt\"></i>\r\n                        </button>\r\n                        <button\r\n                          className=\"btn-delete\"\r\n                          onClick={() => this.handleDeleteHotpot(item)}\r\n                        >\r\n                          <i className=\"fas fa-trash\"></i>\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotManage);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\hotpotService.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalHotpot.js",["293"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { emitter } from \"../../utils/emitter\";\r\nclass ModalHotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      phonenumber: \"\",\r\n      image: \"\",\r\n      priceId: \"\",\r\n      provinceId: \"\",\r\n      paymentId: \"\",\r\n      typeId: \"\",\r\n      restaurantId: \"\",\r\n      note: \"\",\r\n    };\r\n\r\n    this.listenToEmitter();\r\n  }\r\n\r\n  listenToEmitter() {\r\n    emitter.on(\"EVENT_CLEAR_MODAL_DATA\", () => {\r\n      //reset state\r\n      this.setState = {\r\n        name: \"\",\r\n        phonenumber: \"\",\r\n        image: \"\",\r\n        priceId: \"\",\r\n        provinceId: \"\",\r\n        paymentId: \"\",\r\n        typeId: \"\",\r\n        restaurantId: \"\",\r\n        note: \"\",\r\n      };\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"mouting\");\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.toggleFromParent();\r\n  };\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    //bad code\r\n    /*\r\n    this.state.name === this.state['email']\r\n    \r\n    */\r\n    // this.state[id] = event.target.value;\r\n    // this.setState(\r\n    //   {\r\n    //     ...this.state,\r\n    //   },\r\n    //   () => {\r\n    //     console.log(\"check bad state: \", this.state);\r\n    //   }\r\n    // );\r\n\r\n    //good code\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrInput = [\r\n      \"name\",\r\n      \"phonenumber\",\r\n      \"priceId\",\r\n      \"provinceId\",\r\n      \"paymentId\",\r\n      \"typeId\",\r\n      \"restaurantId\",\r\n      \"note\",\r\n    ];\r\n    for (let i = 0; i < arrInput.length; i++) {\r\n      if (!this.state[arrInput[i]]) {\r\n        isValid = false;\r\n        alert(\"Missing parameter: \" + arrInput[i]);\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  handleAddNewHotpot = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === true) {\r\n      this.props.createNewHotpot(this.state);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.props.isOpen}\r\n        toggle={() => {\r\n          this.toggle();\r\n        }}\r\n        className={\"modal-hotpot-container\"}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <ModalHeader\r\n          toggle={() => {\r\n            this.toggle();\r\n          }}\r\n        >\r\n          Create new hotpot\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputName\">Name</label>\r\n                <input\r\n                  type=\"name\"\r\n                  class=\"form-control\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"name\");\r\n                  }}\r\n                  value={this.state.name}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPhonenumber\">Phone number</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"phonenumber\"\r\n                  placeholder=\"0123456789\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"phonenumber\");\r\n                  }}\r\n                  value={this.state.phonenumber}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputProvince\">ProvinceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"provinceId\"\r\n                  placeholder=\"PRO1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"provinceId\");\r\n                  }}\r\n                  value={this.state.provinceId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputRestaureantId\">restaurantId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"restaurantId\"\r\n                  placeholder=\"1234 Main St\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={this.state.restaurantId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputTypeId\">typeId</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"typeId\"\r\n                placeholder=\"typeId\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"typeId\");\r\n                }}\r\n                value={this.state.typeId}\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputNote\">Note</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"note\"\r\n                placeholder=\"Note\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"note\");\r\n                }}\r\n                value={this.state.note}\r\n              />\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPrice\">PriceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"priceId\"\r\n                  placeholder=\"PRI1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"priceId\");\r\n                  }}\r\n                  value={this.state.priceId}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPayment\">PaymentId</label>\r\n                {/* <!-- <select name=\"paymentId\" class=\"form-control\">\r\n                <option value=\"1\">Credit Card</option>\r\n                <option value=\"2\">Cash</option>\r\n                <option value=\"3\">Momo</option>\r\n              </select> --> */}\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"paymentId\"\r\n                  placeholder=\"PAY1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"paymentId\");\r\n                  }}\r\n                  value={this.state.paymentId}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.handleAddNewHotpot();\r\n            }}\r\n          >\r\n            Add new\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.toggle();\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\emitter.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalEditHotpot.js",["294","295"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { emitter } from \"../../utils/emitter\";\r\nimport _ from \"lodash\";\r\nclass ModalEditHotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      name: \"\",\r\n      phonenumber: \"\",\r\n      image: \"\",\r\n      priceId: \"\",\r\n      provinceId: \"\",\r\n      paymentId: \"\",\r\n      typeId: \"\",\r\n      restaurantId: \"\",\r\n      note: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let hotpot = this.props.currentHotpot;\r\n    if (hotpot && !_.isEmpty(hotpot)) {\r\n      this.setState({\r\n        id: hotpot.id,\r\n        name: hotpot.name,\r\n        phonenumber: hotpot.phonenumber,\r\n        //image: hotpot.,\r\n        priceId: hotpot.priceId,\r\n        provinceId: hotpot.provinceId,\r\n        paymentId: hotpot.paymentId,\r\n        typeId: hotpot.typeId,\r\n        restaurantId: hotpot.restaurantId,\r\n        note: hotpot.note,\r\n      });\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.toggleFromParent();\r\n  };\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    //good code\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrInput = [\r\n      \"name\",\r\n      \"phonenumber\",\r\n      \"priceId\",\r\n      \"provinceId\",\r\n      \"paymentId\",\r\n      \"typeId\",\r\n      \"restaurantId\",\r\n      \"note\",\r\n    ];\r\n    for (let i = 0; i < arrInput.length; i++) {\r\n      if (!this.state[arrInput[i]]) {\r\n        isValid = false;\r\n        alert(\"Missing parameter: \" + arrInput[i]);\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  handleSaveHotpot = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === true) {\r\n      this.props.editHotpot(this.state);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.props.isOpen}\r\n        toggle={() => {\r\n          this.toggle();\r\n        }}\r\n        className={\"modal-hotpot-container\"}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <ModalHeader\r\n          toggle={() => {\r\n            this.toggle();\r\n          }}\r\n        >\r\n          Edit a hotpot\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputName\">Name</label>\r\n                <input\r\n                  type=\"name\"\r\n                  class=\"form-control\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"name\");\r\n                  }}\r\n                  value={this.state.name}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPhonenumber\">Phone number</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"phonenumber\"\r\n                  placeholder=\"0123456789\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"phonenumber\");\r\n                  }}\r\n                  value={this.state.phonenumber}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputProvince\">ProvinceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"provinceId\"\r\n                  placeholder=\"PRO1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"provinceId\");\r\n                  }}\r\n                  value={this.state.provinceId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputRestaureantId\">restaurantId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"restaurantId\"\r\n                  placeholder=\"1234 Main St\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={this.state.restaurantId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputTypeId\">typeId</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"typeId\"\r\n                placeholder=\"typeId\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"typeId\");\r\n                }}\r\n                value={this.state.typeId}\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputNote\">Note</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"note\"\r\n                placeholder=\"Note\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"note\");\r\n                }}\r\n                value={this.state.note}\r\n              />\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPrice\">PriceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"priceId\"\r\n                  placeholder=\"PRI1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"priceId\");\r\n                  }}\r\n                  value={this.state.priceId}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPayment\">PaymentId</label>\r\n                {/* <!-- <select name=\"paymentId\" class=\"form-control\">\r\n                <option value=\"1\">Credit Card</option>\r\n                <option value=\"2\">Cash</option>\r\n                <option value=\"3\">Momo</option>\r\n              </select> --> */}\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"paymentId\"\r\n                  placeholder=\"PAY1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"paymentId\");\r\n                  }}\r\n                  value={this.state.paymentId}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.handleSaveHotpot();\r\n            }}\r\n          >\r\n            Save\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.toggle();\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomePage.js",["296"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from \"./HomeHeader\";\r\nimport \"./HomePage.scss\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.scss\";\r\nimport \"slick-carousel/slick/slick-theme.scss\";\r\nimport HotpotType from \"./Section/HotpotType\";\r\nimport Restaurant from \"./Section/Restaurant\";\r\nimport Hotpot from \"./Section/Hotpot\";\r\nimport HandBook from \"./Section/HandBook\";\r\nimport Video from \"./Section/Video\";\r\nimport HomeFooter from \"./HomeFooter\";\r\n\r\nclass HomePage extends Component {\r\n  //handleAfterChange = (event, slick, currentSlide) => {};\r\n  render() {\r\n    let settings = {\r\n      dots: false,\r\n      infinite: false,\r\n      speed: 500,\r\n      slidesToShow: 4,\r\n      slidesToScroll: 1,\r\n      // afterChange: this.handleAfterChange,\r\n    };\r\n    return (\r\n      <div>\r\n        <HomeHeader isShowBanner={true} />\r\n        <HotpotType settings={settings} />\r\n        <Restaurant settings={settings} />\r\n        <Hotpot settings={settings} />\r\n        {/* <HandBook settings={settings} /> */}\r\n        <Video />\r\n        <HomeFooter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeHeader.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HotpotType.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Restaurant.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Hotpot.js",["297","298"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Slider from \"react-slick\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass Hotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpots: [],\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.topHotpotsRedux !== this.props.topHotpotsRedux) {\r\n      this.setState({\r\n        arrHotpots: this.props.topHotpotsRedux,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadTopHotpots();\r\n  }\r\n\r\n  handleViewDetailHotpot = (hotpot) => {\r\n    this.props.history.push(`/detail-hotpot/${hotpot.id}`);\r\n  };\r\n  render() {\r\n    let arrHotpots = this.state.arrHotpots;\r\n    let { language } = this.props;\r\n    //arrHotpots = arrHotpots.concat(arrHotpots).concat(arrHotpots); //its đata quá fai tạo thêm\r\n    return (\r\n      <div className=\"section-share section-hotpot\">\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <span className=\"title-section\">\r\n              <FormattedMessage id=\"homepage.outstanding-hotpot\" />\r\n            </span>\r\n            <button className=\"btn-section\">\r\n              <FormattedMessage id=\"homepage.more-info\" />\r\n            </button>\r\n          </div>\r\n          <div className=\"section-body\">\r\n            <Slider {...this.props.settings}>\r\n              {arrHotpots &&\r\n                arrHotpots.length > 0 &&\r\n                arrHotpots.map((item, index) => {\r\n                  let imageBase64 = \"\";\r\n                  let name = `${item.name}`;\r\n                  if (item.image) {\r\n                    imageBase64 = new Buffer(item.image, \"base64\").toString(\r\n                      \"binary\"\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div\r\n                      className=\"section-customize\"\r\n                      key={index}\r\n                      onClick={() => this.handleViewDetailHotpot(item)}\r\n                    >\r\n                      <div className=\"customize-border\">\r\n                        <div className=\"outer-bg\">\r\n                          <div\r\n                            className=\"bg-image section-hotpot\"\r\n                            style={{\r\n                              backgroundImage: `url(${imageBase64})`,\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"position text-center\">\r\n                          <div>{name}</div>\r\n                          <div>Lẩu buffet</div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </Slider>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n    topHotpotsRedux: state.admin.topHotpots,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loadTopHotpots: () => dispatch(actions.fetchTopHotpot()),\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Hotpot));\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HandBook.js",["299"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Slider from \"react-slick\";\r\n\r\nclass HandBook extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"section-share section-handbook\">\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <span className=\"title-section\">Sắc màu Ẩm thực</span>\r\n            <button className=\"btn-section\">Xem thêm</button>\r\n          </div>\r\n          <div className=\"section-body\">\r\n            <Slider {...this.props.settings}>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 1</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 2</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 3</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 4</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 5</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 6</div>\r\n              </div>\r\n            </Slider>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HandBook);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Video.js",["300"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass Video extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"section-share section-video\">\r\n        <div className=\"section-video-header\">Khám phá</div>\r\n        <div className=\"section-video-content\">\r\n          <div className=\"content-left\">\r\n            <iframe\r\n              width=\"100%\"\r\n              height=\"400px\"\r\n              src=\"https://www.youtube.com/embed/zXAqw0Vzr4w\"\r\n              title=\"Nothing you can’t solve with a traditional Sichuan hot pot这世界上没有什么事情是一顿地道老四川火锅解决不了的|Liziqi channel\"\r\n              frameBorder=\"0\"\r\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n              allowFullScreen\r\n            ></iframe>\r\n          </div>\r\n          <div className=\"content-right\">\r\n            <p>\r\n              It's so cold outside, let's place a traditional Sichuan hot pot at\r\n              our website! The boiling red soup brings all the trouble away, it\r\n              warms your heart and stomach. There's nothing you can't solve with\r\n              our Sichuan hot pot!\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeFooter.js",["301","302"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass HomeFooter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home-footer\">\r\n        <p>\r\n          &copy; 2023 EXOL. More information, please visit my facebook.\r\n          <a target=\"_blank\" href=\"https://www.facebook.com/weareoneEXO\">\r\n            &#8594; Click here &#8592;\r\n          </a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\HotpotRedux.js",["303","304"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from \"../../../utils\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport \"./HotpotRedux.scss\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport \"react-image-lightbox/style.css\";\r\nimport TableManageHotpot from \"./TableManageHotpot\";\r\nimport { getAllRestaurantNamesService } from \"../../../services/hotpotService\";\r\nclass HotpotRedux extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      provinceArr: [],\r\n      priceArr: [],\r\n      paymentArr: [],\r\n      previewImgURL: \"\",\r\n      isOpen: false,\r\n      name: \"\",\r\n      phonenumber: \"\",\r\n      provinceId: \"\",\r\n      restaurantId: \"\",\r\n      typeId: \"\",\r\n      priceId: \"\",\r\n      paymentId: \"\",\r\n      note: \"\",\r\n      image: \"\",\r\n      action: \"\",\r\n      hotpotEditId: \"\",\r\n      listRestaurantNames: [],\r\n      //restaurantAddress:[],\r\n      listTypeNames: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.props.getPriceStart();\r\n    this.props.getPaymentStart();\r\n    this.props.getProvinceStart();\r\n    this.props.fetchAllRestaurantNames();\r\n    this.props.fetchAllTypeNames();\r\n    this.props.fetchAllHotpotNames();\r\n    // try {\r\n    //   let res = await getAllCodeService(\"province\");\r\n    //   console.log(\"check provine\", res);\r\n    //   if (res && res.errCode === 0) {\r\n    //     this.setState({\r\n    //       provinceArr: res.data,\r\n    //     });\r\n    //   }\r\n    // } catch (e) {\r\n    //   console.log(e);\r\n    // }\r\n  }\r\n\r\n  // sau khi render chay se goi den ham componentDidUpdate\r\n  //hàm componentDidUpdate so sánh hiện tại (this) và quá khứ (prev) của provinceRedux\r\n  // quá khứ là chưa fire event, hiện tại là đã fire event\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.priceRedux !== this.props.priceRedux) {\r\n      let arrPrices = this.props.priceRedux;\r\n      this.setState({\r\n        priceArr: arrPrices,\r\n        priceId: arrPrices && arrPrices.length > 0 ? arrPrices[0].keyMap : \"\",\r\n      });\r\n    }\r\n    if (prevProps.paymentRedux !== this.props.paymentRedux) {\r\n      let arrPayments = this.props.paymentRedux;\r\n      this.setState({\r\n        paymentArr: arrPayments,\r\n        paymentId:\r\n          arrPayments && arrPayments.length > 0 ? arrPayments[0].keyMap : \" \",\r\n      });\r\n    }\r\n    if (prevProps.provinceRedux !== this.props.provinceRedux) {\r\n      let arrProvinces = this.props.provinceRedux;\r\n      this.setState({\r\n        provinceArr: arrProvinces,\r\n        provinceId:\r\n          arrProvinces && arrProvinces.length > 0 ? arrProvinces[0].keyMap : \"\",\r\n      });\r\n    }\r\n\r\n    if (prevProps.allRestaurantNames !== this.props.allRestaurantNames) {\r\n      let arrRestaurantNames = this.props.allRestaurantNames;\r\n      this.setState({\r\n        listRestaurantNames: arrRestaurantNames,\r\n        restaurantId:\r\n          arrRestaurantNames && arrRestaurantNames.length > 0\r\n            ? arrRestaurantNames[0].id\r\n            : \"\",\r\n      });\r\n    }\r\n    if (prevProps.allTypeNames !== this.props.allTypeNames) {\r\n      let arrTypeNames = this.props.allTypeNames;\r\n      this.setState({\r\n        listTypeNames: arrTypeNames,\r\n        typeId:\r\n          arrTypeNames && arrTypeNames.length > 0 ? arrTypeNames[0].id : \"\",\r\n      });\r\n    }\r\n    if (prevProps.listHotpots !== this.props.listHotpots) {\r\n      let arrProvinces = this.props.provinceRedux;\r\n      let arrPayments = this.props.paymentRedux;\r\n      let arrPrices = this.props.priceRedux;\r\n      let arrRestaurantNames = this.props.allRestaurantNames;\r\n      let arrTypeNames = this.props.allTypeNames;\r\n      this.setState({\r\n        name: \"\",\r\n        phonenumber: \"\",\r\n        note: \"\",\r\n        //image: \"\",\r\n        provinceId:\r\n          arrProvinces && arrProvinces.length > 0 ? arrProvinces[0].keyMap : \"\",\r\n        paymentId:\r\n          arrPayments && arrPayments.length > 0 ? arrPayments[0].keyMap : \" \",\r\n        priceId: arrPrices && arrPrices.length > 0 ? arrPrices[0].keyMap : \"\",\r\n        restaurantId:\r\n          arrRestaurantNames && arrRestaurantNames.length > 0\r\n            ? arrRestaurantNames[0].id\r\n            : \"\",\r\n        typeId:\r\n          arrTypeNames && arrTypeNames.length > 0 ? arrTypeNames[0].id : \"\",\r\n        action: CRUD_ACTIONS.CREATE,\r\n        previewImgURL: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        image: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveHotpot = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === false) return;\r\n    let { action } = this.state;\r\n    //let action = this.state.action\r\n    //fire redux create hotpot\r\n    if (action === CRUD_ACTIONS.CREATE) {\r\n      this.props.createNewHotpot({\r\n        name: this.state.name,\r\n        phonenumber: this.state.phonenumber,\r\n        priceId: this.state.priceId,\r\n        provinceId: this.state.provinceId,\r\n        paymentId: this.state.paymentId,\r\n        typeId: this.state.typeId,\r\n        restaurantId: this.state.restaurantId,\r\n        note: this.state.note,\r\n        image: this.state.image,\r\n      });\r\n    }\r\n    if (action === CRUD_ACTIONS.EDIT) {\r\n      //Fire redux edit hotpot\r\n      this.props.editHotpotRedux({\r\n        id: this.state.hotpotEditId,\r\n        name: this.state.name,\r\n        phonenumber: this.state.phonenumber,\r\n        priceId: this.state.priceId,\r\n        provinceId: this.state.provinceId,\r\n        paymentId: this.state.paymentId,\r\n        typeId: this.state.typeId,\r\n        restaurantId: this.state.restaurantId,\r\n        note: this.state.note,\r\n        image: this.state.image,\r\n      });\r\n    }\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrCheck = [\r\n      \"name\",\r\n      \"phonenumber\",\r\n      \"provinceId\",\r\n      \"restaurantId\",\r\n      \"typeId\",\r\n      \"priceId\",\r\n      \"paymentId\",\r\n      \"note\",\r\n    ];\r\n    for (let i = 0; i < arrCheck.length; i++) {\r\n      if (!this.state[arrCheck[i]]) {\r\n        isValid = false;\r\n        alert(\"This input is required: \" + arrCheck[i]);\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  onChangeInput = (event, id) => {\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    let imageBase64 = \"\";\r\n    if (hotpot.image) {\r\n      imageBase64 = new Buffer(hotpot.image, \"base64\").toString(\"binary\");\r\n    }\r\n    this.setState({\r\n      name: hotpot.name,\r\n      phonenumber: hotpot.phonenumber,\r\n      restaurantId: hotpot.restaurantId,\r\n      typeId: hotpot.typeId,\r\n      note: hotpot.note,\r\n      image: \"\",\r\n      previewImgURL: imageBase64,\r\n      provinceId: hotpot.provinceId,\r\n      paymentId: hotpot.paymentId,\r\n      priceId: hotpot.priceId,\r\n      action: CRUD_ACTIONS.EDIT,\r\n      hotpotEditId: hotpot.id,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let language = this.props.language;\r\n    let isLoadingProvince = this.props.isLoadingProvince;\r\n    let provinces = this.state.provinceArr;\r\n    let prices = this.state.priceArr;\r\n    let payments = this.state.paymentArr;\r\n    let restaurantNames = this.state.listRestaurantNames;\r\n    let typeNames = this.state.listTypeNames;\r\n\r\n    let {\r\n      name,\r\n      phonenumber,\r\n      provinceId,\r\n      restaurantId,\r\n      typeId,\r\n      priceId,\r\n      paymentId,\r\n      note,\r\n      image,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"hotpot-redux-container\">\r\n        <div className=\"title\">Hotpot</div>\r\n        <div className=\"hotpot-redux-body\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 my-3\">\r\n                <b>\r\n                  <FormattedMessage id=\"manage-hotpot.add\" />\r\n                </b>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                {isLoadingProvince === true ? \"Loading province\" : \"\"}\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.name\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={name}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"name\");\r\n                  }}\r\n                  // dùng disabled để khi edit không cho phép chỉnh sửa trường này\r\n                  // disabled={\r\n                  //   this.state.action === CRUD_ACTIONS.EDIT ? true : false\r\n                  // }\r\n                />\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.phone-number\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={phonenumber}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"phonenumber\");\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.restaurantId\" />\r\n                </label>\r\n                {/* <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={restaurantId}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                /> */}\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={restaurantId}\r\n                >\r\n                  {restaurantNames &&\r\n                    restaurantNames.length > 0 &&\r\n                    restaurantNames.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.id}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.typeId\" />\r\n                </label>\r\n                {/* <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={typeId}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"typeId\");\r\n                  }}\r\n                /> */}\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"typeId\");\r\n                  }}\r\n                  value={typeId}\r\n                >\r\n                  {typeNames &&\r\n                    typeNames.length > 0 &&\r\n                    typeNames.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.id}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.provinceId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"provinceId\");\r\n                  }}\r\n                  value={provinceId}\r\n                >\r\n                  {provinces &&\r\n                    provinces.length > 0 &&\r\n                    provinces.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.priceId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"priceId\");\r\n                  }}\r\n                  value={priceId}\r\n                >\r\n                  {prices &&\r\n                    prices.length > 0 &&\r\n                    prices.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.paymentId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"paymentId\");\r\n                  }}\r\n                  value={paymentId}\r\n                >\r\n                  {payments &&\r\n                    payments.length > 0 &&\r\n                    payments.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-8\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.note\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={note}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"note\");\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.image\" />\r\n                </label>\r\n                <div className=\"preview-img-container\">\r\n                  <input\r\n                    id=\"previewImg\"\r\n                    type=\"file\"\r\n                    hidden\r\n                    onChange={(event) => this.handleOnChangeImage(event)}\r\n                  />\r\n                  <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                    Upload image <i className=\"fas fa-upload\"></i>\r\n                  </label>\r\n                  <div\r\n                    className=\"preview-image\"\r\n                    style={{\r\n                      backgroundImage: `url(${this.state.previewImgURL})`,\r\n                    }}\r\n                    onClick={() => this.openPreviewImage()}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-12 my-3\">\r\n                <button\r\n                  className={\r\n                    this.state.action === CRUD_ACTIONS.EDIT\r\n                      ? \"btn btn-warning\"\r\n                      : \"btn btn-primary\"\r\n                  }\r\n                  onClick={() => this.handleSaveHotpot()}\r\n                >\r\n                  {this.state.action === CRUD_ACTIONS.EDIT ? (\r\n                    <FormattedMessage id=\"manage-hotpot.edit\" />\r\n                  ) : (\r\n                    <FormattedMessage id=\"manage-hotpot.save\" />\r\n                  )}\r\n                </button>\r\n              </div>\r\n              <div className=\"col-12 mb-5 \">\r\n                <TableManageHotpot\r\n                  handleEditHotpot={this.handleEditHotpot}\r\n                  action={this.state.action}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n\r\n    priceRedux: state.admin.prices,\r\n    paymentRedux: state.admin.payments,\r\n    provinceRedux: state.admin.provinces,\r\n    allRestaurantNames: state.admin.allRestaurantNames,\r\n    allTypeNames: state.admin.allTypeNames,\r\n    isLoadingProvince: state.admin.isLoadingProvince,\r\n    listHotpots: state.admin.hotpots,\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getPriceStart: () => dispatch(actions.fetchPriceStart()),\r\n    getPaymentStart: () => dispatch(actions.fetchPaymentStart()),\r\n    getProvinceStart: () => dispatch(actions.fetchProvinceStart()),\r\n    createNewHotpot: (data) => dispatch(actions.createNewHotpot(data)),\r\n    fetchHotpotsRedux: () => dispatch(actions.fetchAllHotpotsStart()),\r\n    editHotpotRedux: (data) => dispatch(actions.editHotpot(data)),\r\n    fetchAllRestaurantNames: () => dispatch(actions.fetchAllRestaurantNames()),\r\n    fetchAllTypeNames: () => dispatch(actions.fetchAllTypeNames()),\r\n    // processLogout: () => dispatch(actions.processLogout()),\r\n    // changeLanguageAppRedux: (language) =>\r\n    //   dispatch(actions.changeLanguageApp(language)),\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotRedux);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\UserRedux.js",["305"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nclass UserRedux extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user-redux-container\">\r\n        <div className=\"title\">UserRedux LINHHHHH</div>\r\n        <div className=\"user-redux-body\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <form>\r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-md-6\">\r\n                    <label for=\"inputEmail4\">Email</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      class=\"form-control\"\r\n                      id=\"inputEmail4\"\r\n                      placeholder=\"Email\"\r\n                    />\r\n                  </div>\r\n                  <div class=\"form-group col-md-6\">\r\n                    <label for=\"inputPassword4\">Password</label>\r\n                    <input\r\n                      type=\"password\"\r\n                      class=\"form-control\"\r\n                      id=\"inputPassword4\"\r\n                      placeholder=\"Password\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"inputAddress\">Address</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    id=\"inputAddress\"\r\n                    placeholder=\"1234 Main St\"\r\n                  />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"inputAddress2\">Address 2</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    id=\"inputAddress2\"\r\n                    placeholder=\"Apartment, studio, or floor\"\r\n                  />\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-md-6\">\r\n                    <label for=\"inputCity\">City</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"inputCity\" />\r\n                  </div>\r\n                  <div class=\"form-group col-md-4\">\r\n                    <label for=\"inputState\">State</label>\r\n                    <select id=\"inputState\" class=\"form-control\">\r\n                      <option selected>Choose...</option>\r\n                      <option>...</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"form-group col-md-2\">\r\n                    <label for=\"inputZip\">Zip</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"inputZip\" />\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <div class=\"form-check\">\r\n                    <input\r\n                      class=\"form-check-input\"\r\n                      type=\"checkbox\"\r\n                      id=\"gridCheck\"\r\n                    />\r\n                    <label class=\"form-check-label\" for=\"gridCheck\">\r\n                      Check me out\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">\r\n                  Sign in\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\adminActions.js",["306"],"import actionTypes from \"./actionTypes\";\r\nimport {\r\n  getAllCodeService,\r\n  createNewHotpotService,\r\n  getAllHotpots,\r\n  deleteHotpotService,\r\n  editHotpotService,\r\n  getTopHotpotService,\r\n  getAllHotpotNameServices,\r\n  saveDetailHotpotService,\r\n  getAllTypeNamesService,\r\n  getAllRestaurantNamesService,\r\n} from \"../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// export const fetchProvinceStart = () => ({\r\n//   type: actionTypes.FETCH_PROVINCE_START,\r\n// });\r\n\r\n//provine\r\nexport const fetchProvinceStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PROVINCE_START,\r\n      });\r\n      let res = await getAllCodeService(\"PROVINCE\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchProvinceSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchProvinceFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchProvinceFailed());\r\n      console.log(\"fetchProvinceStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchProvinceSuccess = (provinceData) => ({\r\n  type: actionTypes.FETCH_PROVINCE_SUCCESS,\r\n  data: provinceData,\r\n});\r\n\r\nexport const fetchProvinceFailed = () => ({\r\n  type: actionTypes.FETCH_PROVINCE_FAILED,\r\n});\r\n\r\n//price\r\n\r\nexport const fetchPriceSuccess = (priceData) => ({\r\n  type: actionTypes.FETCH_PRICE_SUCCESS,\r\n  data: priceData,\r\n});\r\n\r\nexport const fetchPriceFailed = () => ({\r\n  type: actionTypes.FETCH_PRICE_FAILED,\r\n});\r\n\r\n//payment\r\n\r\nexport const fetchPaymentSuccess = (paymentData) => ({\r\n  type: actionTypes.FETCH_PAYMENT_SUCCESS,\r\n  data: paymentData,\r\n});\r\n\r\nexport const fetchPaymentFailed = () => ({\r\n  type: actionTypes.FETCH_PAYMENT_FAILED,\r\n});\r\n\r\nexport const fetchPriceStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PRICE_START,\r\n      });\r\n      let res = await getAllCodeService(\"PRICE\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchPriceSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchPriceFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchPriceFailed());\r\n      console.log(\"fetchPriceStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchPaymentStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PAYMENT_START,\r\n      });\r\n      let res = await getAllCodeService(\"PAYMENT\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchPaymentSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchPaymentFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchPaymentFailed());\r\n      console.log(\"fetchPaymentStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllRestaurantNames = () => {\r\n  console.log(\"FETCH_ error1\");\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      console.log(\"FETCH_ error____\");\r\n      let res = await getAllRestaurantNamesService();\r\n      if (res && res.errCode === 0) {\r\n        console.log(\"FETCH_ error2\");\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_SUCCESS,\r\n          dataRestaurantNames: res.data,\r\n        });\r\n      } else {\r\n        console.log(\"FETCH_ error3\");\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_RESTAURANT_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllTypeNames = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllTypeNamesService();\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_SUCCESS,\r\n          dataTypeNames: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_TYPE_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const createNewHotpot = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await createNewHotpotService(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Create a new hotpot succeed!\");\r\n        dispatch(createHotpotSuccess());\r\n        dispatch(fetchAllHotpotsStart());\r\n      } else {\r\n        toast.error(\"Create a new hotpot error!\");\r\n        dispatch(createHotpotFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(createHotpotFailed());\r\n      console.log(\"createNewHotpot error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createHotpotFailed = () => ({\r\n  type: actionTypes.CREATE_HOTPOT_FAILED,\r\n});\r\n\r\nexport const createHotpotSuccess = () => ({\r\n  type: actionTypes.CREATE_HOTPOT_SUCCESS,\r\n});\r\n\r\nexport const fetchAllHotpotsStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PROVINCE_START,\r\n      });\r\n      let res = await getAllHotpots(\"ALL\");\r\n      let res1 = await getTopHotpotService(\"\");\r\n      console.log(\"check res get top hotpot res:\", res);\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchAllHotpotsSuccess(res.hotpots.hotpots.reverse()));\r\n      } else {\r\n        dispatch(fetchAllHotpotsFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchAllHotpotsFailed());\r\n      console.log(\"fetchAllHotpotsStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllHotpotsFailed = () => ({\r\n  type: actionTypes.FETCH_ALL_HOTPOTS_FAILED,\r\n});\r\n\r\nexport const fetchAllHotpotsSuccess = (data) => ({\r\n  type: actionTypes.FETCH_ALL_HOTPOTS_SUCCESS,\r\n  hotpots: data,\r\n});\r\n\r\nexport const deleteHotpot = (hotpotId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await deleteHotpotService(hotpotId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Delete the hotpot succeed!\");\r\n        dispatch(deleteHotpotSuccess());\r\n        dispatch(fetchAllHotpotsStart());\r\n      } else {\r\n        toast.error(\"Delete the hotpot error!\");\r\n        dispatch(deleteHotpotFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(deleteHotpotFailed());\r\n      console.log(\"deleteHotpot error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteHotpotFailed = () => ({\r\n  type: actionTypes.DELETE_HOTPOT_FAILED,\r\n});\r\n\r\nexport const deleteHotpotSuccess = (data) => ({\r\n  type: actionTypes.DELETE_HOTPOT_SUCCESS,\r\n  hotpots: data,\r\n});\r\n\r\nexport const editHotpot = (hotpotId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await editHotpotService(hotpotId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"edit the hotpot succeed!\");\r\n        dispatch(editHotpotSuccess());\r\n        dispatch(fetchAllHotpotsStart());\r\n      } else {\r\n        toast.error(\"edit the hotpot error!\");\r\n        dispatch(editHotpotFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(editHotpotFailed());\r\n      console.log(\"editHotpot error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editHotpotFailed = () => ({\r\n  type: actionTypes.DELETE_HOTPOT_FAILED,\r\n});\r\n\r\nexport const editHotpotSuccess = (data) => ({\r\n  type: actionTypes.DELETE_HOTPOT_SUCCESS,\r\n  hotpots: data,\r\n});\r\n\r\nexport const fetchTopHotpot = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getTopHotpotService(\"10\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_TOP_HOTPOT_SUCCESS,\r\n          dataHotpots: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_TOP_HOTPOT_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_TOP_HOTPOT_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_TOP_HOTPOT_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllHotpotNames = () => {\r\n  console.log(\"FETCH_ hotpo1\");\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      console.log(\"FETCH_ hotpo2\");\r\n      let res = await getAllHotpotNameServices();\r\n      if (res && res.errCode === 0) {\r\n        console.log(\"FETCH_ hotpo3\");\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_HOTPOT_NAMES_SUCCESS,\r\n          dataHotpotNames: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_HOTPOT_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_HOTPOT_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_HOTPOT_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveDetailHotpot = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await saveDetailHotpotService(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Save info detail hotpot succeed!\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_HOTPOT_SUCCESS,\r\n        });\r\n      } else {\r\n        console.log(\"error res linh\", res);\r\n        toast.error(\"Save info detail hotpot error!\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_HOTPOT_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Save info detail hotpot error!\");\r\n      console.log(\"SAVE_DETAIL_HOTPOT_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FSAVE_DETAIL_HOTPOT_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllCodeService(\"TIME\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\r\n          dataTime: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALLCODE_SCHEDULE_TIME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\adminReducer.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\TableManageHotpot.js",["307","308","309","310"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./TableManageHotpot.scss\";\r\nimport * as actions from \"../../../store/actions\";\r\n\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\n// import style manually\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\n\r\n// Register plugins if required\r\n// MdEditor.use(YOUR_PLUGINS_HERE);\r\n\r\n// Initialize a markdown parser\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n// Finish!\r\nfunction handleEditorChange({ html, text }) {\r\n  console.log(\"handleEditorChange\", html, text);\r\n}\r\n\r\nclass TableManageHotpot extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class TableManageHotpot này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hotpotsRedux: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchHotpotRedux();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.listHotpots !== this.props.listHotpots) {\r\n      this.setState({\r\n        hotpotsRedux: this.props.listHotpots,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleDeleteHotpot = (hotpot) => {\r\n    this.props.deleteHotpotRedux(hotpot.id);\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    this.props.handleEditHotpot(hotpot);\r\n  };\r\n\r\n  render() {\r\n    let arrHotpots = this.state.hotpotsRedux;\r\n    return (\r\n      <React.Fragment>\r\n        <table id=\"TableManageHotpot\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>ProvinceId</th>\r\n              <th>Phone number</th>\r\n              <th>Restaurant Id</th>\r\n              <th>Type Id</th>\r\n              <th>PriceId</th>\r\n              <th>Note</th>\r\n              <th>PaymentId</th>\r\n              <th>Action</th>\r\n            </tr>\r\n\r\n            {arrHotpots &&\r\n              arrHotpots.length > 0 &&\r\n              arrHotpots.map((item, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.provinceId}</td>\r\n                    <td>{item.phonenumber}</td>\r\n                    <td>{item.restaurantId}</td>\r\n                    <td>{item.typeId}</td>\r\n                    <td>{item.priceId}</td>\r\n                    <td>{item.note}</td>\r\n                    <td>{item.paymentId}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => this.handleEditHotpot(item)}\r\n                        className=\"btn-edit\"\r\n                      >\r\n                        <i className=\"fas fa-pencil-alt\"></i>\r\n                      </button>\r\n                      <button\r\n                        onClick={() => this.handleDeleteHotpot(item)}\r\n                        className=\"btn-delete\"\r\n                      >\r\n                        <i className=\"fas fa-trash\"></i>\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </table>\r\n        {/* <MdEditor\r\n          style={{ height: \"500px\" }}\r\n          renderHTML={(text) => mdParser.render(text)}\r\n          onChange={handleEditorChange}\r\n        /> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    listHotpots: state.admin.hotpots,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchHotpotRedux: () => dispatch(actions.fetchAllHotpotsStart()),\r\n    deleteHotpotRedux: (id) => dispatch(actions.deleteHotpot(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ManageHotpot.js",["311","312","313"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./ManageHotpot.scss\";\r\nimport * as actions from \"../../../store/actions\";\r\n\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\nimport Select from \"react-select\";\r\nimport { getDetailInfoHotpot } from \"../../../services/hotpotService\";\r\nimport { CRUD_ACTIONS, LANGUAGES } from \"../../../utils\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageHotpot extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class ManageHotpot này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contentMarkdown: \"\",\r\n      contentHTML: \"\",\r\n      selectedHotpot: \"\",\r\n      description: \"\",\r\n      listHotpotNames: [],\r\n      hasOldData: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAllHotpotNames();\r\n  }\r\n\r\n  buildDataInputSelect = (inputData) => {\r\n    let result = [];\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        let object = {};\r\n        object.label = `${item.name}`;\r\n        object.value = item.id;\r\n        result.push(object);\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allHotpotNames !== this.props.allHotpotNames) {\r\n      let dataSelect = this.buildDataInputSelect(this.props.allHotpotNames);\r\n      this.setState({\r\n        listHotpotNames: dataSelect,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleEditorChange = ({ html, text }) => {\r\n    this.setState({\r\n      contentMarkdown: text,\r\n      contentHTML: html,\r\n    });\r\n  };\r\n\r\n  handleSaveContentMarkdown = () => {\r\n    let { hasOldData } = this.state;\r\n    this.props.saveDetailHotpot({\r\n      contentHTML: this.state.contentHTML,\r\n      contentMarkdown: this.state.contentMarkdown,\r\n      description: this.state.description,\r\n      hotpotId: this.state.selectedHotpot.value,\r\n      action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = async (selectedHotpot) => {\r\n    this.setState({ selectedHotpot });\r\n    let res = await getDetailInfoHotpot(selectedHotpot.value);\r\n    if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n      let markdown = res.data.Markdown;\r\n      this.setState({\r\n        contentHTML: markdown.contentHTML,\r\n        contentMarkdown: markdown.contentMarkdown,\r\n        description: markdown.description,\r\n        hasOldData: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        contentHTML: \"\",\r\n        contentMarkdown: \"\",\r\n        description: \"\",\r\n        hasOldData: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOnChangeDesc = (event) => {\r\n    this.setState({\r\n      description: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { hasOldData } = this.state;\r\n    return (\r\n      <div className=\"manage-hotpot-container\">\r\n        <div className=\"manage-hotpot-title\">Tạo thêm thông tin món lẩu</div>\r\n        <div className=\"more-info\">\r\n          <div className=\"content-left form-group\">\r\n            <label>Chọn món lẩu</label>\r\n            <Select\r\n              value={this.state.selectedHotpot}\r\n              onChange={this.handleChangeSelect}\r\n              options={this.state.listHotpotNames}\r\n            />\r\n          </div>\r\n          <div className=\"content-right\">\r\n            <label>Thông tin giới thiệu</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              rows=\"4\"\r\n              onChange={(event) => this.handleOnChangeDesc(event)}\r\n              value={this.state.description}\r\n            >\r\n              asdfghj\r\n            </textarea>\r\n          </div>\r\n        </div>\r\n        <div className=\"manage-hotpot-editor\">\r\n          <label>Thông tin chi tiết</label>\r\n          <MdEditor\r\n            style={{ height: \"500px\" }}\r\n            renderHTML={(text) => mdParser.render(text)}\r\n            onChange={this.handleEditorChange}\r\n            value={this.state.contentMarkdown}\r\n          />\r\n        </div>\r\n        <button\r\n          className={\r\n            hasOldData === true\r\n              ? \"save-content-hotpot\"\r\n              : \"create-content-hotpot\"\r\n          }\r\n          onClick={() => this.handleSaveContentMarkdown()}\r\n        >\r\n          {hasOldData === true ? (\r\n            <span>Lưu thông tin </span>\r\n          ) : (\r\n            <span>Tạo thông tin</span>\r\n          )}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n    saveDetailHotpot: (data) => dispatch(actions.saveDetailHotpot(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\DetailHotpot.js",["314"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport \"./DetailHotpot.scss\";\r\nimport { getDetailInfoHotpot } from \"../../../services/hotpotService\";\r\nimport HotpotSchedule from \"./HotpotSchedule\";\r\nimport HotpotExtraInfo from \"./HotpotExtraInfo\";\r\nclass DetailHotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      detailHotpot: {},\r\n      currentHotpotId: -1,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n      this.setState({\r\n        currentHotpotId: id,\r\n      });\r\n      let res = await getDetailInfoHotpot(id);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          detailHotpot: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  render() {\r\n    let { language } = this.props;\r\n    let { detailHotpot } = this.state;\r\n    let name = \"\";\r\n    name = `${detailHotpot.name}`;\r\n    return (\r\n      <>\r\n        <HomeHeader isShowBanner={false} />\r\n        <div className=\"hotpot-detail-container\">\r\n          <div className=\"intro-hotpot\">\r\n            <div\r\n              className=\"content-left\"\r\n              style={{\r\n                backgroundImage: `url(${\r\n                  detailHotpot && detailHotpot.image ? detailHotpot.image : \"\"\r\n                })`,\r\n              }}\r\n            ></div>\r\n            <div className=\"content-right\">\r\n              <div className=\"up\">{name}</div>\r\n              <div className=\"down\">\r\n                {detailHotpot &&\r\n                  detailHotpot.Markdown &&\r\n                  detailHotpot.Markdown.description && (\r\n                    <span>{detailHotpot.Markdown.description}</span>\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"schedule-hotpot\">\r\n            <div className=\"content-left\">\r\n              <HotpotSchedule hotpotIdFromParent={this.state.currentHotpotId} />\r\n            </div>\r\n            <div className=\"content-right\">\r\n              <HotpotExtraInfo\r\n                hotpotIdFromParent={this.state.currentHotpotId}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"detail-info-hotpot\">\r\n            {detailHotpot &&\r\n              detailHotpot.Markdown &&\r\n              detailHotpot.Markdown.contentHTML && (\r\n                <div\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: detailHotpot.Markdown.contentHTML,\r\n                  }}\r\n                ></div>\r\n              )}\r\n          </div>\r\n          <div className=\"comment-hotpot\"></div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ManageSchedule.js",["315","316","317","318","319","320","321","322","323"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport \"./ManageSchedule.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Select from \"react-select\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from \"../../../utils\";\r\nimport DatePicker from \"../../../components/Input/DatePicker\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport _, { result } from \"lodash\";\r\nimport { saveBulkScheduleHotpot } from \"../../../services/hotpotService\";\r\nclass ManageSchedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listHotpotNames: [],\r\n      selectedHotpot: {},\r\n      currentDate: \"\",\r\n      rangeTime: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAllHotpotNames();\r\n    this.props.fetchAllScheduleTime();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allHotpotNames !== this.props.allHotpotNames) {\r\n      let dataSelect = this.buildDataInputSelect(this.props.allHotpotNames);\r\n      this.setState({\r\n        listHotpotNames: dataSelect,\r\n      });\r\n    }\r\n    if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n      let data = this.props.allScheduleTime;\r\n      if (data && data.length > 0) {\r\n        data = data.map((item) => ({ ...item, isSelected: false }));\r\n      }\r\n      this.setState({\r\n        rangeTime: data,\r\n      });\r\n    }\r\n  }\r\n\r\n  buildDataInputSelect = (inputData) => {\r\n    let result = [];\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        let object = {};\r\n        object.label = `${item.name}`;\r\n        object.value = item.id;\r\n        result.push(object);\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  handleChangeSelect = async (selectedHotpot) => {\r\n    this.setState({ selectedHotpot });\r\n  };\r\n\r\n  handleOnChangeDatePicker = (date) => {\r\n    this.setState({\r\n      currentDate: date[0],\r\n    });\r\n  };\r\n  handleClickTimeBtn = (time) => {\r\n    let { rangeTime } = this.state;\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      rangeTime = rangeTime.map((item) => {\r\n        if (item.id === time.id) {\r\n          item.isSelected = !item.isSelected;\r\n        }\r\n        return item;\r\n      });\r\n      this.setState({\r\n        rangeTime: rangeTime,\r\n      });\r\n    }\r\n  };\r\n\r\n  //_.isEmpty(selectedHotpot) tra ve true khi object rỗng\r\n\r\n  handleSaveSchedule = async () => {\r\n    let { rangeTime, selectedHotpot, currentDate } = this.state;\r\n    let result = [];\r\n    if (!currentDate) {\r\n      toast.error(\"Invalid date!\");\r\n      return;\r\n    }\r\n    if (selectedHotpot && _.isEmpty(selectedHotpot)) {\r\n      toast.error(\"Invalid selected hotpot!\");\r\n      return;\r\n    }\r\n    let formatedDate = new Date(currentDate).getTime();\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      let selectedTime = rangeTime.filter((item) => item.isSelected === true);\r\n      selectedTime.map((schedule) => {\r\n        let object = {};\r\n        object.hotpotId = selectedHotpot.value;\r\n        object.date = formatedDate;\r\n        object.timeType = schedule.keyMap;\r\n        result.push(object);\r\n      });\r\n    } else {\r\n      toast.error(\"Invalid selected time!\");\r\n      return;\r\n    }\r\n    let res = await saveBulkScheduleHotpot({\r\n      arrSchedule: result,\r\n      hotpotId: selectedHotpot.value,\r\n      formatedDate: formatedDate,\r\n    });\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Save info successfully!\");\r\n    } else {\r\n      toast.error(\"error saveBulkScheduleHotpot\");\r\n      console.log(\"error saveBulkScheduleHotpot >>> res:\", res);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { rangeTime } = this.state;\r\n    let { language } = this.props;\r\n    let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n    return (\r\n      <div className=\"manage-schedule-container\">\r\n        <div className=\"manage-schedule-title\">\r\n          <FormattedMessage id=\"manage-schedule.title\" />\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-6 form-group\">\r\n              <label>\r\n                <FormattedMessage id=\"manage-schedule.choose-hotpot\" />\r\n              </label>\r\n              <Select\r\n                value={this.state.selectedHotpot}\r\n                onChange={this.handleChangeSelect}\r\n                options={this.state.listHotpotNames}\r\n              />\r\n            </div>\r\n            <div className=\"col-6 form-group\">\r\n              <label>\r\n                <FormattedMessage id=\"manage-schedule.choose-date\" />\r\n              </label>\r\n              <DatePicker\r\n                onChange={this.handleOnChangeDatePicker}\r\n                className=\"form-control\"\r\n                value={this.state.currentDate}\r\n                minDate={yesterday}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 pick-hour-container\">\r\n              {rangeTime &&\r\n                rangeTime.length > 0 &&\r\n                rangeTime.map((item, index) => {\r\n                  return (\r\n                    <button\r\n                      button\r\n                      className={\r\n                        item.isSelected === true\r\n                          ? \"btn btn-schedule active\"\r\n                          : \"btn btn-schedule\"\r\n                      }\r\n                      key={index}\r\n                      onClick={() => this.handleClickTimeBtn(item)}\r\n                    >\r\n                      {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                    </button>\r\n                  );\r\n                })}\r\n            </div>\r\n            <div className=\"col-12\">\r\n              <button\r\n                className=\"btn btn-primary btn-save-schedule\"\r\n                onClick={() => this.handleSaveSchedule()}\r\n              >\r\n                <FormattedMessage id=\"manage-schedule.save\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n    language: state.app.language,\r\n    allScheduleTime: state.admin.allScheduleTime,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n    fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Input\\DatePicker.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Formating\\FormattedDate.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotSchedule.js",["324","325"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotSchedule.scss\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment\";\r\nimport localization from \"moment/locale/vi\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport { getScheduleHotpotByDate } from \"../../../services/hotpotService\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport BookingModal from \"./Modal/BookingModal\";\r\n\r\nclass HotpotSchedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allDays: [],\r\n      allAvailableTime: [],\r\n      isOpenModalBooking: false,\r\n      dataScheduleTimeModal: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let { language } = this.props;\r\n    let allDays = this.getArrDays(language);\r\n\r\n    if (this.props.hotpotIdFromParent) {\r\n      let res = await getScheduleHotpotByDate(\r\n        this.props.hotpotIdFromParent,\r\n        allDays[0].value\r\n      );\r\n      console.log(\r\n        \"this.props.hotpotIdFromParent,\",\r\n        this.props.hotpotIdFromParent\r\n      );\r\n      this.setState({\r\n        allAvailableTime: res.data ? res.data : [],\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      allDays: allDays,\r\n    });\r\n  }\r\n\r\n  capitalizeFisrtLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  getArrDays = (language) => {\r\n    let allDays = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      let object = {};\r\n      if (language === LANGUAGES.VI) {\r\n        if (i === 0) {\r\n          let ddMM = moment(new Date()).format(\"DD/MM\");\r\n          let today = `Hôm nay - ${ddMM}`;\r\n          object.label = today;\r\n        } else {\r\n          let labelVi = moment(new Date())\r\n            .add(i, \"days\")\r\n            .format(\"dddd - DD/MM\");\r\n          object.label = this.capitalizeFisrtLetter(labelVi);\r\n        }\r\n      } else {\r\n        if (i === 0) {\r\n          let ddMM = moment(new Date()).format(\"DD/MM\");\r\n          let today = `Today - ${ddMM}`;\r\n          object.label = today;\r\n        } else {\r\n          object.label = moment(new Date())\r\n            .add(i, \"days\")\r\n            .locale(\"en\")\r\n            .format(\"dddd - DD/MM\");\r\n        }\r\n      }\r\n      object.value = moment(new Date()).add(i, \"days\").startOf(\"day\").valueOf();\r\n      allDays.push(object);\r\n    }\r\n    return allDays;\r\n  };\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.language !== prevProps.language) {\r\n      let allDays = this.getArrDays(this.props.language);\r\n      this.setState({\r\n        allDays: allDays,\r\n      });\r\n    }\r\n    if (this.props.hotpotIdFromParent !== prevProps.hotpotIdFromParent) {\r\n      let allDays = this.getArrDays(this.props.language);\r\n      let res = await getScheduleHotpotByDate(\r\n        this.props.hotpotIdFromParent,\r\n        allDays[0].value\r\n      );\r\n      this.setState({\r\n        allAvailableTime: res.data ? res.data : [],\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOnChangeSelect = async (event) => {\r\n    if (this.props.hotpotIdFromParent && this.props.hotpotIdFromParent !== -1) {\r\n      let hotpotId = this.props.hotpotIdFromParent;\r\n      let date = event.target.value;\r\n      let res = await getScheduleHotpotByDate(hotpotId, date);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          allAvailableTime: res.data ? res.data : [],\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClickScheduleTime = (time) => {\r\n    this.setState({\r\n      isOpenModalBooking: true,\r\n      dataScheduleTimeModal: time,\r\n    });\r\n  };\r\n\r\n  closeBookingModal = () => {\r\n    this.setState({\r\n      isOpenModalBooking: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      allDays,\r\n      allAvailableTime,\r\n      isOpenModalBooking,\r\n      dataScheduleTimeModal,\r\n    } = this.state;\r\n    let { language } = this.props;\r\n    return (\r\n      <>\r\n        <div className=\"hotpot-schedule-container\">\r\n          <div className=\"all-schedule\">\r\n            <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n              {allDays &&\r\n                allDays.length > 0 &&\r\n                allDays.map((item, index) => {\r\n                  return (\r\n                    <option value={item.value} key={index}>\r\n                      {item.label}\r\n                    </option>\r\n                  );\r\n                })}\r\n            </select>\r\n          </div>\r\n          <div className=\"all-available-time\">\r\n            <div className=\"text-calender\">\r\n              <i className=\"fa fa-calendar\" aria-hidden=\"true\">\r\n                <span>\r\n                  <FormattedMessage id=\"customer.detail-hotpot.schedule\" />\r\n                </span>\r\n              </i>\r\n            </div>\r\n            <div className=\"time-content\">\r\n              {allAvailableTime && allAvailableTime.length > 0 ? (\r\n                <>\r\n                  <div className=\"time-content-btns\">\r\n                    {allAvailableTime.map((item, index) => {\r\n                      let timeDisplay =\r\n                        language === LANGUAGES.VI\r\n                          ? item.timeTypeData.valueVi\r\n                          : item.timeTypeData.valueEn;\r\n                      return (\r\n                        <button\r\n                          key={index}\r\n                          className={\r\n                            language === LANGUAGES.VI ? \"btn-vi\" : \"btn-en\"\r\n                          }\r\n                          onClick={() => this.handleClickScheduleTime(item)}\r\n                        >\r\n                          {timeDisplay}\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n\r\n                  <div className=\"book-free\">\r\n                    <span>\r\n                      <FormattedMessage id=\"customer.detail-hotpot.choose\" />{\" \"}\r\n                      <i class=\"far fa-hand-point-up\"></i>{\" \"}\r\n                      <FormattedMessage id=\"customer.detail-hotpot.book-free\" />\r\n                    </span>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className=\"no-schedule\">\r\n                  <FormattedMessage id=\"customer.detail-hotpot.no-schedule\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <BookingModal\r\n          isOpenModal={isOpenModalBooking}\r\n          closeBookingModal={this.closeBookingModal}\r\n          dataTime={dataScheduleTimeModal}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotSchedule);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotExtraInfo.js",["326","327","328","329"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotExtraInfo.scss\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment\";\r\nimport localization from \"moment/locale/vi\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport {\r\n  getExtraInfoHotpotById,\r\n  getDetailInfoHotpot,\r\n} from \"../../../services/hotpotService\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nclass HotpotExtraInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isShowDetailInfo: false,\r\n      extraInfo: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.hotpotIdFromParent) {\r\n      let res = await getExtraInfoHotpotById(this.props.hotpotIdFromParent);\r\n      console.log(\r\n        \"this.props.hotpotIdFromParent extra\",\r\n        this.props.hotpotIdFromParent\r\n      );\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          extraInfo: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.hotpotIdFromParent !== prevProps.hotpotIdFromParent) {\r\n      let res = await getExtraInfoHotpotById(this.props.hotpotIdFromParent);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          extraInfo: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  showHideDetailInfo = (status) => {\r\n    this.setState({\r\n      isShowDetailInfo: status,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { isShowDetailInfo, extraInfo } = this.state;\r\n    let { language } = this.props;\r\n    return (\r\n      <div className=\"hotpot-extra-info-container\">\r\n        <div className=\"content-up\">\r\n          <div className=\"text-address\">\r\n            {\" \"}\r\n            <FormattedMessage id=\"customer.extra-info-hotpot.text-address\" />\r\n          </div>\r\n          <div className=\"name-restaurant\">\r\n            {extraInfo && extraInfo.Restaurant ? extraInfo.Restaurant.name : \"\"}\r\n          </div>\r\n          <div className=\"address-restaurant\">\r\n            {extraInfo && extraInfo.Restaurant\r\n              ? extraInfo.Restaurant.address\r\n              : \"\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"content-down\">\r\n          {isShowDetailInfo === false && (\r\n            <div className=\"short-info\">\r\n              <span className=\"price\">\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.price\" />{\" \"}\r\n              </span>\r\n\r\n              {extraInfo &&\r\n                extraInfo.priceData &&\r\n                language === LANGUAGES.VI && (\r\n                  <NumberFormat\r\n                    className=\"currency\"\r\n                    value={extraInfo.priceData.valueVi}\r\n                    displayType={\"text\"}\r\n                    thousandSeparator={true}\r\n                    suffix={\"VND\"}\r\n                  />\r\n                )}\r\n              {extraInfo &&\r\n                extraInfo.priceData &&\r\n                language === LANGUAGES.EN && (\r\n                  <NumberFormat\r\n                    className=\"currency\"\r\n                    value={extraInfo.priceData.valueEn}\r\n                    displayType={\"text\"}\r\n                    thousandSeparator={true}\r\n                    suffix={\"$\"}\r\n                  />\r\n                )}\r\n              <span\r\n                className=\"detail\"\r\n                onClick={() => this.showHideDetailInfo(true)}\r\n              >\r\n                {\" \"}\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.detail\" />\r\n              </span>\r\n            </div>\r\n          )}\r\n          {isShowDetailInfo === true && (\r\n            <>\r\n              <div className=\"title-price\">\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.price\" />\r\n              </div>\r\n              <div className=\"detail-info\">\r\n                <div className=\"price\">\r\n                  <span className=\"left\">\r\n                    <FormattedMessage id=\"customer.extra-info-hotpot.price\" />\r\n                  </span>\r\n                  <span className=\"right\">\r\n                    {\" \"}\r\n                    {extraInfo &&\r\n                      extraInfo.priceData &&\r\n                      language === LANGUAGES.VI && (\r\n                        <NumberFormat\r\n                          className=\"currency\"\r\n                          value={extraInfo.priceData.valueVi}\r\n                          displayType={\"text\"}\r\n                          thousandSeparator={true}\r\n                          suffix={\"VND\"}\r\n                        />\r\n                      )}\r\n                    {extraInfo &&\r\n                      extraInfo.priceData &&\r\n                      language === LANGUAGES.EN && (\r\n                        <NumberFormat\r\n                          className=\"currency\"\r\n                          value={extraInfo.priceData.valueEn}\r\n                          displayType={\"text\"}\r\n                          thousandSeparator={true}\r\n                          suffix={\"$\"}\r\n                        />\r\n                      )}\r\n                  </span>\r\n                </div>\r\n                <div className=\"note\">\r\n                  {extraInfo && extraInfo.note ? extraInfo.note : \"\"}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"payment\">\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.payment\" />\r\n                {extraInfo && extraInfo.paymentData && language === LANGUAGES.VI\r\n                  ? extraInfo.paymentData.valueVi\r\n                  : \"\"}\r\n                {extraInfo && extraInfo.paymentData && language === LANGUAGES.EN\r\n                  ? extraInfo.paymentData.valueEn\r\n                  : \"\"}\r\n              </div>\r\n              <div className=\"hide-price\">\r\n                <span onClick={() => this.showHideDetailInfo(false)}>\r\n                  <FormattedMessage id=\"customer.extra-info-hotpot.hide-price\" />\r\n                </span>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotExtraInfo);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\Modal\\BookingModal.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotProfile.js",["330","331"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./HotpotProfile.scss\";\r\nimport {\r\n  getExtraInfoHotpotById,\r\n  getDetailInfoHotpot,\r\n} from \"../../../services/hotpotService\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport localization from \"moment/locale/vi\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass HotpotProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataProfile: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let data = await this.getInfoHotpot(this.props.hotpotId);\r\n    console.log(\"this.props.hotpotId:\", this.props.hotpotId);\r\n    this.setState({\r\n      dataProfile: data,\r\n    });\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.hotpotId !== prevProps.hotpotId) {\r\n      // this.getInfoHotpot(this.props.hotpotId)\r\n    }\r\n  }\r\n\r\n  getInfoHotpot = async (id) => {\r\n    let result = {};\r\n    if (id) {\r\n      let res = await getExtraInfoHotpotById(id);\r\n      if (res && res.errCode === 0) {\r\n        result = res.data;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  renderTimeBooking = (dataTime) => {\r\n    let { language } = this.props;\r\n    if (dataTime && !_.isEmpty(dataTime)) {\r\n      let time =\r\n        language === LANGUAGES.VI\r\n          ? dataTime.timeTypeData?.valueVi\r\n          : dataTime.timeTypeData?.valueEn;\r\n      let date =\r\n        language === LANGUAGES.VI\r\n          ? moment.unix(+dataTime.date / 1000).format(\"dddd - DD/MM/YYYY\")\r\n          : moment\r\n              .unix(+dataTime.date / 1000)\r\n              .locale(\"en\")\r\n              .format(\"ddd - MM/DD/YYYY\");\r\n      return (\r\n        <>\r\n          <div>\r\n            {time} - {date}\r\n          </div>\r\n          <div>\r\n            <FormattedMessage id=\"customer.booking-modal.free-booking\" />\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n    return <></>;\r\n  };\r\n\r\n  render() {\r\n    let { dataProfile } = this.state;\r\n    let {\r\n      language,\r\n      isShowDescriptionHotpot,\r\n      dataTime,\r\n      isShowLinkDetail,\r\n      isShowPrice,\r\n      hotpotId,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"profile-hotpot-container\">\r\n        <div className=\"intro-hotpot\">\r\n          <div\r\n            className=\"content-left\"\r\n            style={{\r\n              backgroundImage: `url(${\r\n                dataProfile && dataProfile.image ? dataProfile.image : \"\"\r\n              })`,\r\n            }}\r\n          ></div>\r\n          <div className=\"content-right\">\r\n            <div className=\"up\">{dataProfile.name}</div>\r\n            <div className=\"down\">\r\n              {/* <div>{dataProfile.Restaurant?.name}</div>\r\n              <div>{dataProfile.Restaurant?.address}</div> */}\r\n              {isShowDescriptionHotpot === true ? (\r\n                <>\r\n                  {dataProfile &&\r\n                    dataProfile.Markdown &&\r\n                    dataProfile.Markdown.description && (\r\n                      <span>{dataProfile.Markdown.description}</span>\r\n                    )}\r\n                </>\r\n              ) : (\r\n                <>{this.renderTimeBooking(dataTime)}</>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {isShowLinkDetail === true && (\r\n          <div className=\"view-detail-hotpot\">\r\n            {/* <a href={`/detail-hotpot/${hotpotId}`}>Xem them</a> */}\r\n            <Link to={`/detail-hotpot/${hotpotId}`}>Xem them</Link>\r\n          </div>\r\n        )}\r\n\r\n        {isShowPrice === true && (\r\n          <div className=\"price\">\r\n            <FormattedMessage id=\"customer.booking-modal.price\" />\r\n            {dataProfile &&\r\n            dataProfile.priceData &&\r\n            language === LANGUAGES.VI ? (\r\n              <NumberFormat\r\n                className=\"currency\"\r\n                value={dataProfile.priceData?.valueVi}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n                suffix={\"VND\"}\r\n              />\r\n            ) : (\r\n              <NumberFormat\r\n                className=\"currency\"\r\n                value={dataProfile.priceData?.valueEn}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n                suffix={\"$\"}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotProfile);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Type\\ManageType.js",["332","333"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./ManageType.scss\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport { LANGUAGES, CommonUtils } from \"../../../utils\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { createNewType } from \"../../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageType extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      imageBase64: \"\",\r\n      descriptionHTML: \"\",\r\n      descriptionMarkdown: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {}\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let stateCopy = { ...this.state };\r\n    stateCopy[id] = event.target.value;\r\n    this.setState({\r\n      ...stateCopy,\r\n    });\r\n  };\r\n\r\n  handleEditorChange = ({ html, text }) => {\r\n    this.setState({\r\n      descriptionHTML: html,\r\n      descriptionMarkdown: text,\r\n    });\r\n  };\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        imageBase64: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveNewType = async () => {\r\n    let res = await createNewType(this.state);\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Create new type successfully!\");\r\n      this.state = {\r\n        name: \"\",\r\n        imageBase64: \"\",\r\n        descriptionHTML: \"\",\r\n        descriptionMarkdown: \"\",\r\n      };\r\n    } else {\r\n      toast.error(\"Create new type serror!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"manage-type-container\">\r\n        <div className=\"manage-type-title\">Quan li loai lau</div>\r\n\r\n        <div className=\"add-new-type row\">\r\n          <div className=\"col-6 form-group\">\r\n            <label>Ten loai lau</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"name\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-6 form-group\">\r\n            <label>Image</label>\r\n            {/* <input className=\"form-control-file\" type=\"file\"\r\n            onChange={(event) => this.handleOnChangeImage(event)}></input> */}\r\n            <div className=\"preview-img-container\">\r\n              <input\r\n                id=\"previewImg\"\r\n                type=\"file\"\r\n                hidden\r\n                onChange={(event) => this.handleOnChangeImage(event)}\r\n              />\r\n              <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                Upload image <i className=\"fas fa-upload\"></i>\r\n              </label>\r\n              <div\r\n                className=\"preview-image\"\r\n                style={{\r\n                  backgroundImage: `url(${this.state.previewImgURL})`,\r\n                }}\r\n                onClick={() => this.openPreviewImage()}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <MdEditor\r\n              style={{ height: \"300px\" }}\r\n              renderHTML={(text) => mdParser.render(text)}\r\n              onChange={this.handleEditorChange}\r\n              value={this.state.descriptionMarkdown}\r\n            />\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn-save-type\"\r\n              onClick={() => this.handleSaveNewType()}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageType);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Restaurant\\ManageRestaurant.js",["334","335"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./ManageRestaurant.scss\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport { LANGUAGES, CommonUtils } from \"../../../utils\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { createNewRestaurant } from \"../../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageRestaurant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      address: \"\",\r\n      imageBase64: \"\",\r\n      descriptionHTML: \"\",\r\n      descriptionMarkdown: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {}\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let stateCopy = { ...this.state };\r\n    stateCopy[id] = event.target.value;\r\n    this.setState({\r\n      ...stateCopy,\r\n    });\r\n  };\r\n\r\n  handleEditorChange = ({ html, text }) => {\r\n    this.setState({\r\n      descriptionHTML: html,\r\n      descriptionMarkdown: text,\r\n    });\r\n  };\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      console.log(\"check base64\", base64);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        imageBase64: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveNewRestaurant = async () => {\r\n    let res = await createNewRestaurant(this.state);\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Create new restaurant successfully!\");\r\n      this.state = {\r\n        name: \"\",\r\n        address: \"\",\r\n        imageBase64: \"\",\r\n        descriptionHTML: \"\",\r\n        descriptionMarkdown: \"\",\r\n      };\r\n    } else {\r\n      toast.error(\"Create new restaurant serror!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"manage-restaurant-container\">\r\n        <div className=\"manage-restaurant-title\">Quan li nha hang</div>\r\n\r\n        <div className=\"add-new-restaurant row\">\r\n          <div className=\"col-6 form-group\">\r\n            <label>Ten nha hang</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"name\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-6 form-group\">\r\n            <label>Dia chi</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.address}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"address\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-12 form-group\">\r\n            <label>Image</label>\r\n            {/* <input className=\"form-control-file\" type=\"file\"\r\n            onChange={(event) => this.handleOnChangeImage(event)}></input> */}\r\n            <div className=\"preview-img-container\">\r\n              <input\r\n                id=\"previewImg\"\r\n                type=\"file\"\r\n                hidden\r\n                onChange={(event) => this.handleOnChangeImage(event)}\r\n              />\r\n              <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                Upload image <i className=\"fas fa-upload\"></i>\r\n              </label>\r\n              <div\r\n                className=\"preview-image\"\r\n                style={{\r\n                  backgroundImage: `url(${this.state.previewImgURL})`,\r\n                }}\r\n                onClick={() => this.openPreviewImage()}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <MdEditor\r\n              style={{ height: \"300px\" }}\r\n              renderHTML={(text) => mdParser.render(text)}\r\n              onChange={this.handleEditorChange}\r\n              value={this.state.descriptionMarkdown}\r\n            />\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn-save-restaurant\"\r\n              onClick={() => this.handleSaveNewRestaurant()}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageRestaurant);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Restaurant\\DetailRestaurant.js",["336","337","338","339","340"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./DetailRestaurant.scss\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport HotpotSchedule from \"../Hotpot/HotpotSchedule\";\r\nimport HotpotExtraInfo from \"../Hotpot/HotpotExtraInfo\";\r\nimport HotpotProfile from \"../Hotpot/HotpotProfile\";\r\nimport {\r\n  getDetailRestaurantById,\r\n  getAllCodeService,\r\n} from \"../../../services/hotpotService\";\r\nimport _ from \"lodash\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nclass DetailRestaurant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpotId: [],\r\n      dataDetailRestaurant: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n\r\n      let res = await getDetailRestaurantById({\r\n        id: id,\r\n      });\r\n      if (res && res.errCode === 0) {\r\n        let data = res.data;\r\n        let arrHotpotId = [];\r\n        if (data && !_.isEmpty(data)) {\r\n          let arr = data.hotpotRestaurant;\r\n          if (arr && arr.length > 0) {\r\n            arr.map((item) => {\r\n              arrHotpotId.push(item.id);\r\n            });\r\n          }\r\n        }\r\n\r\n        this.setState({\r\n          dataDetailRestaurant: res.data,\r\n          arrHotpotId: arrHotpotId,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  render() {\r\n    let { arrHotpotId, dataDetailRestaurant } = this.state;\r\n    console.log(\"Check dataDetailType arrHotpotId\", arrHotpotId);\r\n    let { language } = this.props;\r\n    return (\r\n      <div className=\"detail-type-container\">\r\n        <HomeHeader />\r\n        <div className=\"detail-type-body\">\r\n          <div className=\"description-type\">\r\n            {dataDetailRestaurant && !_.isEmpty(dataDetailRestaurant) && (\r\n              <>\r\n                <div className=\"name\">{dataDetailRestaurant.name}</div>\r\n\r\n                <div\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: dataDetailRestaurant.descriptionHTML,\r\n                  }}\r\n                ></div>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          {arrHotpotId &&\r\n            arrHotpotId.length > 0 &&\r\n            arrHotpotId.map((item, index) => {\r\n              return (\r\n                <div className=\"each-hotpot\" key={index}>\r\n                  <div className=\"dt-content-left\">\r\n                    <div className=\"profile-hotpot\">\r\n                      <HotpotProfile\r\n                        hotpotId={item}\r\n                        isShowDescriptionHotpot={true}\r\n                        isShowLinkDetail={true}\r\n                        isShowPrice={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"dt-content-right\">\r\n                    <div className=\"hotpot-schedule\">\r\n                      <HotpotSchedule hotpotIdFromParent={item} />\r\n                    </div>\r\n                    <div className=\"hotpot-extra-info\">\r\n                      <HotpotExtraInfo hotpotIdFromParent={item} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailRestaurant);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Type\\DetailType.js",["341","342","343"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./DetailType.scss\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport HotpotSchedule from \"../Hotpot/HotpotSchedule\";\r\nimport HotpotExtraInfo from \"../Hotpot/HotpotExtraInfo\";\r\nimport HotpotProfile from \"../Hotpot/HotpotProfile\";\r\nimport {\r\n  getDetailTypeById,\r\n  getAllCodeService,\r\n} from \"../../../services/hotpotService\";\r\nimport _ from \"lodash\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nclass DetailType extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpotId: [],\r\n      dataDetailType: {},\r\n      listProvince: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n\r\n      let res = await getDetailTypeById({\r\n        id: id,\r\n        location: \"ALL\",\r\n      });\r\n\r\n      let resProvince = await getAllCodeService(\"PROVINCE\");\r\n      if (\r\n        res &&\r\n        res.errCode === 0 &&\r\n        resProvince &&\r\n        resProvince.errCode === 0\r\n      ) {\r\n        let data = res.data;\r\n        let arrHotpotId = [];\r\n        if (data && !_.isEmpty(data)) {\r\n          let arr = data.hotpotType;\r\n          if (arr && arr.length > 0) {\r\n            arr.map((item) => {\r\n              arrHotpotId.push(item.id);\r\n            });\r\n          }\r\n        }\r\n\r\n        let dataProvince = resProvince.data;\r\n        console.log(\"Check resProvince\", resProvince);\r\n        if (dataProvince && dataProvince.length > 0) {\r\n          dataProvince.unshift({\r\n            createAt: null,\r\n            keyMap: \"ALL\",\r\n            type: \"PROVINCE\",\r\n            valueEn: \"All\",\r\n            valueVi: \"Toàn quốc\",\r\n          });\r\n        }\r\n\r\n        this.setState({\r\n          dataDetailType: res.data,\r\n          arrHotpotId: arrHotpotId,\r\n          listProvince: dataProvince ? dataProvince : [],\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeSelect = async (event) => {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n      let location = event.target.value;\r\n\r\n      let res = await getDetailTypeById({\r\n        id: id,\r\n        location: location,\r\n      });\r\n\r\n      console.log(\"RES\", res);\r\n\r\n      if (res && res.errCode === 0) {\r\n        let data = res.data;\r\n        let arrHotpotId = [];\r\n        if (data && !_.isEmpty(data)) {\r\n          let arr = data.hotpotType;\r\n          if (arr && arr.length > 0) {\r\n            arr.map((item) => {\r\n              arrHotpotId.push(item.id);\r\n            });\r\n          }\r\n        }\r\n\r\n        this.setState({\r\n          dataDetailType: res.data,\r\n          arrHotpotId: arrHotpotId,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { arrHotpotId, dataDetailType, listProvince } = this.state;\r\n    console.log(\"Check dataDetailType arrHotpotId\", arrHotpotId);\r\n    let { language } = this.props;\r\n    return (\r\n      <div className=\"detail-type-container\">\r\n        <HomeHeader />\r\n        <div className=\"detail-type-body\">\r\n          <div className=\"description-type\">\r\n            {dataDetailType && !_.isEmpty(dataDetailType) && (\r\n              <div\r\n                dangerouslySetInnerHTML={{\r\n                  __html: dataDetailType.descriptionHTML,\r\n                }}\r\n              ></div>\r\n            )}\r\n          </div>\r\n          <div className=\"search-type-hotpot\">\r\n            <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n              {listProvince &&\r\n                listProvince.length > 0 &&\r\n                listProvince.map((item, index) => {\r\n                  return (\r\n                    <option key={index} value={item.keyMap}>\r\n                      {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                    </option>\r\n                  );\r\n                })}\r\n            </select>\r\n          </div>\r\n\r\n          {arrHotpotId &&\r\n            arrHotpotId.length > 0 &&\r\n            arrHotpotId.map((item, index) => {\r\n              return (\r\n                <div className=\"each-hotpot\" key={index}>\r\n                  <div className=\"dt-content-left\">\r\n                    <div className=\"profile-hotpot\">\r\n                      <HotpotProfile\r\n                        hotpotId={item}\r\n                        isShowDescriptionHotpot={true}\r\n                        isShowLinkDetail={true}\r\n                        isShowPrice={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"dt-content-right\">\r\n                    <div className=\"hotpot-schedule\">\r\n                      <HotpotSchedule hotpotIdFromParent={item} />\r\n                    </div>\r\n                    <div className=\"hotpot-extra-info\">\r\n                      <HotpotExtraInfo hotpotIdFromParent={item} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailType);\r\n",{"ruleId":"344","replacedBy":"345"},{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","severity":1,"message":"349","line":19,"column":8,"nodeType":"350","messageId":"351","endLine":19,"endColumn":14},{"ruleId":"348","severity":1,"message":"352","line":22,"column":10,"nodeType":"350","messageId":"351","endLine":22,"endColumn":32},{"ruleId":"344","replacedBy":"353"},{"ruleId":"346","replacedBy":"354"},{"ruleId":"348","severity":1,"message":"355","line":8,"column":10,"nodeType":"350","messageId":"351","endLine":8,"endColumn":26},{"ruleId":"356","severity":1,"message":"357","line":28,"column":1,"nodeType":"358","endLine":34,"endColumn":6},{"ruleId":"348","severity":1,"message":"355","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":26},{"ruleId":"348","severity":1,"message":"359","line":5,"column":10,"nodeType":"350","messageId":"351","endLine":5,"endColumn":17},{"ruleId":"348","severity":1,"message":"360","line":2,"column":8,"nodeType":"350","messageId":"351","endLine":2,"endColumn":9},{"ruleId":"348","severity":1,"message":"361","line":15,"column":17,"nodeType":"350","messageId":"351","endLine":15,"endColumn":21},{"ruleId":"348","severity":1,"message":"355","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":26},{"ruleId":"348","severity":1,"message":"362","line":78,"column":11,"nodeType":"350","messageId":"351","endLine":78,"endColumn":19},{"ruleId":"348","severity":1,"message":"355","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":26},{"ruleId":"348","severity":1,"message":"355","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":26},{"ruleId":"348","severity":1,"message":"359","line":5,"column":10,"nodeType":"350","messageId":"351","endLine":5,"endColumn":17},{"ruleId":"348","severity":1,"message":"363","line":12,"column":8,"nodeType":"350","messageId":"351","endLine":12,"endColumn":16},{"ruleId":"348","severity":1,"message":"364","line":7,"column":10,"nodeType":"350","messageId":"351","endLine":7,"endColumn":19},{"ruleId":"348","severity":1,"message":"365","line":35,"column":11,"nodeType":"350","messageId":"351","endLine":35,"endColumn":19},{"ruleId":"348","severity":1,"message":"355","line":4,"column":10,"nodeType":"350","messageId":"351","endLine":4,"endColumn":26},{"ruleId":"348","severity":1,"message":"355","line":4,"column":10,"nodeType":"350","messageId":"351","endLine":4,"endColumn":26},{"ruleId":"348","severity":1,"message":"355","line":4,"column":10,"nodeType":"350","messageId":"351","endLine":4,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":12,"column":11,"nodeType":"368","messageId":"369","endLine":12,"endColumn":74,"fix":"370"},{"ruleId":"348","severity":1,"message":"371","line":10,"column":10,"nodeType":"350","messageId":"351","endLine":10,"endColumn":38},{"ruleId":"348","severity":1,"message":"372","line":257,"column":7,"nodeType":"350","messageId":"351","endLine":257,"endColumn":12},{"ruleId":"348","severity":1,"message":"355","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":26},{"ruleId":"348","severity":1,"message":"373","line":193,"column":11,"nodeType":"350","messageId":"351","endLine":193,"endColumn":15},{"ruleId":"348","severity":1,"message":"355","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":26},{"ruleId":"348","severity":1,"message":"374","line":8,"column":8,"nodeType":"350","messageId":"351","endLine":8,"endColumn":16},{"ruleId":"348","severity":1,"message":"375","line":16,"column":7,"nodeType":"350","messageId":"351","endLine":16,"endColumn":15},{"ruleId":"348","severity":1,"message":"376","line":19,"column":10,"nodeType":"350","messageId":"351","endLine":19,"endColumn":28},{"ruleId":"348","severity":1,"message":"355","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":26},{"ruleId":"348","severity":1,"message":"364","line":12,"column":24,"nodeType":"350","messageId":"351","endLine":12,"endColumn":33},{"ruleId":"377","severity":1,"message":"378","line":40,"column":35,"nodeType":"379","messageId":"380","endLine":40,"endColumn":37},{"ruleId":"348","severity":1,"message":"365","line":39,"column":11,"nodeType":"350","messageId":"351","endLine":39,"endColumn":19},{"ruleId":"348","severity":1,"message":"381","line":3,"column":10,"nodeType":"350","messageId":"351","endLine":3,"endColumn":18},{"ruleId":"348","severity":1,"message":"382","line":3,"column":20,"nodeType":"350","messageId":"351","endLine":3,"endColumn":25},{"ruleId":"348","severity":1,"message":"383","line":3,"column":27,"nodeType":"350","messageId":"351","endLine":3,"endColumn":33},{"ruleId":"348","severity":1,"message":"384","line":8,"column":10,"nodeType":"350","messageId":"351","endLine":8,"endColumn":22},{"ruleId":"348","severity":1,"message":"385","line":8,"column":35,"nodeType":"350","messageId":"351","endLine":8,"endColumn":45},{"ruleId":"348","severity":1,"message":"386","line":10,"column":8,"nodeType":"350","messageId":"351","endLine":10,"endColumn":14},{"ruleId":"348","severity":1,"message":"387","line":12,"column":13,"nodeType":"350","messageId":"351","endLine":12,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":51,"column":35,"nodeType":"379","messageId":"380","endLine":51,"endColumn":37},{"ruleId":"377","severity":1,"message":"378","line":101,"column":35,"nodeType":"379","messageId":"380","endLine":101,"endColumn":37},{"ruleId":"348","severity":1,"message":"388","line":4,"column":8,"nodeType":"350","messageId":"351","endLine":4,"endColumn":14},{"ruleId":"348","severity":1,"message":"389","line":6,"column":8,"nodeType":"350","messageId":"351","endLine":6,"endColumn":20},{"ruleId":"348","severity":1,"message":"388","line":4,"column":8,"nodeType":"350","messageId":"351","endLine":4,"endColumn":14},{"ruleId":"348","severity":1,"message":"386","line":5,"column":8,"nodeType":"350","messageId":"351","endLine":5,"endColumn":14},{"ruleId":"348","severity":1,"message":"389","line":6,"column":8,"nodeType":"350","messageId":"351","endLine":6,"endColumn":20},{"ruleId":"348","severity":1,"message":"390","line":10,"column":3,"nodeType":"350","messageId":"351","endLine":10,"endColumn":22},{"ruleId":"348","severity":1,"message":"390","line":7,"column":3,"nodeType":"350","messageId":"351","endLine":7,"endColumn":22},{"ruleId":"348","severity":1,"message":"389","line":13,"column":8,"nodeType":"350","messageId":"351","endLine":13,"endColumn":20},{"ruleId":"348","severity":1,"message":"355","line":3,"column":10,"nodeType":"350","messageId":"351","endLine":3,"endColumn":26},{"ruleId":"348","severity":1,"message":"364","line":7,"column":10,"nodeType":"350","messageId":"351","endLine":7,"endColumn":19},{"ruleId":"348","severity":1,"message":"355","line":3,"column":10,"nodeType":"350","messageId":"351","endLine":3,"endColumn":26},{"ruleId":"348","severity":1,"message":"364","line":7,"column":10,"nodeType":"350","messageId":"351","endLine":7,"endColumn":19},{"ruleId":"348","severity":1,"message":"355","line":3,"column":10,"nodeType":"350","messageId":"351","endLine":3,"endColumn":26},{"ruleId":"348","severity":1,"message":"391","line":11,"column":3,"nodeType":"350","messageId":"351","endLine":11,"endColumn":20},{"ruleId":"348","severity":1,"message":"364","line":14,"column":10,"nodeType":"350","messageId":"351","endLine":14,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":41,"column":28,"nodeType":"379","messageId":"380","endLine":41,"endColumn":30},{"ruleId":"348","severity":1,"message":"365","line":60,"column":11,"nodeType":"350","messageId":"351","endLine":60,"endColumn":19},{"ruleId":"348","severity":1,"message":"355","line":3,"column":10,"nodeType":"350","messageId":"351","endLine":3,"endColumn":26},{"ruleId":"377","severity":1,"message":"378","line":50,"column":28,"nodeType":"379","messageId":"380","endLine":50,"endColumn":30},{"ruleId":"377","severity":1,"message":"378","line":101,"column":28,"nodeType":"379","messageId":"380","endLine":101,"endColumn":30},"no-native-reassign",["392"],"no-negated-in-lhs",["393"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'CustomToastCloseButton' is defined but never used.",["392"],["393"],"'FormattedMessage' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'emitter' is defined but never used.","'_' is defined but never used.","'data' is assigned a value but never used.","'response' is assigned a value but never used.","'HandBook' is defined but never used.","'LANGUAGES' is defined but never used.","'language' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"394","text":"395"},"'getAllRestaurantNamesService' is defined but never used.","'image' is assigned a value but never used.","'res1' is assigned a value but never used.","'MdEditor' is defined but never used.","'mdParser' is assigned a value but never used.","'handleEditorChange' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Redirect' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'CRUD_ACTIONS' is defined but never used.","'dateFormat' is defined but never used.","'moment' is defined but never used.","'result' is defined but never used.","'Select' is defined but never used.","'localization' is defined but never used.","'getDetailInfoHotpot' is defined but never used.","'getAllCodeService' is defined but never used.","no-global-assign","no-unsafe-negation",[396,396]," rel=\"noreferrer\""]