[{"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\index.js":"1","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\redux.js":"2","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\serviceWorker.js":"3","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\App.js":"4","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\IntlProviderWrapper.js":"5","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\authentication.js":"6","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\Home.js":"7","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\Header.js":"8","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomToast.js":"9","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\System.js":"10","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\ConfirmModal.js":"11","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Auth\\Login.js":"12","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\actionTypes.js":"13","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\rootReducer.js":"14","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\index.js":"15","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\menuApp.js":"16","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Navigator.js":"17","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomScrollbars.js":"18","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\appReducer.js":"19","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\userReducer.js":"20","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\UserManage.js":"21","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\userService.js":"22","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\index.js":"23","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\constant.js":"24","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\CommonUtils.js":"25","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\LanguageUtils.js":"26","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\KeyCodeUtils.js":"27","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\ToastUtil.js":"28","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\axios.js":"29","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\userActions.js":"30","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\appActions.js":"31","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\HotpotManage.js":"32","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\hotpotService.js":"33","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalHotpot.js":"34","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\emitter.js":"35","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalEditHotpot.js":"36","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomePage.js":"37","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeHeader.js":"38","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HotpotType.js":"39","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Restaurant.js":"40","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Hotpot.js":"41","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HandBook.js":"42","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Video.js":"43","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeFooter.js":"44","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\HotpotRedux.js":"45","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\UserRedux.js":"46","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\adminActions.js":"47","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\adminReducer.js":"48","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\TableManageHotpot.js":"49","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\DetailHotpot.js":"50","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ManageSchedule.js":"51","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Input\\DatePicker.js":"52","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Formating\\FormattedDate.js":"53","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotSchedule.js":"54","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotExtraInfo.js":"55","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\Modal\\BookingModal.js":"56","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotProfile.js":"57","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Type\\ManageType.js":"58","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Restaurant\\ManageRestaurant.js":"59","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Restaurant\\DetailRestaurant.js":"60","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Type\\DetailType.js":"61","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\DetailHpHotpot.js":"62","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Hp\\ManageHp.js":"63","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HpHotpotExtraInfo.js":"64","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\ViewMap.js":"65","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\osm-provider.js":"66","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\useGeoLocation.js":"67","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\SearchBox.js":"68","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\NearSearch.js":"69","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\Staff.js":"70","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ManageSchedule.js":"71","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\HotpotRedux.js":"72","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\TableManageHotpot.js":"73","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ExtraInfoHotpot.js":"74","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ExtraInfoHotpot.js":"75","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ManageCustomer.js":"76","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\staffService.js":"77","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ManageHp.js":"78"},{"size":926,"mtime":1704765285128,"results":"79","hashOfConfig":"80"},{"size":1477,"mtime":1704765285128,"results":"81","hashOfConfig":"80"},{"size":5086,"mtime":1704765285128,"results":"82","hashOfConfig":"80"},{"size":4377,"mtime":1711939488069,"results":"83","hashOfConfig":"80"},{"size":1095,"mtime":1704765285128,"results":"84","hashOfConfig":"80"},{"size":789,"mtime":1704765285128,"results":"85","hashOfConfig":"80"},{"size":854,"mtime":1711913482821,"results":"86","hashOfConfig":"80"},{"size":2833,"mtime":1711918385461,"results":"87","hashOfConfig":"80"},{"size":2282,"mtime":1704765285088,"results":"88","hashOfConfig":"80"},{"size":2442,"mtime":1712019887579,"results":"89","hashOfConfig":"80"},{"size":3862,"mtime":1697161875064,"results":"90","hashOfConfig":"80"},{"size":5385,"mtime":1704765285093,"results":"91","hashOfConfig":"80"},{"size":2146,"mtime":1704765285128,"results":"92","hashOfConfig":"80"},{"size":964,"mtime":1704765285143,"results":"93","hashOfConfig":"80"},{"size":259,"mtime":1704765285146,"results":"94","hashOfConfig":"80"},{"size":4242,"mtime":1712189202243,"results":"95","hashOfConfig":"80"},{"size":9326,"mtime":1704765285093,"results":"96","hashOfConfig":"80"},{"size":3173,"mtime":1704765285077,"results":"97","hashOfConfig":"80"},{"size":1063,"mtime":1704765285143,"results":"98","hashOfConfig":"80"},{"size":830,"mtime":1704765285143,"results":"99","hashOfConfig":"80"},{"size":2143,"mtime":1705943796948,"results":"100","hashOfConfig":"80"},{"size":303,"mtime":1704765285128,"results":"101","hashOfConfig":"80"},{"size":96,"mtime":1704765285128,"results":"102","hashOfConfig":"80"},{"size":726,"mtime":1711939636382,"results":"103","hashOfConfig":"80"},{"size":323,"mtime":1704765285146,"results":"104","hashOfConfig":"80"},{"size":961,"mtime":1704765285146,"results":"105","hashOfConfig":"80"},{"size":684,"mtime":1704765285146,"results":"106","hashOfConfig":"80"},{"size":3001,"mtime":1704765285146,"results":"107","hashOfConfig":"80"},{"size":378,"mtime":1704765285077,"results":"108","hashOfConfig":"80"},{"size":418,"mtime":1704765285128,"results":"109","hashOfConfig":"80"},{"size":444,"mtime":1704765285128,"results":"110","hashOfConfig":"80"},{"size":6318,"mtime":1705943796866,"results":"111","hashOfConfig":"80"},{"size":3821,"mtime":1709621526781,"results":"112","hashOfConfig":"80"},{"size":7831,"mtime":1712186091938,"results":"113","hashOfConfig":"80"},{"size":161,"mtime":1704765285146,"results":"114","hashOfConfig":"80"},{"size":7626,"mtime":1712186060174,"results":"115","hashOfConfig":"80"},{"size":1939,"mtime":1711078640778,"results":"116","hashOfConfig":"80"},{"size":12884,"mtime":1711092563069,"results":"117","hashOfConfig":"80"},{"size":3050,"mtime":1705943797420,"results":"118","hashOfConfig":"80"},{"size":3122,"mtime":1705948716722,"results":"119","hashOfConfig":"80"},{"size":10848,"mtime":1709848034438,"results":"120","hashOfConfig":"80"},{"size":2412,"mtime":1704765285111,"results":"121","hashOfConfig":"80"},{"size":2019,"mtime":1708996657973,"results":"122","hashOfConfig":"80"},{"size":1347,"mtime":1709846138710,"results":"123","hashOfConfig":"80"},{"size":18126,"mtime":1712192773522,"results":"124","hashOfConfig":"80"},{"size":3719,"mtime":1704765285119,"results":"125","hashOfConfig":"80"},{"size":10036,"mtime":1709606069020,"results":"126","hashOfConfig":"80"},{"size":3141,"mtime":1704765285128,"results":"127","hashOfConfig":"80"},{"size":3856,"mtime":1712185541054,"results":"128","hashOfConfig":"80"},{"size":4201,"mtime":1709616310308,"results":"129","hashOfConfig":"80"},{"size":6698,"mtime":1712192951012,"results":"130","hashOfConfig":"80"},{"size":5954,"mtime":1704765285088,"results":"131","hashOfConfig":"80"},{"size":609,"mtime":1697161875069,"results":"132","hashOfConfig":"80"},{"size":6621,"mtime":1711921282635,"results":"133","hashOfConfig":"80"},{"size":6312,"mtime":1705946400511,"results":"134","hashOfConfig":"80"},{"size":6424,"mtime":1712174575928,"results":"135","hashOfConfig":"80"},{"size":4729,"mtime":1705947748663,"results":"136","hashOfConfig":"80"},{"size":4511,"mtime":1705943797273,"results":"137","hashOfConfig":"80"},{"size":5048,"mtime":1709755688474,"results":"138","hashOfConfig":"80"},{"size":3661,"mtime":1705963350773,"results":"139","hashOfConfig":"80"},{"size":5515,"mtime":1708885710976,"results":"140","hashOfConfig":"80"},{"size":4199,"mtime":1709755483665,"results":"141","hashOfConfig":"80"},{"size":4565,"mtime":1709625314846,"results":"142","hashOfConfig":"80"},{"size":3572,"mtime":1709843193442,"results":"143","hashOfConfig":"80"},{"size":11932,"mtime":1711094095483,"results":"144","hashOfConfig":"80"},{"size":297,"mtime":1710791032353,"results":"145","hashOfConfig":"80"},{"size":887,"mtime":1710797289404,"results":"146","hashOfConfig":"80"},{"size":5088,"mtime":1710880448050,"results":"147","hashOfConfig":"80"},{"size":929,"mtime":1711078818681,"results":"148","hashOfConfig":"80"},{"size":2846,"mtime":1712187232142,"results":"149","hashOfConfig":"80"},{"size":6832,"mtime":1712192972124,"results":"150","hashOfConfig":"80"},{"size":18331,"mtime":1712192747464,"results":"151","hashOfConfig":"80"},{"size":4505,"mtime":1712192563330,"results":"152","hashOfConfig":"80"},{"size":5215,"mtime":1712192903418,"results":"153","hashOfConfig":"80"},{"size":5487,"mtime":1712192892681,"results":"154","hashOfConfig":"80"},{"size":3645,"mtime":1712188219034,"results":"155","hashOfConfig":"80"},{"size":411,"mtime":1712187990692,"results":"156","hashOfConfig":"80"},{"size":5049,"mtime":1712188845282,"results":"157","hashOfConfig":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"1rwdc50",{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"160"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"160"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"160"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"160"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"160"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"160"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"160"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"160"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"160"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"160"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"160"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"261","usedDeprecatedRules":"160"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"160"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"160"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"160"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"160"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"160"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"160"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"160"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"160"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"160"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"160"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"160"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"160"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"160"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"160"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"160"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"160"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356"},"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\index.js",[],["357","358"],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\redux.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\serviceWorker.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\App.js",["359","360"],"import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { ConnectedRouter as Router } from \"connected-react-router\";\r\nimport { history } from \"../redux\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport {\r\n  userIsAuthenticated,\r\n  userIsNotAuthenticated,\r\n} from \"../hoc/authentication\";\r\n\r\nimport { path } from \"../utils\";\r\n\r\nimport Home from \"../routes/Home\";\r\n// import Login from '../routes/Login';\r\nimport Login from \"./Auth/Login\";\r\n\r\nimport Header from \"./Header/Header\";\r\nimport System from \"../routes/System\";\r\n\r\nimport { CustomToastCloseButton } from \"../components/CustomToast\";\r\nimport HomePage from \"./HomePage/HomePage.js\";\r\n\r\nimport CustomScrollbars from \"../components/CustomScrollbars.js\";\r\n\r\nimport DetailHotpot from \"./Customer/Hotpot/DetailHotpot.js\";\r\nimport DetailHpHotpot from \"./Customer/Hotpot/DetailHpHotpot.js\";\r\nimport DetailRestaurant from \"./Customer/Restaurant/DetailRestaurant.js\";\r\nimport DetailType from \"./Customer/Type/DetailType.js\";\r\nimport ViewMap from \"./Customer/Map/ViewMap.js\";\r\nimport Staff from \"../routes/Staff.js\";\r\nclass App extends Component {\r\n  handlePersistorState = () => {\r\n    const { persistor } = this.props;\r\n    let { bootstrapped } = persistor.getState();\r\n    if (bootstrapped) {\r\n      if (this.props.onBeforeLift) {\r\n        Promise.resolve(this.props.onBeforeLift())\r\n          .then(() => this.setState({ bootstrapped: true }))\r\n          .catch(() => this.setState({ bootstrapped: true }));\r\n      } else {\r\n        this.setState({ bootstrapped: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.handlePersistorState();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Router history={history}>\r\n          <div className=\"main-container\">\r\n            {/* {this.props.isLoggedIn && <Header />} */}\r\n\r\n            <div className=\"content-container\">\r\n              <CustomScrollbars style={{ height: \"100vh\", width: \"100%\" }}>\r\n                <Switch>\r\n                  <Route path={path.HOME} exact component={Home} />\r\n                  <Route\r\n                    path={path.LOGIN}\r\n                    component={userIsNotAuthenticated(Login)}\r\n                  />\r\n                  <Route\r\n                    path={path.SYSTEM}\r\n                    component={userIsAuthenticated(System)}\r\n                  />\r\n                  <Route\r\n                    path={path.STAFF}\r\n                    component={userIsAuthenticated(Staff)}\r\n                  />\r\n                  <Route path={path.HOMEPAGE} component={HomePage} />\r\n                  <Route path={path.DETAIL_HOTPOT} component={DetailHotpot} />\r\n                  <Route\r\n                    path={path.DETAIL_HPHOTPOT}\r\n                    component={DetailHpHotpot}\r\n                  />\r\n                  <Route\r\n                    path={path.DETAIL_RESTAURANT}\r\n                    component={DetailRestaurant}\r\n                  />\r\n                  <Route path={path.DETAIL_TYPE} component={DetailType} />\r\n                  <Route path={path.VIEW_MAP} component={ViewMap} />\r\n                </Switch>\r\n              </CustomScrollbars>\r\n            </div>\r\n\r\n            {/* <ToastContainer\r\n              className=\"toast-container\"\r\n              toastClassName=\"toast-item\"\r\n              bodyClassName=\"toast-item-body\"\r\n              autoClose={false}\r\n              hideProgressBar={true}\r\n              pauseOnHover={false}\r\n              pauseOnFocusLoss={true}\r\n              closeOnClick={false}\r\n              draggable={false}\r\n              closeButton={<CustomToastCloseButton />}\r\n            /> */}\r\n\r\n            <ToastContainer\r\n              position=\"bottom-right\"\r\n              autoClose={5000}\r\n              hideProgressBar={false}\r\n              newestOnTop={false}\r\n              closeOnClick\r\n              rtl={false}\r\n              pauseOnFocusLoss\r\n              draggable\r\n              pauseOnHover\r\n            />\r\n          </div>\r\n        </Router>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    started: state.app.started,\r\n    isLoggedIn: state.user.isLoggedIn,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\IntlProviderWrapper.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\hoc\\authentication.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\Home.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\Header.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomToast.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\System.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\ConfirmModal.js",[],["361","362"],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Auth\\Login.js",["363"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n// import * as actions from \"../store/actions\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\n// import { userService } from '../../services/userService';\r\nimport { handleLoginApi } from '../../services/userService';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            showPassword: false,\r\n            errMessage: ''\r\n        }\r\n    }\r\n\r\n    handleOnChangeUserName = (e) => {\r\n        this.setState({\r\n            username: e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleOnChangePassword = (e) => {\r\n        this.setState({\r\n            password: e.target.value\r\n        })\r\n\r\n\r\n    }\r\n\r\n    handleLogin = async () => {\r\n        this.setState({\r\n            errMessage: ''\r\n        })\r\n        try {\r\n\r\n            let data = await handleLoginApi(this.state.username, this.state.password);\r\n            if (data && data.errCode !== 0) {\r\n                this.setState({\r\n                    errMessage: data.message\r\n                })\r\n            }\r\n            if (data && data.errCode === 0) {\r\n                this.props.userLoginSuccess(data.user);\r\n                console.log('loging success');\r\n            }\r\n\r\n        } catch (e) {\r\n            if (e.response) {\r\n                if (e.response.data) {\r\n                    this.setState({\r\n                        errMessage: e.response.data.message\r\n                    })\r\n                }\r\n            }\r\n            console.log('error message', e.response);\r\n        }\r\n    }\r\n\r\n    handleShowHidePassword = () => {\r\n\r\n        this.setState({\r\n            showPassword: !this.state.showPassword\r\n        })\r\n        console.log(this.state.showPassword);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"login-background\">\r\n                <div className=\"login-container\">\r\n                    <div className=\"login-content row\">\r\n                        <div className=\"col-12 text-center login-title\">Login</div>\r\n                        <div className=\"col-12 form-group\">\r\n                            <label>Username: </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control login-input\"\r\n                                placeholder=\"Enter your user name\"\r\n                                value={this.state.username}\r\n                                onChange={(e) => this.handleOnChangeUserName(e)}\r\n\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-12 form-group\">\r\n                            <label>Password: </label>\r\n                            <div className=\"login-password\">\r\n                                <input\r\n                                    type={this.state.showPassword ? 'text' : 'password'}\r\n                                    className=\"form-control login-input\"\r\n                                    placeholder=\"Enter your password\"\r\n                                    value={this.state.password}\r\n                                    onChange={(e) => this.handleOnChangePassword(e)}\r\n\r\n                                />\r\n                                <span onClick={() => this.handleShowHidePassword()}>\r\n                                    <i className={this.state.showPassword ? 'fas fa-eye show-password' : 'fas fa-eye-slash show-password'} ></i>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12\" style={{ color: 'red' }}>\r\n                            {this.state.errMessage}\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button\r\n                                className=\"btn-login\"\r\n                                onClick={() => this.handleLogin()}\r\n                            >Login</button>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <span className=\"forgot-password\">Forgot your password?</span>\r\n                        </div>\r\n                        <div className=\"col-12 text-center login-with mt-3\">\r\n                            <span className=\"\">Or login with:</span>\r\n                        </div>\r\n                        <div className=\"col-12 social-login\">\r\n                            <i className=\"fab fa-facebook social-icon fb\"></i>\r\n                            <i className=\"fab fa-google-plus social-icon gg\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        // userLoginFail: () => dispatch(actions.adminLoginFail()),\r\n        userLoginSuccess: (userInfo) => dispatch(actions.userLoginSuccess(userInfo))\r\n    };\r\n\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\rootReducer.js",["364"],"import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\n\r\nimport appReducer from \"./appReducer\";\r\nimport userReducer from \"./userReducer\";\r\nimport adminReducer from \"./adminReducer\";\r\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer } from \"redux-persist\";\r\n\r\nconst persistCommonConfig = {\r\n  storage: storage,\r\n  stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n  ...persistCommonConfig,\r\n  key: \"user\",\r\n  whitelist: [\"isLoggedIn\", \"userInfo\"],\r\n};\r\n\r\nconst appPersistConfig = {\r\n  ...persistCommonConfig,\r\n  key: \"app\",\r\n  whitelist: [\"language\"],\r\n};\r\n\r\nexport default (history) =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: adminReducer,\r\n  });\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\index.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Header\\menuApp.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Navigator.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\CustomScrollbars.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\appReducer.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\UserManage.js",["365","366"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotManage.scss\";\r\nimport { emitter } from \"../../utils/emitter\";\r\nimport { getAllUsers } from \"../../services/userService\";\r\n\r\nclass UserManage extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class HotpotManage này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrUsers: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getAllUsersFromReact();\r\n  }\r\n\r\n  getAllUsersFromReact = async () => {\r\n    let response = await getAllUsers(\"ALL\");\r\n    if (response && response.errCode === 0) {\r\n      this.setState({\r\n        arrUsers: response.users,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let arrUsers = this.state.arrUsers;\r\n    return (\r\n      <div className=\"hotpots-container\">\r\n        <div className=\"title text-center\">Manage user</div>\r\n        <div className=\"hotpots-table mt-3 mx-1\">\r\n          <table id=\"customers\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Email</th>\r\n                <th>First Name</th>\r\n                <th>Last Name</th>\r\n                <th>Phone number</th>\r\n                <th>Address</th>\r\n              </tr>\r\n\r\n              {arrUsers &&\r\n                arrUsers.map((item, index) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{item.email}</td>\r\n                      <td>{item.firstName}</td>\r\n                      <td>{item.lastName}</td>\r\n                      <td>{item.phonenumber}</td>\r\n                      <td>{item.address}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\userService.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\index.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\constant.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\CommonUtils.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\LanguageUtils.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\KeyCodeUtils.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\ToastUtil.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\axios.js",["367","368"],"import axios from 'axios';\r\nimport _ from 'lodash';\r\n// import config from './config';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true\r\n});\r\n\r\n\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n\r\n        const { data } = response;\r\n        return response.data;\r\n    })\r\n\r\n\r\nexport default instance;\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\userActions.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\appActions.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\HotpotManage.js",["369","370"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotManage.scss\";\r\nimport {\r\n  getAllHotpots,\r\n  createNewHotpotService,\r\n  deleteHotpotService,\r\n  editHotpotService,\r\n} from \"../../services/hotpotService\";\r\nimport ModalHotpot from \"./ModalHotpot\";\r\nimport ModalEditHotpot from \"./ModalEditHotpot\";\r\nimport { emitter } from \"../../utils/emitter\";\r\n\r\nclass HotpotManage extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class HotpotManage này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpots: [],\r\n      isOpenModalHotpot: false,\r\n      isOpenModalEditHotpot: false,\r\n      hotpotEdit: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getAllHotpotsFromReact();\r\n  }\r\n\r\n  /**\r\n   *Life cycle:\r\n   Run component:\r\n   1. Run constructor -> init state (khởi tạo những biến sẽ dùng)\r\n   2. Run Did mount: khi nào muốn gán gtri cho 1 state nào đấy sẽ dùng trong hàm did mount \r\n   - gọi API lấy giá trị vào và set state cho component \r\n   - state lưu giá trị của các biến, và được dùng trong render \r\n   3. Run render \r\n   render cho ta nhìn thấy trên màn hình \r\n   *\r\n   *\r\n   *\r\n   *\r\n   */\r\n\r\n  getAllHotpotsFromReact = async () => {\r\n    let response = await getAllHotpots(\"ALL\");\r\n    if (response && response.errCode === 0) {\r\n      this.setState({\r\n        arrHotpots: response.hotpots,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleAddNewHopot = () => {\r\n    this.setState({\r\n      isOpenModalHotpot: true,\r\n    });\r\n  };\r\n\r\n  toggleHotpotModal = () => {\r\n    this.setState({\r\n      isOpenModalHotpot: !this.state.isOpenModalHotpot,\r\n    });\r\n  };\r\n\r\n  toggleHotpotEditModal = () => {\r\n    this.setState({\r\n      isOpenModalEditHotpot: !this.state.isOpenModalEditHotpot,\r\n    });\r\n  };\r\n\r\n  createNewHotpot = async (data) => {\r\n    try {\r\n      let response = await createNewHotpotService(data);\r\n      //   if (response && response.errCode !== 0) {\r\n      //     alert(response.errMessage);\r\n      //   } else {\r\n      //     await this.getAllHotpotsFromReact();\r\n      //   }\r\n      await this.getAllHotpotsFromReact();\r\n      this.setState({\r\n        isOpenModalHotpot: false,\r\n      });\r\n      emitter.emit(\"EVENT_CLEAR_MODAL_DATA\");\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  handleDeleteHotpot = async (hotpot) => {\r\n    try {\r\n      let res = await deleteHotpotService(hotpot.id);\r\n      if (res && res.errCode === 0) {\r\n        await this.getAllHotpotsFromReact();\r\n      } else {\r\n        alert(res.errMessage);\r\n      }\r\n      console.log(res);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    this.setState({\r\n      isOpenModalEditHotpot: true,\r\n      hotpotEdit: hotpot,\r\n    });\r\n  };\r\n\r\n  doEditHotpot = async (hotpot) => {\r\n    try {\r\n      let res = await editHotpotService(hotpot);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          isOpenModalEditHotpot: false,\r\n        });\r\n        await this.getAllHotpotsFromReact();\r\n      } else {\r\n        alert(res.errCode);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let arrHotpots = this.state.arrHotpots.hotpots;\r\n    return (\r\n      <div className=\"hotpots-container\">\r\n        <ModalHotpot\r\n          isOpen={this.state.isOpenModalHotpot}\r\n          toggleFromParent={this.toggleHotpotModal}\r\n          createNewHotpot={this.createNewHotpot}\r\n        />\r\n        {this.state.isOpenModalEditHotpot && (\r\n          <ModalEditHotpot\r\n            //isOpen={true}\r\n            isOpen={this.state.isOpenModalEditHotpot}\r\n            toggleFromParent={this.toggleHotpotEditModal}\r\n            currentHotpot={this.state.hotpotEdit}\r\n            editHotpot={this.doEditHotpot}\r\n          />\r\n        )}\r\n\r\n        <div className=\"title text-center\">Manage hotpot</div>\r\n        <div className=\"mx-1\">\r\n          <button\r\n            className=\"btn btn-primary px-3\"\r\n            onClick={() => this.handleAddNewHopot()}\r\n          >\r\n            <i className=\"fas fa-plus\"></i> Add new hotpot\r\n          </button>\r\n        </div>\r\n        <div className=\"hotpots-table mt-3 mx-1\">\r\n          <table id=\"customers\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>ProvinceId</th>\r\n                <th>Phone number</th>\r\n                <th>Restaurant Id</th>\r\n                <th>Type Id</th>\r\n                <th>PriceId</th>\r\n                <th>Note</th>\r\n                <th>PaymentId</th>\r\n                <th>Action</th>\r\n              </tr>\r\n\r\n              {arrHotpots &&\r\n                arrHotpots.map((item, index) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{item.name}</td>\r\n                      <td>{item.provinceId}</td>\r\n                      <td>{item.phonenumber}</td>\r\n                      <td>{item.restaurantId}</td>\r\n                      <td>{item.typeId}</td>\r\n                      <td>{item.priceId}</td>\r\n                      <td>{item.note}</td>\r\n                      <td>{item.paymentId}</td>\r\n                      <td>\r\n                        <button\r\n                          className=\"btn-edit\"\r\n                          onClick={() => this.handleEditHotpot(item)}\r\n                        >\r\n                          <i className=\"fas fa-pencil-alt\"></i>\r\n                        </button>\r\n                        <button\r\n                          className=\"btn-delete\"\r\n                          onClick={() => this.handleDeleteHotpot(item)}\r\n                        >\r\n                          <i className=\"fas fa-trash\"></i>\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotManage);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\hotpotService.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalHotpot.js",["371"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { emitter } from \"../../utils/emitter\";\r\nclass ModalHotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      phonenumber: \"\",\r\n      image: \"\",\r\n      priceId: \"\",\r\n      provinceId: \"\",\r\n      paymentId: \"\",\r\n      typeId: \"\",\r\n      restaurantId: \"\",\r\n      note: \"\",\r\n      staffId: \"\",\r\n    };\r\n\r\n    this.listenToEmitter();\r\n  }\r\n\r\n  listenToEmitter() {\r\n    emitter.on(\"EVENT_CLEAR_MODAL_DATA\", () => {\r\n      //reset state\r\n      this.setState = {\r\n        name: \"\",\r\n        phonenumber: \"\",\r\n        image: \"\",\r\n        priceId: \"\",\r\n        provinceId: \"\",\r\n        paymentId: \"\",\r\n        typeId: \"\",\r\n        restaurantId: \"\",\r\n        note: \"\",\r\n        staffId: \"\",\r\n      };\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"mouting\");\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.toggleFromParent();\r\n  };\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    //bad code\r\n    /*\r\n    this.state.name === this.state['email']\r\n    \r\n    */\r\n    // this.state[id] = event.target.value;\r\n    // this.setState(\r\n    //   {\r\n    //     ...this.state,\r\n    //   },\r\n    //   () => {\r\n    //     console.log(\"check bad state: \", this.state);\r\n    //   }\r\n    // );\r\n\r\n    //good code\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrInput = [\r\n      \"name\",\r\n      \"phonenumber\",\r\n      \"priceId\",\r\n      \"provinceId\",\r\n      \"paymentId\",\r\n      \"typeId\",\r\n      \"restaurantId\",\r\n      \"note\",\r\n    ];\r\n    for (let i = 0; i < arrInput.length; i++) {\r\n      if (!this.state[arrInput[i]]) {\r\n        isValid = false;\r\n        alert(\"Missing parameter: \" + arrInput[i]);\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  handleAddNewHotpot = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === true) {\r\n      this.props.createNewHotpot(this.state);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.props.isOpen}\r\n        toggle={() => {\r\n          this.toggle();\r\n        }}\r\n        className={\"modal-hotpot-container\"}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <ModalHeader\r\n          toggle={() => {\r\n            this.toggle();\r\n          }}\r\n        >\r\n          Create new hotpot\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputName\">Name</label>\r\n                <input\r\n                  type=\"name\"\r\n                  class=\"form-control\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"name\");\r\n                  }}\r\n                  value={this.state.name}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPhonenumber\">Phone number</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"phonenumber\"\r\n                  placeholder=\"0123456789\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"phonenumber\");\r\n                  }}\r\n                  value={this.state.phonenumber}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputProvince\">ProvinceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"provinceId\"\r\n                  placeholder=\"PRO1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"provinceId\");\r\n                  }}\r\n                  value={this.state.provinceId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputRestaureantId\">restaurantId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"restaurantId\"\r\n                  placeholder=\"1234 Main St\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={this.state.restaurantId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputTypeId\">typeId</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"typeId\"\r\n                placeholder=\"typeId\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"typeId\");\r\n                }}\r\n                value={this.state.typeId}\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputNote\">Note</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"note\"\r\n                placeholder=\"Note\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"note\");\r\n                }}\r\n                value={this.state.note}\r\n              />\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPrice\">PriceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"priceId\"\r\n                  placeholder=\"PRI1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"priceId\");\r\n                  }}\r\n                  value={this.state.priceId}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPayment\">PaymentId</label>\r\n                {/* <!-- <select name=\"paymentId\" class=\"form-control\">\r\n                <option value=\"1\">Credit Card</option>\r\n                <option value=\"2\">Cash</option>\r\n                <option value=\"3\">Momo</option>\r\n              </select> --> */}\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"paymentId\"\r\n                  placeholder=\"PAY1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"paymentId\");\r\n                  }}\r\n                  value={this.state.paymentId}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.handleAddNewHotpot();\r\n            }}\r\n          >\r\n            Add new\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.toggle();\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\utils\\emitter.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\ModalEditHotpot.js",["372","373"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { emitter } from \"../../utils/emitter\";\r\nimport _ from \"lodash\";\r\nclass ModalEditHotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      name: \"\",\r\n      phonenumber: \"\",\r\n      image: \"\",\r\n      priceId: \"\",\r\n      provinceId: \"\",\r\n      paymentId: \"\",\r\n      typeId: \"\",\r\n      restaurantId: \"\",\r\n      note: \"\",\r\n      staffId: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let hotpot = this.props.currentHotpot;\r\n    if (hotpot && !_.isEmpty(hotpot)) {\r\n      this.setState({\r\n        id: hotpot.id,\r\n        name: hotpot.name,\r\n        phonenumber: hotpot.phonenumber,\r\n        //image: hotpot.,\r\n        priceId: hotpot.priceId,\r\n        provinceId: hotpot.provinceId,\r\n        paymentId: hotpot.paymentId,\r\n        typeId: hotpot.typeId,\r\n        restaurantId: hotpot.restaurantId,\r\n        note: hotpot.note,\r\n        staffId: hotpot.staffId,\r\n      });\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.toggleFromParent();\r\n  };\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    //good code\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrInput = [\r\n      \"name\",\r\n      \"phonenumber\",\r\n      \"priceId\",\r\n      \"provinceId\",\r\n      \"paymentId\",\r\n      \"typeId\",\r\n      \"restaurantId\",\r\n      \"note\",\r\n    ];\r\n    for (let i = 0; i < arrInput.length; i++) {\r\n      if (!this.state[arrInput[i]]) {\r\n        isValid = false;\r\n        alert(\"Missing parameter: \" + arrInput[i]);\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  handleSaveHotpot = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === true) {\r\n      this.props.editHotpot(this.state);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.props.isOpen}\r\n        toggle={() => {\r\n          this.toggle();\r\n        }}\r\n        className={\"modal-hotpot-container\"}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <ModalHeader\r\n          toggle={() => {\r\n            this.toggle();\r\n          }}\r\n        >\r\n          Edit a hotpot\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputName\">Name</label>\r\n                <input\r\n                  type=\"name\"\r\n                  class=\"form-control\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"name\");\r\n                  }}\r\n                  value={this.state.name}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPhonenumber\">Phone number</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"phonenumber\"\r\n                  placeholder=\"0123456789\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"phonenumber\");\r\n                  }}\r\n                  value={this.state.phonenumber}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputProvince\">ProvinceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"provinceId\"\r\n                  placeholder=\"PRO1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"provinceId\");\r\n                  }}\r\n                  value={this.state.provinceId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-3\">\r\n                <label for=\"inputRestaureantId\">restaurantId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"restaurantId\"\r\n                  placeholder=\"1234 Main St\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={this.state.restaurantId}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputTypeId\">typeId</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"typeId\"\r\n                placeholder=\"typeId\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"typeId\");\r\n                }}\r\n                value={this.state.typeId}\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"inputNote\">Note</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                name=\"note\"\r\n                placeholder=\"Note\"\r\n                onChange={(event) => {\r\n                  this.handleOnChangeInput(event, \"note\");\r\n                }}\r\n                value={this.state.note}\r\n              />\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPrice\">PriceId</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"priceId\"\r\n                  placeholder=\"PRI1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"priceId\");\r\n                  }}\r\n                  value={this.state.priceId}\r\n                />\r\n              </div>\r\n              <div class=\"form-group col-md-6\">\r\n                <label for=\"inputPayment\">PaymentId</label>\r\n                {/* <!-- <select name=\"paymentId\" class=\"form-control\">\r\n                <option value=\"1\">Credit Card</option>\r\n                <option value=\"2\">Cash</option>\r\n                <option value=\"3\">Momo</option>\r\n              </select> --> */}\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  name=\"paymentId\"\r\n                  placeholder=\"PAY1\"\r\n                  onChange={(event) => {\r\n                    this.handleOnChangeInput(event, \"paymentId\");\r\n                  }}\r\n                  value={this.state.paymentId}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.handleSaveHotpot();\r\n            }}\r\n          >\r\n            Save\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.toggle();\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomePage.js",["374","375","376"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from \"./HomeHeader\";\r\nimport \"./HomePage.scss\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.scss\";\r\nimport \"slick-carousel/slick/slick-theme.scss\";\r\nimport HotpotType from \"./Section/HotpotType\";\r\nimport Restaurant from \"./Section/Restaurant\";\r\nimport Hotpot from \"./Section/Hotpot\";\r\nimport HandBook from \"./Section/HandBook\";\r\nimport Video from \"./Section/Video\";\r\nimport HomeFooter from \"./HomeFooter\";\r\nimport NearSearch from \"../Customer/Map/NearSearch\";\r\n\r\nclass HomePage extends Component {\r\n  //handleAfterChange = (event, slick, currentSlide) => {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showNearSearch: false,\r\n    };\r\n  }\r\n\r\n  handleViewNearSearch = () => {\r\n    this.setState({ showNearSearch: true });\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.setState({ showNearSearch: false });\r\n  };\r\n  render() {\r\n    let settings = {\r\n      dots: false,\r\n      infinite: false,\r\n      speed: 500,\r\n      slidesToShow: 4,\r\n      slidesToScroll: 1,\r\n      // afterChange: this.handleAfterChange,\r\n    };\r\n    const { showNearSearch } = this.state;\r\n    return (\r\n      <div>\r\n        <HomeHeader\r\n          isShowBanner={true}\r\n          onViewNearSearch={this.handleViewNearSearch}\r\n        />\r\n\r\n        {showNearSearch && <NearSearch handleClose={this.handleCloseModal} />}\r\n        {/* <HotpotType settings={settings} /> */}\r\n        {/* <Restaurant settings={settings} /> */}\r\n        <Hotpot settings={settings} />\r\n        {/* <HandBook settings={settings} /> */}\r\n        <Video />\r\n        <HomeFooter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeHeader.js",["377","378","379","380","381"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport \"./HomeHeader.scss\";\r\nimport * as actions from \"../../store/actions\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { LANGUAGES } from \"../../utils/constant\";\r\nimport { changeLanguageApp } from \"../../store/actions/appActions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { getAllTypes } from \"../../services/hotpotService\";\r\nimport { Link } from \"react-router-dom\";\r\nclass HomeHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataType: [],\r\n      restaurantId: \"\",\r\n      isClicked: false,\r\n    };\r\n  }\r\n  changeLanguage = (language) => {\r\n    this.props.changeLanguageAppRedux(language);\r\n    //fire redux event(actions)\r\n    //bootstrap (v): áp khởi động thành công\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.props.fetchAllRestaurantNames();\r\n    let res = await getAllTypes();\r\n    if (res && res.errCode === 0) {\r\n      this.setState({\r\n        dataType: res.data,\r\n      });\r\n    }\r\n    if (window.location.hash === \"#video-section\") {\r\n      // Lấy phần tử Video bằng id\r\n      const videoElement = document.getElementById(\"video-section\");\r\n      // Nếu phần tử tồn tại, cuộn đến nó sau một khoảng thời gian trễ\r\n      if (videoElement) {\r\n        setTimeout(() => {\r\n          videoElement.scrollIntoView({ behavior: \"smooth\" });\r\n        }, 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleClick = (sectionId) => {\r\n    // Khi nút được click, cập nhật trạng thái để màu sắc của văn bản được thay đổi\r\n    this.setState({ isClicked: true });\r\n\r\n    // Sau đó, cuộn đến phần tử có id là \"video-section\"\r\n    const element = document.getElementById(sectionId);\r\n    if (element) {\r\n      element.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  handleViewMap = () => {\r\n    if (this.props.history) {\r\n      //this.props.history.push(`/detail-type`);\r\n      this.props.history.push(\"/view-map\");\r\n    }\r\n  };\r\n\r\n  handleViewDetailRestaurant = (id) => {\r\n    this.props.history.push(`/detail-restaurant/${id}`);\r\n  };\r\n\r\n  returnHomePage = () => {\r\n    if (this.props.history) {\r\n      this.props.history.push(\"/home\");\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allRestaurantNames !== this.props.allRestaurantNames) {\r\n      let arrRestaurantNames = this.props.allRestaurantNames;\r\n      this.setState({\r\n        listRestaurantNames: arrRestaurantNames,\r\n        restaurantId:\r\n          arrRestaurantNames && arrRestaurantNames.length > 0\r\n            ? arrRestaurantNames[0].id\r\n            : \"\",\r\n      });\r\n    }\r\n    if (prevProps.allTypeNames !== this.props.allTypeNames) {\r\n      let arrTypeNames = this.props.allTypeNames;\r\n      this.setState({\r\n        listTypeNames: arrTypeNames,\r\n        typeId:\r\n          arrTypeNames && arrTypeNames.length > 0 ? arrTypeNames[0].id : \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  onChangeInput = (event, id) => {\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n    this.handleViewDetailRestaurant(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    let language = this.props.language;\r\n    let { dataType, restaurantId, isClicked } = this.state;\r\n    let restaurantNames = this.state.listRestaurantNames;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"home-header-container\">\r\n          <div className=\"home-header-content\">\r\n            <div className=\"left-content\">\r\n              {/* <i class=\"fas fa-bars\"></i> */}\r\n              <div\r\n                className=\"header-logo\"\r\n                onClick={() => this.returnHomePage()}\r\n              ></div>\r\n            </div>\r\n            <div className=\"center-content\">\r\n              <div className=\"child-content\">\r\n                <div>\r\n                  <b>\r\n                    {/* <FormattedMessage id=\"homeheader.type\" /> */}\r\n                    <Link\r\n                      to=\"/home#home-section\"\r\n                      onClick={() => this.handleClick(\"home-section\")}\r\n                    >\r\n                      Home\r\n                    </Link>\r\n                  </b>\r\n                </div>\r\n                {/* <div className=\"subtitle\">\r\n                  <FormattedMessage id=\"homeheader.searchhotpotbytype\" />\r\n                </div> */}\r\n              </div>\r\n              <div className=\"child-content\">\r\n                <div>\r\n                  <b>\r\n                    {/* <FormattedMessage id=\"homeheader.restaurant\" /> */}\r\n                    <Link\r\n                      to=\"/home#restaurant-section\"\r\n                      onClick={() => this.handleClick(\"restaurant-section\")}\r\n                    >\r\n                      Restaurant\r\n                    </Link>\r\n                  </b>\r\n                </div>\r\n                {/* <div className=\"subtitle\">\r\n                  <FormattedMessage id=\"homeheader.nearbyrestaurant\" />\r\n                </div> */}\r\n              </div>\r\n              <div className=\"child-content\">\r\n                <div>\r\n                  <b>\r\n                    {/* Sử dụng một phần tử khác thay vì <a>, chẳng hạn <button> */}\r\n                    <Link\r\n                      to=\"/home#about-us\"\r\n                      onClick={() => this.handleClick(\"about-us\")}\r\n                    >\r\n                      About Us\r\n                    </Link>\r\n                  </b>\r\n                </div>\r\n                {/* <div className=\"subtitle\">\r\n                  <FormattedMessage id=\"homeheader.favoritehotpot\" />\r\n                </div> */}\r\n              </div>\r\n              <div className=\"child-content\">\r\n                <div>\r\n                  <b>\r\n                    {/* <FormattedMessage id=\"homeheader.explore\" /> */}\r\n\r\n                    <Link\r\n                      to=\"/home#video-section\"\r\n                      onClick={() => this.handleClick(\"video-section\")}\r\n                    >\r\n                      Tin tức & Blog\r\n                    </Link>\r\n                  </b>\r\n                </div>\r\n                {/* <div className=\"subtitle\">\r\n                  <FormattedMessage id=\"homeheader.history\" />\r\n                </div> */}\r\n              </div>\r\n              <div\r\n                className=\"child-content\"\r\n                onClick={() => this.handleViewMap()}\r\n              >\r\n                <div>\r\n                  <b>\r\n                    {/* <FormattedMessage id=\"homeheader.explore\" /> */}\r\n                    Gần bạn\r\n                  </b>\r\n                </div>\r\n                {/* <div className=\"subtitle\">\r\n                  <FormattedMessage id=\"homeheader.history\" />\r\n                </div> */}\r\n              </div>\r\n\r\n              {/* <div\r\n                className=\"child-content\"\r\n                onClick={this.props.onViewNearSearch}\r\n              >\r\n                <div>\r\n                  <b>NearYou</b>\r\n                </div>\r\n              </div> */}\r\n            </div>\r\n            <div className=\"right-content\">\r\n              <div className=\"placehotpot\">\r\n                <Link\r\n                  to=\"/home#restaurant-section\"\r\n                  onClick={() => this.handleClick(\"restaurant-section\")}\r\n                >\r\n                  Đặt ngay!\r\n                </Link>\r\n              </div>\r\n              {/* <div className=\"support\">\r\n                <i class=\"fas fa-question-circle\"></i>\r\n                <FormattedMessage id=\"homeheader.support\" />\r\n              </div> */}\r\n              <div\r\n                className={\r\n                  language === LANGUAGES.VI\r\n                    ? \"language-vi active\"\r\n                    : \"language-vi\"\r\n                }\r\n              >\r\n                <span onClick={() => this.changeLanguage(LANGUAGES.VI)}>\r\n                  VI\r\n                </span>\r\n              </div>\r\n              <div\r\n                className={\r\n                  language === LANGUAGES.EN\r\n                    ? \"language-en active\"\r\n                    : \"language-en\"\r\n                }\r\n              >\r\n                <span onClick={() => this.changeLanguage(LANGUAGES.EN)}>\r\n                  EN\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {this.props.isShowBanner === true && (\r\n          <div id=\"home-section\" className=\"home-header-banner\">\r\n            {/* <div class=\"section-video\" data-video-disable-width=\"0\">\r\n              <video muted=\"\" loop=\"\" autoplay=\"\" playsinline=\"\" preload=\"auto\">\r\n                <source\r\n                  src=\"https://qiaolinhotpot.com/wp-content/uploads/2022/06/侨林火锅.mp4\"\r\n                  type=\"video/mp4\"\r\n                />\r\n              </video>\r\n            </div> */}\r\n            {/* <video autoplay muted loop id=\"video-bg\">\r\n              <source src=\"../../assets/images/V1.mp4\" type=\"video/mp4\" />\r\n              Your browser does not support the video tag.\r\n            </video> */}\r\n\r\n            <div className=\"content-up\">\r\n              {/* <div className=\"title1\">\r\n                <FormattedMessage id=\"banner.title1\" />\r\n              </div>\r\n              <div className=\"title2\">\r\n                <FormattedMessage id=\"banner.title2\" />\r\n              </div> */}\r\n\r\n              <div className=\"page-wrapper\">\r\n                <div className=\"content-wrapper\">\r\n                  <div className=\"heading-wrapper\">\r\n                    <div className=\"left\">\r\n                      <div className=\"heading-text\">Taste the magic of</div>\r\n                      <div className=\"title-wrapper\">Flavorful Hotpot</div>\r\n                    </div>\r\n\r\n                    <div className=\"image-wrapper\">\r\n                      <img\r\n                        src=\"https://qiaolinhotpot.com/wp-content/uploads/2022/06/Vector-1.png\"\r\n                        alt=\"\"\r\n                        className=\"banner-image\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"description-wrapper\">\r\n                    <p>Delight in hotpot's exquisite perfection</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* <div className=\"search\">\r\n                <i className=\"fas fa-search\"></i>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={restaurantId}\r\n                >\r\n                  {restaurantNames &&\r\n                    restaurantNames.length > 0 &&\r\n                    restaurantNames.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.id}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div> */}\r\n            </div>\r\n            <div className=\"content-down\">\r\n              <div className=\"options\">\r\n                {/* {dataType &&\r\n                  dataType.length > 0 &&\r\n                  dataType.slice(0, 5).map((item, index) => {\r\n                    return (\r\n                      <div\r\n                        className=\"option-child\"\r\n                        key={index}\r\n                        onClick={() => this.handleViewDetailType(item)}\r\n                      >\r\n                        <div className=\"icon-child\">\r\n                          <i className=\"fa fa-heartbeat\"></i>\r\n                        </div>\r\n                        <div className=\"text-child\">{item.name}</div>\r\n                      </div>\r\n                    );\r\n                  })} */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n    allRestaurantNames: state.admin.allRestaurantNames,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeLanguageAppRedux: (language) => dispatch(changeLanguageApp(language)),\r\n    fetchAllRestaurantNames: () => dispatch(actions.fetchAllRestaurantNames()),\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(HomeHeader)\r\n);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HotpotType.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Restaurant.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Hotpot.js",["382","383","384"],"import React, { Component } from \"react\";\r\nimport \"./Hotpot.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Slider from \"react-slick\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport { withRouter } from \"react-router\";\r\nimport {\r\n  getHotpotByLocation,\r\n  getAllCodeService,\r\n} from \"../../../services/hotpotService\";\r\nimport _ from \"lodash\";\r\nclass Hotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpotId: [],\r\n      arrHotpots: [],\r\n      listProvince: [],\r\n      searchValue: \"\",\r\n      currentPage: 1,\r\n      hotpotsPerPage: 8,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.topHotpotsRedux !== this.props.topHotpotsRedux) {\r\n      this.setState({\r\n        arrHotpots: this.props.topHotpotsRedux,\r\n      });\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.props.loadTopHotpots();\r\n    let res = await getHotpotByLocation(\"ALL\");\r\n    let resProvince = await getAllCodeService(\"PROVINCE\");\r\n    if (res && res.errCode === 0 && resProvince && resProvince.errCode === 0) {\r\n      let data = res.data;\r\n      let arrHotpotId = [];\r\n      if (data && !_.isEmpty(data)) {\r\n        // let arr = data.hotpotType;\r\n        // console.log(\"data.hotpotType\", arr);\r\n        // if (arr && arr.length > 0) {\r\n        //   arr.map((item) => {\r\n        //     arrHotpotId.push(item.id);\r\n        //     console.log(\"id\", item.id);\r\n        //   });\r\n        // }\r\n\r\n        data.map((item) => {\r\n          arrHotpotId.push(item.id);\r\n        });\r\n      }\r\n\r\n      let dataProvince = resProvince.data;\r\n      if (dataProvince && dataProvince.length > 0) {\r\n        dataProvince.unshift({\r\n          createAt: null,\r\n          keyMap: \"ALL\",\r\n          type: \"PROVINCE\",\r\n          valueEn: \"All\",\r\n          valueVi: \"Toàn quốc\",\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        arrHotpotId: arrHotpotId,\r\n        listProvince: dataProvince ? dataProvince : [],\r\n      });\r\n    } else {\r\n      console.log(\"LOI\");\r\n    }\r\n  }\r\n\r\n  handleViewDetailHotpot = (hotpot) => {\r\n    this.props.history.push(`/detail-hpHotpot/${hotpot.id}`);\r\n  };\r\n\r\n  handleOnChangeSelect = async (event) => {\r\n    let location = event.target.value;\r\n    let res = await getHotpotByLocation(location);\r\n    if (res && res.errCode === 0) {\r\n      let data = res.data;\r\n      let arrHotpots = [];\r\n      arrHotpots = data;\r\n      // let arrHotpotId = [];\r\n      // if (data && !_.isEmpty(data)) {\r\n      //   if (data && data.length > 0) {\r\n      //     data.map((item) => {\r\n      //       arrHotpotId.push(item.id);\r\n      //     });\r\n      //   }\r\n      // }\r\n\r\n      this.setState({\r\n        //arrHotpotId: arrHotpotId,\r\n        arrHotpots: arrHotpots,\r\n      });\r\n    } else {\r\n      console.log(\"LOOOIIII\");\r\n    }\r\n  };\r\n\r\n  handleOnChangeSearch = (event) => {\r\n    const searchValue = event.target.value; // Lấy giá trị tìm kiếm từ trường input\r\n    this.setState({ searchValue }); // Lưu vào state\r\n  };\r\n\r\n  render() {\r\n    let arrHotpots = this.state.arrHotpots;\r\n    let filteredHotpots = this.state.arrHotpots.filter((hotpot) =>\r\n      hotpot.name.toLowerCase().includes(this.state.searchValue.toLowerCase())\r\n    );\r\n    arrHotpots = filteredHotpots;\r\n    let { currentPage, hotpotsPerPage } = this.state;\r\n    let startIndex = (currentPage - 1) * hotpotsPerPage;\r\n    let endIndex = startIndex + hotpotsPerPage;\r\n    let currentHotpots = arrHotpots.slice(startIndex, endIndex);\r\n    let { listProvince } = this.state;\r\n    let { language } = this.props;\r\n\r\n    //arrHotpots = arrHotpots.concat(arrHotpots).concat(arrHotpots); //its đata quá fai tạo thêm\r\n    return (\r\n      <div id=\"restaurant-section\" className=\"body\">\r\n        <div className=\"hotpot-search\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-2 search-location\">\r\n                <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n                  {listProvince &&\r\n                    listProvince.length > 0 &&\r\n                    listProvince.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-md-8 search-name\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search by name\" // Placeholder cho trường tìm kiếm\r\n                  onChange={this.handleOnChangeSearch} // Xử lý sự kiện thay đổi giá trị tìm kiếm\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"section-share section-hotpot\">\r\n          <div className=\"section-container\">\r\n            <div className=\"section-header\">\r\n              <h1>\r\n                Thế giới nhà hàng LẨU ngon, thực đơn món nhúng lẩu đa dạng!\r\n              </h1>\r\n              <p>\r\n                Thưởng thức hương vị trọn vẹn với vô số các loại lẩu từ khắp nơi\r\n                trên thế giới như lẩu Thái, lẩu Hàn Quốc, lẩu Nhật Bản, lẩu\r\n                Trung Quốc, lẩu Việt Nam,...đã được chúng tôi lựa chọn & tổng\r\n                hợp lại ở bên dưới. Với mức giá từ BÌNH DÂN đến CAO CẤP sẽ giúp\r\n                bạn có thể dễ dàng lựa chọn một địa chỉ ăn uống phù hợp nhất.\r\n                Xem ngay!\r\n              </p>\r\n\r\n              {/* <span className=\"title-section\">\r\n                <FormattedMessage id=\"homepage.outstanding-hotpot\" />\r\n                \r\n              </span> */}\r\n              {/* <button className=\"btn-section\">\r\n                <FormattedMessage id=\"homepage.more-info\" />\r\n              </button> */}\r\n            </div>\r\n            {/* <div className=\"section-body\">\r\n              <Slider {...this.props.settings}>\r\n                {arrHotpots &&\r\n                  arrHotpots.length > 0 &&\r\n                  arrHotpots.map((item, index) => {\r\n                    let imageBase64 = \"\";\r\n                    let name = `${item.name}`;\r\n                    if (item.image) {\r\n                      imageBase64 = new Buffer(item.image, \"base64\").toString(\r\n                        \"binary\"\r\n                      );\r\n                    }\r\n                    return (\r\n                      <div\r\n                        className=\"section-customize\"\r\n                        key={index}\r\n                        onClick={() => this.handleViewDetailHotpot(item)}\r\n                      >\r\n                        <div className=\"customize-border\">\r\n                          <div className=\"outer-bg\">\r\n                            <div\r\n                              className=\"bg-image section-hotpot\"\r\n                              style={{\r\n                                backgroundImage: `url(${imageBase64})`,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div className=\"position text-center\">\r\n                            <div>{name}</div>\r\n                            <div>Lẩu buffet</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n              </Slider>\r\n            </div> */}\r\n            <div className=\"section-body\">\r\n              <div className=\"hotpot-list\">\r\n                {currentHotpots &&\r\n                  currentHotpots.length > 0 &&\r\n                  currentHotpots.map((item, index) => {\r\n                    let imageBase64 = \"\";\r\n                    let name = `${item.name}`;\r\n                    if (item.image) {\r\n                      imageBase64 = new Buffer(item.image, \"base64\").toString(\r\n                        \"binary\"\r\n                      );\r\n                    }\r\n                    return (\r\n                      <div\r\n                        className=\"section-customize\"\r\n                        key={index}\r\n                        onClick={() => this.handleViewDetailHotpot(item)}\r\n                      >\r\n                        <div className=\"customize-border\">\r\n                          <div className=\"outer-bg\">\r\n                            <div\r\n                              className=\"bg-image section-hotpot\"\r\n                              style={{\r\n                                backgroundImage: `url(${imageBase64})`,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div className=\"position\">\r\n                            <div className=\"name\">{name}</div>\r\n                            <div className=\"address\">{item.note}</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n              </div>\r\n\r\n              {/* Phần phân trang */}\r\n              <div className=\"pagination\">\r\n                {arrHotpots.length > hotpotsPerPage &&\r\n                  Array.from(\r\n                    { length: Math.ceil(arrHotpots.length / hotpotsPerPage) },\r\n                    (_, i) => (\r\n                      <button\r\n                        key={i}\r\n                        className={i + 1 === currentPage ? \"active\" : \"\"}\r\n                        onClick={() => this.setState({ currentPage: i + 1 })}\r\n                      >\r\n                        {i + 1}\r\n                      </button>\r\n                    )\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n    topHotpotsRedux: state.admin.topHotpots,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loadTopHotpots: () => dispatch(actions.fetchTopHotpot()),\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Hotpot));\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\HandBook.js",["385"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Slider from \"react-slick\";\r\n\r\nclass HandBook extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"section-share section-handbook\">\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <span className=\"title-section\">Sắc màu Ẩm thực</span>\r\n            <button className=\"btn-section\">Xem thêm</button>\r\n          </div>\r\n          <div className=\"section-body\">\r\n            <Slider {...this.props.settings}>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 1</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 2</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 3</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 4</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 5</div>\r\n              </div>\r\n              <div className=\"section-customize\">\r\n                <div className=\"bg-image section-handbook\" />\r\n                <div>Ẩm thực 6</div>\r\n              </div>\r\n            </Slider>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HandBook);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\Section\\Video.js",["386"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass Video extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"video-section\" className=\"section-share section-video \">\r\n        <div className=\"section-video-header\">Khám phá</div>\r\n        <div className=\"section-video-content\">\r\n          <div className=\"content-left\">\r\n            <iframe\r\n              width=\"100%\"\r\n              height=\"400px\"\r\n              src=\"https://www.youtube.com/embed/zXAqw0Vzr4w\"\r\n              title=\"Nothing you can’t solve with a traditional Sichuan hot pot这世界上没有什么事情是一顿地道老四川火锅解决不了的|Liziqi channel\"\r\n              frameBorder=\"0\"\r\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n              allowFullScreen\r\n            ></iframe>\r\n          </div>\r\n          <div className=\"content-right\">\r\n            <p>\r\n              It's so cold outside, let's place a traditional Sichuan hot pot at\r\n              our website! The boiling red soup brings all the trouble away, it\r\n              warms your heart and stomach. There's nothing you can't solve with\r\n              our Sichuan hot pot!\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\HomePage\\HomeFooter.js",["387","388"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass HomeFooter extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"about-us\" className=\"home-footer\">\r\n        <div>\r\n          Contact Details\r\n          <p>Phone: 0123456789</p>\r\n          <p>Email: info@hotpot.com</p>\r\n          <p>Address: 1st Dai Co Viet, Hai Ba Trung, Ha Noi</p>\r\n        </div>\r\n        <p>\r\n          &copy; 2023 EXOL. More information, please visit my facebook.\r\n          <a target=\"_blank\" href=\"https://www.facebook.com/weareoneEXO\">\r\n            &#8594; Click here &#8592;\r\n          </a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\HotpotRedux.js",["389","390","391","392","393","394","395","396"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from \"../../../utils\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport \"./HotpotRedux.scss\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport \"react-image-lightbox/style.css\";\r\nimport TableManageHotpot from \"./TableManageHotpot\";\r\nimport { getAllRestaurantNamesService } from \"../../../services/hotpotService\";\r\nclass HotpotRedux extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      provinceArr: [],\r\n      priceArr: [],\r\n      paymentArr: [],\r\n      previewImgURL: \"\",\r\n      isOpen: false,\r\n      name: \"\",\r\n      phonenumber: \"\",\r\n      provinceId: \"\",\r\n      restaurantId: \"\",\r\n      typeId: \"\",\r\n      priceId: \"\",\r\n      paymentId: \"\",\r\n      note: \"\",\r\n      image: \"\",\r\n      action: \"\",\r\n      hotpotEditId: \"\",\r\n      listRestaurantNames: [],\r\n      //restaurantAddress:[],\r\n      listTypeNames: [],\r\n      staffId: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.props.getPriceStart();\r\n    this.props.getPaymentStart();\r\n    this.props.getProvinceStart();\r\n    this.props.fetchAllRestaurantNames();\r\n    this.props.fetchAllTypeNames();\r\n    this.props.fetchAllHotpotNames();\r\n    // try {\r\n    //   let res = await getAllCodeService(\"province\");\r\n    //   console.log(\"check provine\", res);\r\n    //   if (res && res.errCode === 0) {\r\n    //     this.setState({\r\n    //       provinceArr: res.data,\r\n    //     });\r\n    //   }\r\n    // } catch (e) {\r\n    //   console.log(e);\r\n    // }\r\n  }\r\n\r\n  // sau khi render chay se goi den ham componentDidUpdate\r\n  //hàm componentDidUpdate so sánh hiện tại (this) và quá khứ (prev) của provinceRedux\r\n  // quá khứ là chưa fire event, hiện tại là đã fire event\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.priceRedux !== this.props.priceRedux) {\r\n      let arrPrices = this.props.priceRedux;\r\n      this.setState({\r\n        priceArr: arrPrices,\r\n        priceId: arrPrices && arrPrices.length > 0 ? arrPrices[0].keyMap : \"\",\r\n      });\r\n    }\r\n    if (prevProps.paymentRedux !== this.props.paymentRedux) {\r\n      let arrPayments = this.props.paymentRedux;\r\n      this.setState({\r\n        paymentArr: arrPayments,\r\n        paymentId:\r\n          arrPayments && arrPayments.length > 0 ? arrPayments[0].keyMap : \" \",\r\n      });\r\n    }\r\n    if (prevProps.provinceRedux !== this.props.provinceRedux) {\r\n      let arrProvinces = this.props.provinceRedux;\r\n      this.setState({\r\n        provinceArr: arrProvinces,\r\n        provinceId:\r\n          arrProvinces && arrProvinces.length > 0 ? arrProvinces[0].keyMap : \"\",\r\n      });\r\n    }\r\n\r\n    if (prevProps.allRestaurantNames !== this.props.allRestaurantNames) {\r\n      let arrRestaurantNames = this.props.allRestaurantNames;\r\n      this.setState({\r\n        listRestaurantNames: arrRestaurantNames,\r\n        restaurantId:\r\n          arrRestaurantNames && arrRestaurantNames.length > 0\r\n            ? arrRestaurantNames[0].id\r\n            : \"\",\r\n      });\r\n    }\r\n    if (prevProps.allTypeNames !== this.props.allTypeNames) {\r\n      let arrTypeNames = this.props.allTypeNames;\r\n      this.setState({\r\n        listTypeNames: arrTypeNames,\r\n        typeId:\r\n          arrTypeNames && arrTypeNames.length > 0 ? arrTypeNames[0].id : \"\",\r\n      });\r\n    }\r\n    if (prevProps.listHotpots !== this.props.listHotpots) {\r\n      let arrProvinces = this.props.provinceRedux;\r\n      let arrPayments = this.props.paymentRedux;\r\n      let arrPrices = this.props.priceRedux;\r\n      let arrRestaurantNames = this.props.allRestaurantNames;\r\n      let arrTypeNames = this.props.allTypeNames;\r\n      this.setState({\r\n        name: \"\",\r\n        phonenumber: \"\",\r\n        note: \"\",\r\n        //image: \"\",\r\n        provinceId:\r\n          arrProvinces && arrProvinces.length > 0 ? arrProvinces[0].keyMap : \"\",\r\n        paymentId:\r\n          arrPayments && arrPayments.length > 0 ? arrPayments[0].keyMap : \" \",\r\n        priceId: arrPrices && arrPrices.length > 0 ? arrPrices[0].keyMap : \"\",\r\n        restaurantId:\r\n          arrRestaurantNames && arrRestaurantNames.length > 0\r\n            ? arrRestaurantNames[0].id\r\n            : \"\",\r\n        typeId:\r\n          arrTypeNames && arrTypeNames.length > 0 ? arrTypeNames[0].id : \"\",\r\n        action: CRUD_ACTIONS.CREATE,\r\n        previewImgURL: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        image: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveHotpot = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === false) return;\r\n    let { action } = this.state;\r\n    //let action = this.state.action\r\n    //fire redux create hotpot\r\n    if (action === CRUD_ACTIONS.CREATE) {\r\n      this.props.createNewHotpot({\r\n        name: this.state.name,\r\n        phonenumber: this.state.phonenumber,\r\n        priceId: this.state.priceId,\r\n        provinceId: this.state.provinceId,\r\n        paymentId: this.state.paymentId,\r\n        typeId: this.state.typeId,\r\n        restaurantId: this.state.restaurantId,\r\n        note: this.state.note,\r\n        image: this.state.image,\r\n        staffId: this.state.staffId,\r\n      });\r\n    }\r\n    if (action === CRUD_ACTIONS.EDIT) {\r\n      //Fire redux edit hotpot\r\n      this.props.editHotpotRedux({\r\n        id: this.state.hotpotEditId,\r\n        name: this.state.name,\r\n        phonenumber: this.state.phonenumber,\r\n        priceId: this.state.priceId,\r\n        provinceId: this.state.provinceId,\r\n        paymentId: this.state.paymentId,\r\n        typeId: this.state.typeId,\r\n        restaurantId: this.state.restaurantId,\r\n        note: this.state.note,\r\n        image: this.state.image,\r\n        staffId: this.state.staffId,\r\n      });\r\n    }\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrCheck = [\r\n      \"name\",\r\n      //\"phonenumber\",\r\n      \"provinceId\",\r\n      \"restaurantId\",\r\n      \"typeId\",\r\n      \"priceId\",\r\n      \"paymentId\",\r\n      //\"note\",\r\n    ];\r\n    for (let i = 0; i < arrCheck.length; i++) {\r\n      if (!this.state[arrCheck[i]]) {\r\n        isValid = false;\r\n        alert(\"This input is required: \" + arrCheck[i]);\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  onChangeInput = (event, id) => {\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    let imageBase64 = \"\";\r\n    if (hotpot.image) {\r\n      imageBase64 = new Buffer(hotpot.image, \"base64\").toString(\"binary\");\r\n    }\r\n    this.setState({\r\n      name: hotpot.name,\r\n      phonenumber: hotpot.phonenumber,\r\n      restaurantId: hotpot.restaurantId,\r\n      typeId: hotpot.typeId,\r\n      note: hotpot.note,\r\n      image: \"\",\r\n      previewImgURL: imageBase64,\r\n      provinceId: hotpot.provinceId,\r\n      paymentId: hotpot.paymentId,\r\n      priceId: hotpot.priceId,\r\n      action: CRUD_ACTIONS.EDIT,\r\n      hotpotEditId: hotpot.id,\r\n      staffId: hotpot.staffId,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let language = this.props.language;\r\n    let isLoadingProvince = this.props.isLoadingProvince;\r\n    let provinces = this.state.provinceArr;\r\n    let prices = this.state.priceArr;\r\n    let payments = this.state.paymentArr;\r\n    let restaurantNames = this.state.listRestaurantNames;\r\n    let typeNames = this.state.listTypeNames;\r\n\r\n    let {\r\n      name,\r\n      phonenumber,\r\n      provinceId,\r\n      restaurantId,\r\n      typeId,\r\n      priceId,\r\n      paymentId,\r\n      note,\r\n      image,\r\n      staffId,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"hotpot-redux-container\">\r\n        <div className=\"title\">MANAGE RESTAURANT</div>\r\n        <div className=\"hotpot-redux-body\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 my-3\">\r\n                <b>\r\n                  <FormattedMessage id=\"manage-hotpot.add\" />\r\n                </b>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                {isLoadingProvince === true ? \"Loading province\" : \"\"}\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.name\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={name}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"name\");\r\n                  }}\r\n                  // dùng disabled để khi edit không cho phép chỉnh sửa trường này\r\n                  // disabled={\r\n                  //   this.state.action === CRUD_ACTIONS.EDIT ? true : false\r\n                  // }\r\n                />\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  {/* <FormattedMessage id=\"manage-hotpot.phone-number\" /> */}\r\n                  Staff ID\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={staffId}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"staffId\");\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              {/* <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.restaurantId\" />\r\n                </label>\r\n\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={restaurantId}\r\n                >\r\n                  {restaurantNames &&\r\n                    restaurantNames.length > 0 &&\r\n                    restaurantNames.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.id}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.typeId\" />\r\n                </label>\r\n\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"typeId\");\r\n                  }}\r\n                  value={typeId}\r\n                >\r\n                  {typeNames &&\r\n                    typeNames.length > 0 &&\r\n                    typeNames.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.id}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div> */}\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.provinceId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"provinceId\");\r\n                  }}\r\n                  value={provinceId}\r\n                >\r\n                  {provinces &&\r\n                    provinces.length > 0 &&\r\n                    provinces.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.priceId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"priceId\");\r\n                  }}\r\n                  value={priceId}\r\n                >\r\n                  {prices &&\r\n                    prices.length > 0 &&\r\n                    prices.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.paymentId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"paymentId\");\r\n                  }}\r\n                  value={paymentId}\r\n                >\r\n                  {payments &&\r\n                    payments.length > 0 &&\r\n                    payments.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              {/* <div className=\"col-8\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.note\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={note}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"note\");\r\n                  }}\r\n                />\r\n              </div> */}\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.image\" />\r\n                </label>\r\n                <div className=\"preview-img-container\">\r\n                  <input\r\n                    id=\"previewImg\"\r\n                    type=\"file\"\r\n                    hidden\r\n                    onChange={(event) => this.handleOnChangeImage(event)}\r\n                  />\r\n                  <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                    Upload image <i className=\"fas fa-upload\"></i>\r\n                  </label>\r\n                  <div\r\n                    className=\"preview-image\"\r\n                    style={{\r\n                      backgroundImage: `url(${this.state.previewImgURL})`,\r\n                    }}\r\n                    onClick={() => this.openPreviewImage()}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-12 my-3\">\r\n                <button\r\n                  className={\r\n                    this.state.action === CRUD_ACTIONS.EDIT\r\n                      ? \"btn btn-warning\"\r\n                      : \"btn btn-primary\"\r\n                  }\r\n                  onClick={() => this.handleSaveHotpot()}\r\n                >\r\n                  {this.state.action === CRUD_ACTIONS.EDIT ? (\r\n                    <FormattedMessage id=\"manage-hotpot.edit\" />\r\n                  ) : (\r\n                    <FormattedMessage id=\"manage-hotpot.save\" />\r\n                  )}\r\n                </button>\r\n              </div>\r\n              <div className=\"col-12 mb-5 \">\r\n                <TableManageHotpot\r\n                  handleEditHotpot={this.handleEditHotpot}\r\n                  action={this.state.action}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n\r\n    priceRedux: state.admin.prices,\r\n    paymentRedux: state.admin.payments,\r\n    provinceRedux: state.admin.provinces,\r\n    allRestaurantNames: state.admin.allRestaurantNames,\r\n    allTypeNames: state.admin.allTypeNames,\r\n    isLoadingProvince: state.admin.isLoadingProvince,\r\n    listHotpots: state.admin.hotpots,\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getPriceStart: () => dispatch(actions.fetchPriceStart()),\r\n    getPaymentStart: () => dispatch(actions.fetchPaymentStart()),\r\n    getProvinceStart: () => dispatch(actions.fetchProvinceStart()),\r\n    createNewHotpot: (data) => dispatch(actions.createNewHotpot(data)),\r\n    fetchHotpotsRedux: () => dispatch(actions.fetchAllHotpotsStart()),\r\n    editHotpotRedux: (data) => dispatch(actions.editHotpot(data)),\r\n    fetchAllRestaurantNames: () => dispatch(actions.fetchAllRestaurantNames()),\r\n    fetchAllTypeNames: () => dispatch(actions.fetchAllTypeNames()),\r\n    // processLogout: () => dispatch(actions.processLogout()),\r\n    // changeLanguageAppRedux: (language) =>\r\n    //   dispatch(actions.changeLanguageApp(language)),\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotRedux);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\UserRedux.js",["397"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nclass UserRedux extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user-redux-container\">\r\n        <div className=\"title\">UserRedux LINHHHHH</div>\r\n        <div className=\"user-redux-body\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <form>\r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-md-6\">\r\n                    <label for=\"inputEmail4\">Email</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      class=\"form-control\"\r\n                      id=\"inputEmail4\"\r\n                      placeholder=\"Email\"\r\n                    />\r\n                  </div>\r\n                  <div class=\"form-group col-md-6\">\r\n                    <label for=\"inputPassword4\">Password</label>\r\n                    <input\r\n                      type=\"password\"\r\n                      class=\"form-control\"\r\n                      id=\"inputPassword4\"\r\n                      placeholder=\"Password\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"inputAddress\">Address</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    id=\"inputAddress\"\r\n                    placeholder=\"1234 Main St\"\r\n                  />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"inputAddress2\">Address 2</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    id=\"inputAddress2\"\r\n                    placeholder=\"Apartment, studio, or floor\"\r\n                  />\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-md-6\">\r\n                    <label for=\"inputCity\">City</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"inputCity\" />\r\n                  </div>\r\n                  <div class=\"form-group col-md-4\">\r\n                    <label for=\"inputState\">State</label>\r\n                    <select id=\"inputState\" class=\"form-control\">\r\n                      <option selected>Choose...</option>\r\n                      <option>...</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"form-group col-md-2\">\r\n                    <label for=\"inputZip\">Zip</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"inputZip\" />\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <div class=\"form-check\">\r\n                    <input\r\n                      class=\"form-check-input\"\r\n                      type=\"checkbox\"\r\n                      id=\"gridCheck\"\r\n                    />\r\n                    <label class=\"form-check-label\" for=\"gridCheck\">\r\n                      Check me out\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">\r\n                  Sign in\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\actions\\adminActions.js",["398"],"import actionTypes from \"./actionTypes\";\r\nimport {\r\n  getAllCodeService,\r\n  createNewHotpotService,\r\n  getAllHotpots,\r\n  deleteHotpotService,\r\n  editHotpotService,\r\n  getTopHotpotService,\r\n  getAllHotpotNameServices,\r\n  saveDetailHotpotService,\r\n  getAllTypeNamesService,\r\n  getAllRestaurantNamesService,\r\n} from \"../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// export const fetchProvinceStart = () => ({\r\n//   type: actionTypes.FETCH_PROVINCE_START,\r\n// });\r\n\r\n//provine\r\nexport const fetchProvinceStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PROVINCE_START,\r\n      });\r\n      let res = await getAllCodeService(\"PROVINCE\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchProvinceSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchProvinceFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchProvinceFailed());\r\n      console.log(\"fetchProvinceStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchProvinceSuccess = (provinceData) => ({\r\n  type: actionTypes.FETCH_PROVINCE_SUCCESS,\r\n  data: provinceData,\r\n});\r\n\r\nexport const fetchProvinceFailed = () => ({\r\n  type: actionTypes.FETCH_PROVINCE_FAILED,\r\n});\r\n\r\n//price\r\n\r\nexport const fetchPriceSuccess = (priceData) => ({\r\n  type: actionTypes.FETCH_PRICE_SUCCESS,\r\n  data: priceData,\r\n});\r\n\r\nexport const fetchPriceFailed = () => ({\r\n  type: actionTypes.FETCH_PRICE_FAILED,\r\n});\r\n\r\n//payment\r\n\r\nexport const fetchPaymentSuccess = (paymentData) => ({\r\n  type: actionTypes.FETCH_PAYMENT_SUCCESS,\r\n  data: paymentData,\r\n});\r\n\r\nexport const fetchPaymentFailed = () => ({\r\n  type: actionTypes.FETCH_PAYMENT_FAILED,\r\n});\r\n\r\nexport const fetchPriceStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PRICE_START,\r\n      });\r\n      let res = await getAllCodeService(\"PRICE\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchPriceSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchPriceFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchPriceFailed());\r\n      console.log(\"fetchPriceStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchPaymentStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PAYMENT_START,\r\n      });\r\n      let res = await getAllCodeService(\"PAYMENT\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchPaymentSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchPaymentFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchPaymentFailed());\r\n      console.log(\"fetchPaymentStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllRestaurantNames = () => {\r\n  console.log(\"FETCH_ error1\");\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      console.log(\"FETCH_ error____\");\r\n      let res = await getAllRestaurantNamesService();\r\n      if (res && res.errCode === 0) {\r\n        console.log(\"FETCH_ error2\");\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_SUCCESS,\r\n          dataRestaurantNames: res.data,\r\n        });\r\n      } else {\r\n        console.log(\"FETCH_ error3\");\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_RESTAURANT_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllTypeNames = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllTypeNamesService();\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_SUCCESS,\r\n          dataTypeNames: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_TYPE_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const createNewHotpot = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await createNewHotpotService(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Create a new hotpot succeed!\");\r\n        dispatch(createHotpotSuccess());\r\n        dispatch(fetchAllHotpotsStart());\r\n      } else {\r\n        toast.error(\"Create a new hotpot error!\");\r\n        dispatch(createHotpotFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(createHotpotFailed());\r\n      console.log(\"createNewHotpot error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createHotpotFailed = () => ({\r\n  type: actionTypes.CREATE_HOTPOT_FAILED,\r\n});\r\n\r\nexport const createHotpotSuccess = () => ({\r\n  type: actionTypes.CREATE_HOTPOT_SUCCESS,\r\n});\r\n\r\nexport const fetchAllHotpotsStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PROVINCE_START,\r\n      });\r\n      let res = await getAllHotpots(\"ALL\");\r\n      let res1 = await getTopHotpotService(\"\");\r\n      console.log(\"check res get top hotpot res:\", res);\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchAllHotpotsSuccess(res.hotpots.hotpots.reverse()));\r\n      } else {\r\n        dispatch(fetchAllHotpotsFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchAllHotpotsFailed());\r\n      console.log(\"fetchAllHotpotsStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllHotpotsFailed = () => ({\r\n  type: actionTypes.FETCH_ALL_HOTPOTS_FAILED,\r\n});\r\n\r\nexport const fetchAllHotpotsSuccess = (data) => ({\r\n  type: actionTypes.FETCH_ALL_HOTPOTS_SUCCESS,\r\n  hotpots: data,\r\n});\r\n\r\nexport const deleteHotpot = (hotpotId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await deleteHotpotService(hotpotId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Delete the hotpot succeed!\");\r\n        dispatch(deleteHotpotSuccess());\r\n        dispatch(fetchAllHotpotsStart());\r\n      } else {\r\n        toast.error(\"Delete the hotpot error!\");\r\n        dispatch(deleteHotpotFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(deleteHotpotFailed());\r\n      console.log(\"deleteHotpot error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteHotpotFailed = () => ({\r\n  type: actionTypes.DELETE_HOTPOT_FAILED,\r\n});\r\n\r\nexport const deleteHotpotSuccess = (data) => ({\r\n  type: actionTypes.DELETE_HOTPOT_SUCCESS,\r\n  hotpots: data,\r\n});\r\n\r\nexport const editHotpot = (hotpotId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await editHotpotService(hotpotId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"edit the hotpot succeed!\");\r\n        dispatch(editHotpotSuccess());\r\n        dispatch(fetchAllHotpotsStart());\r\n      } else {\r\n        toast.error(\"edit the hotpot error!\");\r\n        dispatch(editHotpotFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(editHotpotFailed());\r\n      console.log(\"editHotpot error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editHotpotFailed = () => ({\r\n  type: actionTypes.DELETE_HOTPOT_FAILED,\r\n});\r\n\r\nexport const editHotpotSuccess = (data) => ({\r\n  type: actionTypes.DELETE_HOTPOT_SUCCESS,\r\n  hotpots: data,\r\n});\r\n\r\nexport const fetchTopHotpot = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getTopHotpotService(\"1000\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_TOP_HOTPOT_SUCCESS,\r\n          dataHotpots: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_TOP_HOTPOT_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_TOP_HOTPOT_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_TOP_HOTPOT_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllHotpotNames = () => {\r\n  console.log(\"FETCH_ hotpo1\");\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      console.log(\"FETCH_ hotpo2\");\r\n      let res = await getAllHotpotNameServices();\r\n      if (res && res.errCode === 0) {\r\n        console.log(\"FETCH_ hotpo3\");\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_HOTPOT_NAMES_SUCCESS,\r\n          dataHotpotNames: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_HOTPOT_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_HOTPOT_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_HOTPOT_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveDetailHotpot = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await saveDetailHotpotService(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Save info detail hotpot succeed!\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_HOTPOT_SUCCESS,\r\n        });\r\n      } else {\r\n        console.log(\"error res linh\", res);\r\n        toast.error(\"Save info detail hotpot error!\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_HOTPOT_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Save info detail hotpot error!\");\r\n      console.log(\"SAVE_DETAIL_HOTPOT_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FSAVE_DETAIL_HOTPOT_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllCodeService(\"TIME\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\r\n          dataTime: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALLCODE_SCHEDULE_TIME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\store\\reducers\\adminReducer.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\TableManageHotpot.js",["399","400","401","402"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./TableManageHotpot.scss\";\r\nimport * as actions from \"../../../store/actions\";\r\n\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\n// import style manually\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\n\r\n// Register plugins if required\r\n// MdEditor.use(YOUR_PLUGINS_HERE);\r\n\r\n// Initialize a markdown parser\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n// Finish!\r\nfunction handleEditorChange({ html, text }) {\r\n  console.log(\"handleEditorChange\", html, text);\r\n}\r\n\r\nclass TableManageHotpot extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class TableManageHotpot này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hotpotsRedux: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchHotpotRedux();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.listHotpots !== this.props.listHotpots) {\r\n      this.setState({\r\n        hotpotsRedux: this.props.listHotpots,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleDeleteHotpot = (hotpot) => {\r\n    this.props.deleteHotpotRedux(hotpot.id);\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    this.props.handleEditHotpot(hotpot);\r\n  };\r\n\r\n  render() {\r\n    let arrHotpots = this.state.hotpotsRedux;\r\n    return (\r\n      <React.Fragment>\r\n        <table id=\"TableManageHotpot\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>ProvinceId</th>\r\n              <th>Staff Id</th>\r\n              {/* <th>Restaurant Id</th>\r\n              <th>Type Id</th> */}\r\n              <th>PriceId</th>\r\n              {/* <th>Note</th> */}\r\n              <th>PaymentId</th>\r\n              <th>Action</th>\r\n            </tr>\r\n\r\n            {arrHotpots &&\r\n              arrHotpots.length > 0 &&\r\n              arrHotpots.map((item, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.provinceId}</td>\r\n                    <td>{item.staffId}</td>\r\n                    {/* <td>{item.restaurantId}</td>\r\n                    <td>{item.typeId}</td> */}\r\n                    <td>{item.priceId}</td>\r\n                    {/* <td>{item.note}</td> */}\r\n                    <td>{item.paymentId}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => this.handleEditHotpot(item)}\r\n                        className=\"btn-edit\"\r\n                      >\r\n                        <i className=\"fas fa-pencil-alt\"></i>\r\n                      </button>\r\n                      <button\r\n                        onClick={() => this.handleDeleteHotpot(item)}\r\n                        className=\"btn-delete\"\r\n                      >\r\n                        <i className=\"fas fa-trash\"></i>\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </table>\r\n        {/* <MdEditor\r\n          style={{ height: \"500px\" }}\r\n          renderHTML={(text) => mdParser.render(text)}\r\n          onChange={handleEditorChange}\r\n        /> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    listHotpots: state.admin.hotpots,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchHotpotRedux: () => dispatch(actions.fetchAllHotpotsStart()),\r\n    deleteHotpotRedux: (id) => dispatch(actions.deleteHotpot(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\DetailHotpot.js",["403","404","405","406"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport \"./DetailHotpot.scss\";\r\nimport { getDetailInfoHotpot } from \"../../../services/hotpotService\";\r\nimport HotpotSchedule from \"./HotpotSchedule\";\r\nimport HotpotExtraInfo from \"./HotpotExtraInfo\";\r\nimport Slider from \"react-slick\";\r\nclass DetailHotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      detailHotpot: {},\r\n      currentHotpotId: -1,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n      this.setState({\r\n        currentHotpotId: id,\r\n      });\r\n      let res = await getDetailInfoHotpot(id);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          detailHotpot: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  render() {\r\n    let { language } = this.props;\r\n    let { detailHotpot } = this.state;\r\n    let name = \"\";\r\n    let hpHotpot = detailHotpot.hpHotpot;\r\n    name = `${detailHotpot.name}`;\r\n    return (\r\n      <>\r\n        <HomeHeader isShowBanner={false} />\r\n        <div className=\"hotpot-detail-container\">\r\n          <Slider {...this.props.settings}>\r\n            {hpHotpot &&\r\n              hpHotpot.length > 0 &&\r\n              hpHotpot.map((item, index) => {\r\n                let imageBase64 = \"\";\r\n                if (item.image) {\r\n                  imageBase64 = new Buffer(item.image, \"base64\").toString(\r\n                    \"binary\"\r\n                  );\r\n                }\r\n                return (\r\n                  <div\r\n                    className=\"section-customize restaurant-child\"\r\n                    key={index}\r\n                    onClick={() => this.handleViewDetailRestaurant(item)}\r\n                  >\r\n                    <div\r\n                      className=\"bg-image section-type\"\r\n                      style={{\r\n                        backgroundImage: `url(${imageBase64})`,\r\n                      }}\r\n                    />\r\n                    <div className=\"restaurant-name\">{item.name}</div>\r\n                  </div>\r\n                );\r\n              })}\r\n          </Slider>\r\n          {/* <div className=\"intro-hotpot\">\r\n            <div\r\n              className=\"content-left\"\r\n              style={{\r\n                backgroundImage: `url(${\r\n                  detailHotpot && detailHotpot.image ? detailHotpot.image : \"\"\r\n                })`,\r\n              }}\r\n            ></div>\r\n            <div className=\"content-right\">\r\n              <div className=\"up\">{name}</div>\r\n              <div className=\"down\">\r\n                {detailHotpot &&\r\n                  detailHotpot.Markdown &&\r\n                  detailHotpot.Markdown.description && (\r\n                    <span>{detailHotpot.Markdown.description}</span>\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"schedule-hotpot\">\r\n            <div className=\"content-left\">\r\n              <HotpotSchedule hotpotIdFromParent={this.state.currentHotpotId} />\r\n            </div>\r\n            <div className=\"content-right\">\r\n              <HotpotExtraInfo\r\n                hotpotIdFromParent={this.state.currentHotpotId}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"detail-info-hotpot\">\r\n            {detailHotpot &&\r\n              detailHotpot.Markdown &&\r\n              detailHotpot.Markdown.contentHTML && (\r\n                <div\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: detailHotpot.Markdown.contentHTML,\r\n                  }}\r\n                ></div>\r\n              )}\r\n          </div>\r\n          <div className=\"comment-hotpot\"></div> */}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ManageSchedule.js",["407","408","409","410","411","412","413","414","415"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport \"./ManageSchedule.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Select from \"react-select\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from \"../../../utils\";\r\nimport DatePicker from \"../../../components/Input/DatePicker\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport _, { result } from \"lodash\";\r\nimport { saveBulkScheduleHotpot } from \"../../../services/hotpotService\";\r\nclass ManageSchedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listHotpotNames: [],\r\n      selectedHotpot: {},\r\n      currentDate: \"\",\r\n      rangeTime: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAllHotpotNames();\r\n    this.props.fetchAllScheduleTime();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allHotpotNames !== this.props.allHotpotNames) {\r\n      let dataSelect = this.buildDataInputSelect(this.props.allHotpotNames);\r\n      this.setState({\r\n        listHotpotNames: dataSelect,\r\n      });\r\n    }\r\n    if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n      let data = this.props.allScheduleTime;\r\n      if (data && data.length > 0) {\r\n        data = data.map((item) => ({ ...item, isSelected: false }));\r\n      }\r\n      this.setState({\r\n        rangeTime: data,\r\n      });\r\n    }\r\n  }\r\n\r\n  buildDataInputSelect = (inputData) => {\r\n    let result = [];\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        let object = {};\r\n        object.label = `${item.name}`;\r\n        object.value = item.id;\r\n        result.push(object);\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  handleChangeSelect = async (selectedHotpot) => {\r\n    this.setState({ selectedHotpot });\r\n  };\r\n\r\n  handleOnChangeDatePicker = (date) => {\r\n    this.setState({\r\n      currentDate: date[0],\r\n    });\r\n  };\r\n  handleClickTimeBtn = (time) => {\r\n    let { rangeTime } = this.state;\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      rangeTime = rangeTime.map((item) => {\r\n        if (item.id === time.id) {\r\n          item.isSelected = !item.isSelected;\r\n        }\r\n        return item;\r\n      });\r\n      this.setState({\r\n        rangeTime: rangeTime,\r\n      });\r\n    }\r\n  };\r\n\r\n  //_.isEmpty(selectedHotpot) tra ve true khi object rỗng\r\n\r\n  handleSaveSchedule = async () => {\r\n    let { rangeTime, selectedHotpot, currentDate } = this.state;\r\n    let result = [];\r\n    if (!currentDate) {\r\n      toast.error(\"Invalid date!\");\r\n      return;\r\n    }\r\n    if (selectedHotpot && _.isEmpty(selectedHotpot)) {\r\n      toast.error(\"Invalid selected hotpot!\");\r\n      return;\r\n    }\r\n    let formatedDate = new Date(currentDate).getTime();\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      let selectedTime = rangeTime.filter((item) => item.isSelected === true);\r\n      selectedTime.map((schedule) => {\r\n        let object = {};\r\n        object.hotpotId = selectedHotpot.value;\r\n        object.date = formatedDate;\r\n        object.timeType = schedule.keyMap;\r\n        result.push(object);\r\n      });\r\n    } else {\r\n      toast.error(\"Invalid selected time!\");\r\n      return;\r\n    }\r\n    let res = await saveBulkScheduleHotpot({\r\n      arrSchedule: result,\r\n      hotpotId: selectedHotpot.value,\r\n      formatedDate: formatedDate,\r\n    });\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Save info successfully!\");\r\n    } else {\r\n      toast.error(\"error saveBulkScheduleHotpot\");\r\n      console.log(\"error saveBulkScheduleHotpot >>> res:\", res);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { rangeTime } = this.state;\r\n    let { language } = this.props;\r\n    let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n    return (\r\n      <div className=\"manage-schedule-container\">\r\n        <div className=\"manage-schedule-title\">\r\n          <FormattedMessage id=\"manage-schedule.title\" />\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-6 form-group\">\r\n              <label>\r\n                {/* <FormattedMessage id=\"manage-schedule.choose-hotpot\" /> */}\r\n                Chọn nhà hàng\r\n              </label>\r\n              <Select\r\n                value={this.state.selectedHotpot}\r\n                onChange={this.handleChangeSelect}\r\n                options={this.state.listHotpotNames}\r\n              />\r\n            </div>\r\n            <div className=\"col-6 form-group\">\r\n              <label>\r\n                <FormattedMessage id=\"manage-schedule.choose-date\" />\r\n              </label>\r\n              <DatePicker\r\n                onChange={this.handleOnChangeDatePicker}\r\n                className=\"form-control\"\r\n                value={this.state.currentDate}\r\n                minDate={yesterday}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 pick-hour-container\">\r\n              {rangeTime &&\r\n                rangeTime.length > 0 &&\r\n                rangeTime.map((item, index) => {\r\n                  return (\r\n                    <button\r\n                      button\r\n                      className={\r\n                        item.isSelected === true\r\n                          ? \"btn btn-schedule active\"\r\n                          : \"btn btn-schedule\"\r\n                      }\r\n                      key={index}\r\n                      onClick={() => this.handleClickTimeBtn(item)}\r\n                    >\r\n                      {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                    </button>\r\n                  );\r\n                })}\r\n            </div>\r\n            <div className=\"col-12\">\r\n              <button\r\n                className=\"btn btn-primary btn-save-schedule\"\r\n                onClick={() => this.handleSaveSchedule()}\r\n              >\r\n                <FormattedMessage id=\"manage-schedule.save\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n    language: state.app.language,\r\n    allScheduleTime: state.admin.allScheduleTime,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n    fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Input\\DatePicker.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\components\\Formating\\FormattedDate.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotSchedule.js",["416","417"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotSchedule.scss\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment\";\r\nimport localization from \"moment/locale/vi\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport { getScheduleHotpotByDate } from \"../../../services/hotpotService\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport BookingModal from \"./Modal/BookingModal\";\r\n\r\nclass HotpotSchedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allDays: [],\r\n      allAvailableTime: [],\r\n      isOpenModalBooking: false,\r\n      dataScheduleTimeModal: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let { language } = this.props;\r\n    let allDays = this.getArrDays(language);\r\n\r\n    if (this.props.hotpotIdFromParent) {\r\n      let res = await getScheduleHotpotByDate(\r\n        this.props.hotpotIdFromParent,\r\n        allDays[0].value\r\n      );\r\n      this.setState({\r\n        allAvailableTime: res.data ? res.data : [],\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      allDays: allDays,\r\n    });\r\n  }\r\n\r\n  capitalizeFisrtLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  getArrDays = (language) => {\r\n    let allDays = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      let object = {};\r\n      if (language === LANGUAGES.VI) {\r\n        if (i === 0) {\r\n          let ddMM = moment(new Date()).format(\"DD/MM\");\r\n          let today = `Hôm nay - ${ddMM}`;\r\n          object.label = today;\r\n        } else {\r\n          let labelVi = moment(new Date())\r\n            .add(i, \"days\")\r\n            .format(\"dddd - DD/MM\");\r\n          object.label = this.capitalizeFisrtLetter(labelVi);\r\n        }\r\n      } else {\r\n        if (i === 0) {\r\n          let ddMM = moment(new Date()).format(\"DD/MM\");\r\n          let today = `Today - ${ddMM}`;\r\n          object.label = today;\r\n        } else {\r\n          object.label = moment(new Date())\r\n            .add(i, \"days\")\r\n            .locale(\"en\")\r\n            .format(\"dddd - DD/MM\");\r\n        }\r\n      }\r\n      object.value = moment(new Date()).add(i, \"days\").startOf(\"day\").valueOf();\r\n      allDays.push(object);\r\n    }\r\n    return allDays;\r\n  };\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.language !== prevProps.language) {\r\n      let allDays = this.getArrDays(this.props.language);\r\n      this.setState({\r\n        allDays: allDays,\r\n      });\r\n    }\r\n    if (this.props.hotpotIdFromParent !== prevProps.hotpotIdFromParent) {\r\n      let allDays = this.getArrDays(this.props.language);\r\n      let res = await getScheduleHotpotByDate(\r\n        this.props.hotpotIdFromParent,\r\n        allDays[0].value\r\n      );\r\n      this.setState({\r\n        allAvailableTime: res.data ? res.data : [],\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOnChangeSelect = async (event) => {\r\n    if (this.props.hotpotIdFromParent && this.props.hotpotIdFromParent !== -1) {\r\n      let hotpotId = this.props.hotpotIdFromParent;\r\n      let date = event.target.value;\r\n      let res = await getScheduleHotpotByDate(hotpotId, date);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          allAvailableTime: res.data ? res.data : [],\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClickScheduleTime = (time) => {\r\n    this.setState({\r\n      isOpenModalBooking: true,\r\n      dataScheduleTimeModal: time,\r\n    });\r\n  };\r\n\r\n  closeBookingModal = () => {\r\n    this.setState({\r\n      isOpenModalBooking: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      allDays,\r\n      allAvailableTime,\r\n      isOpenModalBooking,\r\n      dataScheduleTimeModal,\r\n    } = this.state;\r\n    let { language } = this.props;\r\n    return (\r\n      <>\r\n        <div className=\"hotpot-schedule-container\">\r\n          <div className=\"all-schedule\">\r\n            <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n              {allDays &&\r\n                allDays.length > 0 &&\r\n                allDays.map((item, index) => {\r\n                  return (\r\n                    <option value={item.value} key={index}>\r\n                      {item.label}\r\n                    </option>\r\n                  );\r\n                })}\r\n            </select>\r\n          </div>\r\n          <div className=\"all-available-time\">\r\n            <div className=\"text-calender\">\r\n              <i className=\"fa fa-calendar\" aria-hidden=\"true\">\r\n                <span>\r\n                  <FormattedMessage id=\"customer.detail-hotpot.schedule\" />\r\n                </span>\r\n              </i>\r\n            </div>\r\n            <div className=\"time-content\">\r\n              {allAvailableTime && allAvailableTime.length > 0 ? (\r\n                <>\r\n                  <div className=\"time-content-btns\">\r\n                    {allAvailableTime.map((item, index) => {\r\n                      let timeDisplay =\r\n                        language === LANGUAGES.VI\r\n                          ? item.timeTypeData.valueVi\r\n                          : item.timeTypeData.valueEn;\r\n                      return (\r\n                        <button\r\n                          key={index}\r\n                          className={\r\n                            language === LANGUAGES.VI ? \"btn-vi\" : \"btn-en\"\r\n                          }\r\n                          onClick={() => this.handleClickScheduleTime(item)}\r\n                        >\r\n                          {timeDisplay}\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n\r\n                  <div className=\"book-free\">\r\n                    <span>\r\n                      <FormattedMessage id=\"customer.detail-hotpot.choose\" />{\" \"}\r\n                      <i class=\"far fa-hand-point-up\"></i>{\" \"}\r\n                      <FormattedMessage id=\"customer.detail-hotpot.book-free\" />\r\n                    </span>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className=\"no-schedule\">\r\n                  <FormattedMessage id=\"customer.detail-hotpot.no-schedule\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <BookingModal\r\n          isOpenModal={isOpenModalBooking}\r\n          closeBookingModal={this.closeBookingModal}\r\n          dataTime={dataScheduleTimeModal}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotSchedule);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotExtraInfo.js",["418","419","420","421"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HotpotExtraInfo.scss\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment\";\r\nimport localization from \"moment/locale/vi\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport {\r\n  getExtraInfoHotpotById,\r\n  getDetailInfoHotpot,\r\n} from \"../../../services/hotpotService\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nclass HotpotExtraInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isShowDetailInfo: false,\r\n      extraInfo: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.hotpotIdFromParent) {\r\n      let res = await getExtraInfoHotpotById(this.props.hotpotIdFromParent);\r\n      console.log(\r\n        \"this.props.hotpotIdFromParent extra\",\r\n        this.props.hotpotIdFromParent\r\n      );\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          extraInfo: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.hotpotIdFromParent !== prevProps.hotpotIdFromParent) {\r\n      let res = await getExtraInfoHotpotById(this.props.hotpotIdFromParent);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          extraInfo: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  showHideDetailInfo = (status) => {\r\n    this.setState({\r\n      isShowDetailInfo: status,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { isShowDetailInfo, extraInfo } = this.state;\r\n    let { language } = this.props;\r\n    return (\r\n      <div className=\"hotpot-extra-info-container\">\r\n        <div className=\"content-up\">\r\n          <div className=\"text-address\">\r\n            {\" \"}\r\n            <FormattedMessage id=\"customer.extra-info-hotpot.text-address\" />\r\n          </div>\r\n          <div className=\"name-restaurant\">\r\n            {extraInfo && extraInfo.Restaurant ? extraInfo.Restaurant.name : \"\"}\r\n          </div>\r\n          <div className=\"address-restaurant\">\r\n            {extraInfo && extraInfo.Restaurant\r\n              ? extraInfo.Restaurant.address\r\n              : \"\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"content-down\">\r\n          {isShowDetailInfo === false && (\r\n            <div className=\"short-info\">\r\n              <span className=\"price\">\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.price\" />{\" \"}\r\n              </span>\r\n\r\n              {extraInfo &&\r\n                extraInfo.priceData &&\r\n                language === LANGUAGES.VI && (\r\n                  <NumberFormat\r\n                    className=\"currency\"\r\n                    value={extraInfo.priceData.valueVi}\r\n                    displayType={\"text\"}\r\n                    thousandSeparator={true}\r\n                    suffix={\"VND\"}\r\n                  />\r\n                )}\r\n              {extraInfo &&\r\n                extraInfo.priceData &&\r\n                language === LANGUAGES.EN && (\r\n                  <NumberFormat\r\n                    className=\"currency\"\r\n                    value={extraInfo.priceData.valueEn}\r\n                    displayType={\"text\"}\r\n                    thousandSeparator={true}\r\n                    suffix={\"$\"}\r\n                  />\r\n                )}\r\n              <span\r\n                className=\"detail\"\r\n                onClick={() => this.showHideDetailInfo(true)}\r\n              >\r\n                {\" \"}\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.detail\" />\r\n              </span>\r\n            </div>\r\n          )}\r\n          {isShowDetailInfo === true && (\r\n            <>\r\n              <div className=\"title-price\">\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.price\" />\r\n              </div>\r\n              <div className=\"detail-info\">\r\n                <div className=\"price\">\r\n                  <span className=\"left\">\r\n                    <FormattedMessage id=\"customer.extra-info-hotpot.price\" />\r\n                  </span>\r\n                  <span className=\"right\">\r\n                    {\" \"}\r\n                    {extraInfo &&\r\n                      extraInfo.priceData &&\r\n                      language === LANGUAGES.VI && (\r\n                        <NumberFormat\r\n                          className=\"currency\"\r\n                          value={extraInfo.priceData.valueVi}\r\n                          displayType={\"text\"}\r\n                          thousandSeparator={true}\r\n                          suffix={\"VND\"}\r\n                        />\r\n                      )}\r\n                    {extraInfo &&\r\n                      extraInfo.priceData &&\r\n                      language === LANGUAGES.EN && (\r\n                        <NumberFormat\r\n                          className=\"currency\"\r\n                          value={extraInfo.priceData.valueEn}\r\n                          displayType={\"text\"}\r\n                          thousandSeparator={true}\r\n                          suffix={\"$\"}\r\n                        />\r\n                      )}\r\n                  </span>\r\n                </div>\r\n                <div className=\"note\">\r\n                  {extraInfo && extraInfo.note ? extraInfo.note : \"\"}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"payment\">\r\n                <FormattedMessage id=\"customer.extra-info-hotpot.payment\" />\r\n                {extraInfo && extraInfo.paymentData && language === LANGUAGES.VI\r\n                  ? extraInfo.paymentData.valueVi\r\n                  : \"\"}\r\n                {extraInfo && extraInfo.paymentData && language === LANGUAGES.EN\r\n                  ? extraInfo.paymentData.valueEn\r\n                  : \"\"}\r\n              </div>\r\n              <div className=\"hide-price\">\r\n                <span onClick={() => this.showHideDetailInfo(false)}>\r\n                  <FormattedMessage id=\"customer.extra-info-hotpot.hide-price\" />\r\n                </span>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotExtraInfo);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\Modal\\BookingModal.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HotpotProfile.js",["422","423"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./HotpotProfile.scss\";\r\nimport {\r\n  getExtraInfoHotpotById,\r\n  getDetailInfoHotpot,\r\n} from \"../../../services/hotpotService\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport localization from \"moment/locale/vi\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass HotpotProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataProfile: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let data = await this.getInfoHotpot(this.props.hotpotId);\r\n    console.log(\"this.props.hotpotId:\", this.props.hotpotId);\r\n    this.setState({\r\n      dataProfile: data,\r\n    });\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.hotpotId !== prevProps.hotpotId) {\r\n      // this.getInfoHotpot(this.props.hotpotId)\r\n    }\r\n  }\r\n\r\n  getInfoHotpot = async (id) => {\r\n    let result = {};\r\n    if (id) {\r\n      let res = await getExtraInfoHotpotById(id);\r\n      if (res && res.errCode === 0) {\r\n        result = res.data;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  renderTimeBooking = (dataTime) => {\r\n    let { language } = this.props;\r\n    if (dataTime && !_.isEmpty(dataTime)) {\r\n      let time =\r\n        language === LANGUAGES.VI\r\n          ? dataTime.timeTypeData?.valueVi\r\n          : dataTime.timeTypeData?.valueEn;\r\n      let date =\r\n        language === LANGUAGES.VI\r\n          ? moment.unix(+dataTime.date / 1000).format(\"dddd - DD/MM/YYYY\")\r\n          : moment\r\n              .unix(+dataTime.date / 1000)\r\n              .locale(\"en\")\r\n              .format(\"ddd - MM/DD/YYYY\");\r\n      return (\r\n        <>\r\n          <div>\r\n            {time} - {date}\r\n          </div>\r\n          <div>\r\n            <FormattedMessage id=\"customer.booking-modal.free-booking\" />\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n    return <></>;\r\n  };\r\n\r\n  render() {\r\n    let { dataProfile } = this.state;\r\n    let {\r\n      language,\r\n      isShowDescriptionHotpot,\r\n      dataTime,\r\n      isShowLinkDetail,\r\n      isShowPrice,\r\n      hotpotId,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"profile-hotpot-container\">\r\n        <div className=\"intro-hotpot\">\r\n          <div\r\n            className=\"content-left\"\r\n            style={{\r\n              backgroundImage: `url(${\r\n                dataProfile && dataProfile.image ? dataProfile.image : \"\"\r\n              })`,\r\n            }}\r\n          ></div>\r\n          <div className=\"content-right\">\r\n            <div className=\"up\">{dataProfile.name}</div>\r\n            <div className=\"down\">\r\n              {/* <div>{dataProfile.Restaurant?.name}</div>\r\n              <div>{dataProfile.Restaurant?.address}</div> */}\r\n              {isShowDescriptionHotpot === true ? (\r\n                <>\r\n                  {dataProfile &&\r\n                    dataProfile.Markdown &&\r\n                    dataProfile.Markdown.description && (\r\n                      <span>{dataProfile.Markdown.description}</span>\r\n                    )}\r\n                </>\r\n              ) : (\r\n                <>{this.renderTimeBooking(dataTime)}</>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {isShowLinkDetail === true && (\r\n          <div className=\"view-detail-hotpot\">\r\n            {/* <a href={`/detail-hotpot/${hotpotId}`}>Xem them</a> */}\r\n            <Link to={`/detail-hotpot/${hotpotId}`}>Xem them</Link>\r\n          </div>\r\n        )}\r\n\r\n        {isShowPrice === true && (\r\n          <div className=\"price\">\r\n            <FormattedMessage id=\"customer.booking-modal.price\" />\r\n            {dataProfile &&\r\n            dataProfile.priceData &&\r\n            language === LANGUAGES.VI ? (\r\n              <NumberFormat\r\n                className=\"currency\"\r\n                value={dataProfile.priceData?.valueVi}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n                suffix={\"VND\"}\r\n              />\r\n            ) : (\r\n              <NumberFormat\r\n                className=\"currency\"\r\n                value={dataProfile.priceData?.valueEn}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n                suffix={\"$\"}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotProfile);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Type\\ManageType.js",["424","425"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./ManageType.scss\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport { LANGUAGES, CommonUtils } from \"../../../utils\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { createNewType } from \"../../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageType extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      imageBase64: \"\",\r\n      descriptionHTML: \"\",\r\n      descriptionMarkdown: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {}\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let stateCopy = { ...this.state };\r\n    stateCopy[id] = event.target.value;\r\n    this.setState({\r\n      ...stateCopy,\r\n    });\r\n  };\r\n\r\n  handleEditorChange = ({ html, text }) => {\r\n    this.setState({\r\n      descriptionHTML: html,\r\n      descriptionMarkdown: text,\r\n    });\r\n  };\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        imageBase64: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveNewType = async () => {\r\n    let res = await createNewType(this.state);\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Create new type successfully!\");\r\n      this.state = {\r\n        name: \"\",\r\n        imageBase64: \"\",\r\n        descriptionHTML: \"\",\r\n        descriptionMarkdown: \"\",\r\n      };\r\n    } else {\r\n      toast.error(\"Create new type serror!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"manage-type-container\">\r\n        <div className=\"manage-type-title\">Quan li loai lau</div>\r\n\r\n        <div className=\"add-new-type row\">\r\n          <div className=\"col-6 form-group\">\r\n            <label>Ten loai lau</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"name\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-6 form-group\">\r\n            <label>Image</label>\r\n            {/* <input className=\"form-control-file\" type=\"file\"\r\n            onChange={(event) => this.handleOnChangeImage(event)}></input> */}\r\n            <div className=\"preview-img-container\">\r\n              <input\r\n                id=\"previewImg\"\r\n                type=\"file\"\r\n                hidden\r\n                onChange={(event) => this.handleOnChangeImage(event)}\r\n              />\r\n              <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                Upload image <i className=\"fas fa-upload\"></i>\r\n              </label>\r\n              <div\r\n                className=\"preview-image\"\r\n                style={{\r\n                  backgroundImage: `url(${this.state.previewImgURL})`,\r\n                }}\r\n                onClick={() => this.openPreviewImage()}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <MdEditor\r\n              style={{ height: \"300px\" }}\r\n              renderHTML={(text) => mdParser.render(text)}\r\n              onChange={this.handleEditorChange}\r\n              value={this.state.descriptionMarkdown}\r\n            />\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn-save-type\"\r\n              onClick={() => this.handleSaveNewType()}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageType);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Restaurant\\ManageRestaurant.js",["426","427"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./ManageRestaurant.scss\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport { LANGUAGES, CommonUtils } from \"../../../utils\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { createNewRestaurant } from \"../../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageRestaurant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      address: \"\",\r\n      imageBase64: \"\",\r\n      descriptionHTML: \"\",\r\n      descriptionMarkdown: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {}\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let stateCopy = { ...this.state };\r\n    stateCopy[id] = event.target.value;\r\n    this.setState({\r\n      ...stateCopy,\r\n    });\r\n  };\r\n\r\n  handleEditorChange = ({ html, text }) => {\r\n    this.setState({\r\n      descriptionHTML: html,\r\n      descriptionMarkdown: text,\r\n    });\r\n  };\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      console.log(\"check base64\", base64);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        imageBase64: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveNewRestaurant = async () => {\r\n    console.log(\"hp-res\", this.state);\r\n    let res = await createNewRestaurant(this.state);\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Create new restaurant successfully!\");\r\n      this.state = {\r\n        name: \"\",\r\n        address: \"\",\r\n        imageBase64: \"\",\r\n        descriptionHTML: \"\",\r\n        descriptionMarkdown: \"\",\r\n      };\r\n    } else {\r\n      toast.error(\"Create new restaurant serror!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"manage-restaurant-container\">\r\n        <div className=\"manage-restaurant-title\">Quan li nha hang</div>\r\n\r\n        <div className=\"add-new-restaurant row\">\r\n          <div className=\"col-6 form-group\">\r\n            <label>Ten nha hang</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"name\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-6 form-group\">\r\n            <label>Dia chi</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.address}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"address\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-12 form-group\">\r\n            <label>Image</label>\r\n            {/* <input className=\"form-control-file\" type=\"file\"\r\n            onChange={(event) => this.handleOnChangeImage(event)}></input> */}\r\n            <div className=\"preview-img-container\">\r\n              <input\r\n                id=\"previewImg\"\r\n                type=\"file\"\r\n                hidden\r\n                onChange={(event) => this.handleOnChangeImage(event)}\r\n              />\r\n              <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                Upload image <i className=\"fas fa-upload\"></i>\r\n              </label>\r\n              <div\r\n                className=\"preview-image\"\r\n                style={{\r\n                  backgroundImage: `url(${this.state.previewImgURL})`,\r\n                }}\r\n                onClick={() => this.openPreviewImage()}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <MdEditor\r\n              style={{ height: \"300px\" }}\r\n              renderHTML={(text) => mdParser.render(text)}\r\n              onChange={this.handleEditorChange}\r\n              value={this.state.descriptionMarkdown}\r\n            />\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn-save-restaurant\"\r\n              onClick={() => this.handleSaveNewRestaurant()}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageRestaurant);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Restaurant\\DetailRestaurant.js",["428","429","430","431","432"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./DetailRestaurant.scss\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport HotpotSchedule from \"../Hotpot/HotpotSchedule\";\r\nimport HotpotExtraInfo from \"../Hotpot/HotpotExtraInfo\";\r\nimport HotpotProfile from \"../Hotpot/HotpotProfile\";\r\nimport {\r\n  getDetailRestaurantById,\r\n  getAllCodeService,\r\n} from \"../../../services/hotpotService\";\r\nimport _ from \"lodash\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nclass DetailRestaurant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpotId: [],\r\n      dataDetailRestaurant: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n\r\n      let res = await getDetailRestaurantById({\r\n        id: id,\r\n      });\r\n      if (res && res.errCode === 0) {\r\n        let data = res.data;\r\n        let arrHotpotId = [];\r\n        if (data && !_.isEmpty(data)) {\r\n          let arr = data.hotpotRestaurant;\r\n          if (arr && arr.length > 0) {\r\n            arr.map((item) => {\r\n              arrHotpotId.push(item.id);\r\n            });\r\n          }\r\n        }\r\n\r\n        this.setState({\r\n          dataDetailRestaurant: res.data,\r\n          arrHotpotId: arrHotpotId,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  render() {\r\n    let { arrHotpotId, dataDetailRestaurant } = this.state;\r\n    console.log(\"Check dataDetailType arrHotpotId\", arrHotpotId);\r\n    let { language } = this.props;\r\n    return (\r\n      <div className=\"detail-type-container\">\r\n        <HomeHeader />\r\n        <div className=\"detail-type-body\">\r\n          <div className=\"description-type\">\r\n            {dataDetailRestaurant && !_.isEmpty(dataDetailRestaurant) && (\r\n              <>\r\n                <div className=\"name\">{dataDetailRestaurant.name}</div>\r\n\r\n                <div\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: dataDetailRestaurant.descriptionHTML,\r\n                  }}\r\n                ></div>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          {arrHotpotId &&\r\n            arrHotpotId.length > 0 &&\r\n            arrHotpotId.map((item, index) => {\r\n              return (\r\n                <div className=\"each-hotpot\" key={index}>\r\n                  <div className=\"dt-content-left\">\r\n                    <div className=\"profile-hotpot\">\r\n                      <HotpotProfile\r\n                        hotpotId={item}\r\n                        isShowDescriptionHotpot={true}\r\n                        isShowLinkDetail={true}\r\n                        isShowPrice={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"dt-content-right\">\r\n                    <div className=\"hotpot-schedule\">\r\n                      <HotpotSchedule hotpotIdFromParent={item} />\r\n                    </div>\r\n                    <div className=\"hotpot-extra-info\">\r\n                      <HotpotExtraInfo hotpotIdFromParent={item} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailRestaurant);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Type\\DetailType.js",["433","434","435"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./DetailType.scss\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport HotpotSchedule from \"../Hotpot/HotpotSchedule\";\r\nimport HotpotExtraInfo from \"../Hotpot/HotpotExtraInfo\";\r\nimport HotpotProfile from \"../Hotpot/HotpotProfile\";\r\nimport {\r\n  getDetailTypeById,\r\n  getAllCodeService,\r\n} from \"../../../services/hotpotService\";\r\nimport _ from \"lodash\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nclass DetailType extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpotId: [],\r\n      dataDetailType: {},\r\n      listProvince: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n\r\n      let res = await getDetailTypeById({\r\n        id: id,\r\n        location: \"ALL\",\r\n      });\r\n\r\n      let resProvince = await getAllCodeService(\"PROVINCE\");\r\n      if (\r\n        res &&\r\n        res.errCode === 0 &&\r\n        resProvince &&\r\n        resProvince.errCode === 0\r\n      ) {\r\n        let data = res.data;\r\n        let arrHotpotId = [];\r\n        if (data && !_.isEmpty(data)) {\r\n          let arr = data.hotpotType;\r\n          if (arr && arr.length > 0) {\r\n            arr.map((item) => {\r\n              arrHotpotId.push(item.id);\r\n            });\r\n          }\r\n        }\r\n\r\n        let dataProvince = resProvince.data;\r\n        console.log(\"Check resProvince\", resProvince);\r\n        if (dataProvince && dataProvince.length > 0) {\r\n          dataProvince.unshift({\r\n            createAt: null,\r\n            keyMap: \"ALL\",\r\n            type: \"PROVINCE\",\r\n            valueEn: \"All\",\r\n            valueVi: \"Toàn quốc\",\r\n          });\r\n        }\r\n\r\n        this.setState({\r\n          dataDetailType: res.data,\r\n          arrHotpotId: arrHotpotId,\r\n          listProvince: dataProvince ? dataProvince : [],\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeSelect = async (event) => {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n      let location = event.target.value;\r\n\r\n      let res = await getDetailTypeById({\r\n        id: id,\r\n        location: location,\r\n      });\r\n\r\n      console.log(\"RES\", res);\r\n\r\n      if (res && res.errCode === 0) {\r\n        let data = res.data;\r\n        let arrHotpotId = [];\r\n        if (data && !_.isEmpty(data)) {\r\n          let arr = data.hotpotType;\r\n          if (arr && arr.length > 0) {\r\n            arr.map((item) => {\r\n              arrHotpotId.push(item.id);\r\n            });\r\n          }\r\n        }\r\n\r\n        this.setState({\r\n          dataDetailType: res.data,\r\n          arrHotpotId: arrHotpotId,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { arrHotpotId, dataDetailType, listProvince } = this.state;\r\n    console.log(\"Check dataDetailType arrHotpotId\", arrHotpotId);\r\n    let { language } = this.props;\r\n    return (\r\n      <div className=\"detail-type-container\">\r\n        <HomeHeader />\r\n        <div className=\"detail-type-body\">\r\n          <div className=\"description-type\">\r\n            {dataDetailType && !_.isEmpty(dataDetailType) && (\r\n              <div\r\n                dangerouslySetInnerHTML={{\r\n                  __html: dataDetailType.descriptionHTML,\r\n                }}\r\n              ></div>\r\n            )}\r\n          </div>\r\n          <div className=\"search-type-hotpot\">\r\n            <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n              {listProvince &&\r\n                listProvince.length > 0 &&\r\n                listProvince.map((item, index) => {\r\n                  return (\r\n                    <option key={index} value={item.keyMap}>\r\n                      {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                    </option>\r\n                  );\r\n                })}\r\n            </select>\r\n          </div>\r\n\r\n          {arrHotpotId &&\r\n            arrHotpotId.length > 0 &&\r\n            arrHotpotId.map((item, index) => {\r\n              return (\r\n                <div className=\"each-hotpot\" key={index}>\r\n                  <div className=\"dt-content-left\">\r\n                    <div className=\"profile-hotpot\">\r\n                      <HotpotProfile\r\n                        hotpotId={item}\r\n                        isShowDescriptionHotpot={true}\r\n                        isShowLinkDetail={true}\r\n                        isShowPrice={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"dt-content-right\">\r\n                    <div className=\"hotpot-schedule\">\r\n                      <HotpotSchedule hotpotIdFromParent={item} />\r\n                    </div>\r\n                    <div className=\"hotpot-extra-info\">\r\n                      <HotpotExtraInfo hotpotIdFromParent={item} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailType);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\DetailHpHotpot.js",["436"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport \"./DetailHpHotpot.scss\";\r\nimport { getDetailInfoHotpot } from \"../../../services/hotpotService\";\r\nimport HotpotSchedule from \"./HotpotSchedule\";\r\nimport HpHotpotExtraInfo from \"./HpHotpotExtraInfo\";\r\nimport Slider from \"react-slick\";\r\nclass DetailHpHotpot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      detailHotpot: {},\r\n      currentHotpotId: -1,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\r\n      this.props.match &&\r\n      this.props.match.params &&\r\n      this.props.match.params.id\r\n    ) {\r\n      let id = this.props.match.params.id;\r\n      this.setState({\r\n        currentHotpotId: id,\r\n      });\r\n      let res = await getDetailInfoHotpot(id);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          detailHotpot: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  render() {\r\n    let { language } = this.props;\r\n    let { detailHotpot } = this.state;\r\n    console.log(\"detailhotpot\", detailHotpot);\r\n    let name = \"\";\r\n    let hpHotpot = detailHotpot.hpHotpot;\r\n    name = `${detailHotpot.name}`;\r\n    return (\r\n      <>\r\n        <HomeHeader isShowBanner={false} />\r\n        <div className=\"hotpot-container\">\r\n          <div className=\"detail-hotpot\">\r\n            <Slider\r\n              {...this.props.settings}\r\n              autoplay={true}\r\n              autoplaySpeed={3000}\r\n            >\r\n              {hpHotpot &&\r\n                hpHotpot.length > 0 &&\r\n                hpHotpot.map((item, index) => {\r\n                  let imageBase64 = \"\";\r\n                  if (item.image) {\r\n                    imageBase64 = new Buffer(item.image, \"base64\").toString(\r\n                      \"binary\"\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div\r\n                      className=\"section-customize\"\r\n                      key={index}\r\n                      onClick={() => this.handleViewDetailRestaurant(item)}\r\n                    >\r\n                      <div\r\n                        className=\"bg-image\"\r\n                        style={{\r\n                          backgroundImage: `url(${imageBase64})`,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n            </Slider>\r\n            <div className=\"content\">\r\n              <div className=\"name-restaurant\">{name}</div>\r\n              <HpHotpotExtraInfo\r\n                hotpotIdFromParent={this.state.currentHotpotId}\r\n              />\r\n              {detailHotpot &&\r\n                detailHotpot.Markdown &&\r\n                detailHotpot.Markdown.description && (\r\n                  <span className=\"des\">\r\n                    {detailHotpot.Markdown.description}\r\n                  </span>\r\n                )}\r\n              <div className=\"list\">\r\n                <div> Ưu đãi</div>\r\n                <div> Giới thiệu</div>\r\n                <div> Bảng giá</div>\r\n                <div> Địa chỉ</div>\r\n                <div> Bình luận</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"detail-info-hotpot\">\r\n              {detailHotpot &&\r\n                detailHotpot.Markdown &&\r\n                detailHotpot.Markdown.contentHTML && (\r\n                  <div\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: detailHotpot.Markdown.contentHTML,\r\n                    }}\r\n                  ></div>\r\n                )}\r\n            </div>\r\n          </div>\r\n          <div className=\"schedule-hotpot\">\r\n            <div className=\"book-restaurant\">Đặt chỗ</div>\r\n            <HotpotSchedule hotpotIdFromParent={this.state.currentHotpotId} />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailHpHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Hp\\ManageHp.js",["437","438","439","440"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./ManageHp.scss\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport { LANGUAGES, CommonUtils } from \"../../../utils\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { createNewHp } from \"../../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageHp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      imageBase64: \"\",\r\n      hotpotId: \"\",\r\n      previewImgURL: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {}\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let stateCopy = { ...this.state };\r\n    stateCopy[id] = event.target.value;\r\n    this.setState({\r\n      ...stateCopy,\r\n    });\r\n  };\r\n\r\n  //   handleEditorChange = ({ html, text }) => {\r\n  //     this.setState({\r\n  //       descriptionHTML: html,\r\n  //       descriptionMarkdown: text,\r\n  //     });\r\n  //   };\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      console.log(\"check base64\", base64);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        imageBase64: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveNewHp = async () => {\r\n    console.log(\"hp\", this.state);\r\n    let res = await createNewHp(this.state);\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Create new hp successfully!\");\r\n      this.state = {\r\n        name: \"\",\r\n        imageBase64: \"\",\r\n        hotpotId: \"\",\r\n      };\r\n    } else {\r\n      toast.error(\"Create new hp serror!\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"manage-hp-container\">\r\n        <div className=\"manage-hp-title\">Quan li hp</div>\r\n\r\n        <div className=\"add-new-hp row\">\r\n          <div className=\"col-6 form-group\">\r\n            <label>Ten hp</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"name\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-6 form-group\">\r\n            <label>hotpotId</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.hotpotId}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"hotpotId\")}\r\n            ></input>\r\n          </div>\r\n          <div className=\"col-12 form-group\">\r\n            <label>Image</label>\r\n            {/* <input className=\"form-control-file\" type=\"file\"\r\n            onChange={(event) => this.handleOnChangeImage(event)}></input> */}\r\n            <div className=\"preview-img-container\">\r\n              <input\r\n                id=\"previewImg\"\r\n                type=\"file\"\r\n                hidden\r\n                onChange={(event) => this.handleOnChangeImage(event)}\r\n              />\r\n              <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                Upload image <i className=\"fas fa-upload\"></i>\r\n              </label>\r\n              <div\r\n                className=\"preview-image\"\r\n                style={{\r\n                  backgroundImage: `url(${this.state.previewImgURL})`,\r\n                }}\r\n                onClick={() => this.openPreviewImage()}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn-save-hp\"\r\n              onClick={() => this.handleSaveNewHp()}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageHp);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Hotpot\\HpHotpotExtraInfo.js",["441","442","443","444","445","446"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./HpHotpotExtraInfo.scss\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment\";\r\nimport localization from \"moment/locale/vi\";\r\nimport { LANGUAGES } from \"../../../utils\";\r\nimport {\r\n  getExtraInfoHotpotById,\r\n  getDetailInfoHotpot,\r\n} from \"../../../services/hotpotService\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nclass HpHotpotExtraInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isShowDetailInfo: false,\r\n      extraInfo: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.hotpotIdFromParent) {\r\n      let res = await getExtraInfoHotpotById(this.props.hotpotIdFromParent);\r\n      console.log(\r\n        \"this.props.hotpotIdFromParent extra\",\r\n        this.props.hotpotIdFromParent\r\n      );\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          extraInfo: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.hotpotIdFromParent !== prevProps.hotpotIdFromParent) {\r\n      let res = await getExtraInfoHotpotById(this.props.hotpotIdFromParent);\r\n      if (res && res.errCode === 0) {\r\n        this.setState({\r\n          extraInfo: res.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  showHideDetailInfo = (status) => {\r\n    this.setState({\r\n      isShowDetailInfo: status,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { isShowDetailInfo, extraInfo } = this.state;\r\n    console.log(\" extraInfo\", extraInfo);\r\n    let { language } = this.props;\r\n    return (\r\n      <div className=\"hotpot-extra-info-container\">\r\n        <div className=\"content-up\">\r\n          <div className=\"address-restaurant\">\r\n            <i class=\"fas fa-map-marker-alt\"> </i>\r\n\r\n            {extraInfo && extraInfo.note ? extraInfo.note : \"\"}\r\n          </div>\r\n          <div className=\"type\">\r\n            Loại hình: {extraInfo && extraInfo.Type ? extraInfo.Type.name : \"\"}\r\n          </div>\r\n          <div className=\"short-info\">\r\n            <span className=\"price\">\r\n              <FormattedMessage id=\"customer.extra-info-hotpot.price\" />{\" \"}\r\n            </span>\r\n\r\n            {extraInfo && extraInfo.priceData && language === LANGUAGES.VI && (\r\n              // <NumberFormat\r\n              //   className=\"currency\"\r\n              //   value={extraInfo.priceData.valueVi}\r\n              //   displayType={\"text\"}\r\n              //   thousandSeparator={true}\r\n              //   suffix={\"VND\"}\r\n              // />\r\n              <dev>\r\n                {extraInfo.priceData.valueVi} <span> VND </span>\r\n              </dev>\r\n            )}\r\n\r\n            {extraInfo && extraInfo.priceData && language === LANGUAGES.EN && (\r\n              // <NumberFormat\r\n              //   className=\"currency\"\r\n              //   value={extraInfo.priceData.valueEn}\r\n              //   displayType={\"text\"}\r\n              //   thousandSeparator={true}\r\n              //   suffix={\"$\"}\r\n              // />\r\n              <dev>\r\n                {extraInfo.priceData.valueEn} <span> $ </span>\r\n              </dev>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"content-down\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HpHotpotExtraInfo);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\ViewMap.js",["447","448","449","450"],"import React, { Component } from \"react\";\r\nimport \"./ViewMap.scss\";\r\nimport { Map, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport osm from \"./osm-provider\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport markerImage1 from \"../../../assets/images/marker.png\";\r\nimport markerImage2 from \"../../../assets/images/marker_icon.png\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { getAllHotpots } from \"../../../services/hotpotService\";\r\nimport { getAllHotpotNameServices } from \"../../../services/hotpotService\";\r\nimport HomeHeader from \"../../HomePage/HomeHeader\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { point, distance } from \"@turf/turf\";\r\n\r\nconst markerIcon1 = new L.Icon({\r\n  iconUrl: markerImage1,\r\n  iconSize: [40, 40],\r\n  iconAnchor: [17, 46],\r\n  popupAnchor: [0, -46],\r\n});\r\n\r\nconst markerIcon2 = new L.Icon({\r\n  iconUrl: markerImage2,\r\n  iconSize: [25, 35],\r\n  iconAnchor: [17, 46],\r\n  popupAnchor: [0, -46],\r\n});\r\n\r\nclass ViewMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrHotpots: [],\r\n      center: { lat: 21.0277644, lng: 105.8341598 },\r\n      ZOOM_LEVEL: 12,\r\n      location: {\r\n        loaded: false,\r\n        coordinates: { lat: \"\", lng: \"\" },\r\n        error: null,\r\n      },\r\n      selectPosition: \"\",\r\n      currentPosition: null,\r\n      nearestHotpots: [],\r\n    };\r\n    this.mapRef = React.createRef();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition(this.onSuccess, this.onError);\r\n    } else {\r\n      this.onError({ code: 0, message: \"Geolocation not supported\" });\r\n    }\r\n    let res = await getAllHotpotNameServices();\r\n    console.log(\"RES\", res);\r\n    if (res && res.errCode === 0) {\r\n      this.setState({\r\n        arrHotpots: res.data,\r\n      });\r\n    }\r\n    const arr = this.nearestHotpots;\r\n    if (!arr) {\r\n      this.setState({\r\n        nearestHotpots: res.data,\r\n      });\r\n    }\r\n  }\r\n\r\n  onSuccess = (location) => {\r\n    this.setState({\r\n      location: {\r\n        loaded: true,\r\n        coordinates: {\r\n          lat: location.coords.latitude,\r\n          lng: location.coords.longitude,\r\n        },\r\n        error: null,\r\n      },\r\n      center: {\r\n        lat: location.coords.latitude,\r\n        lng: location.coords.longitude,\r\n      },\r\n    });\r\n  };\r\n\r\n  onError = (error) => {\r\n    this.setState({\r\n      location: {\r\n        loaded: true,\r\n        coordinates: { lat: \"\", lng: \"\" },\r\n        error: {\r\n          code: error.code,\r\n          message: error.message,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  showMyLocation = () => {\r\n    const { location, ZOOM_LEVEL } = this.state;\r\n    if (location.loaded && !location.error) {\r\n      // Lấy vị trí hiện tại từ state và cập nhật nó\r\n      const currentPosition = {\r\n        lat: location.coordinates.lat,\r\n        lng: location.coordinates.lng,\r\n      };\r\n      this.setState({ currentPosition });\r\n\r\n      // Di chuyển bản đồ đến vị trí hiện tại\r\n      this.mapRef.current.leafletElement.flyTo(\r\n        [location.coordinates.lat, location.coordinates.lng],\r\n        ZOOM_LEVEL,\r\n        { animate: true }\r\n      );\r\n    } else {\r\n      alert(location.error.message);\r\n    }\r\n  };\r\n\r\n  handleViewDetailHotpot = (hotpot) => {\r\n    this.props.history.push(`/detail-hpHotpot/${hotpot.id}`);\r\n  };\r\n\r\n  calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    // Tạo các điểm từ tọa độ\r\n    const point1 = point([lon1, lat1]);\r\n    const point2 = point([lon2, lat2]);\r\n\r\n    // Tính toán khoảng cách giữa hai điểm\r\n    const dis = distance(point1, point2);\r\n\r\n    return dis;\r\n  };\r\n\r\n  getNearestHotpots = (position) => {\r\n    const { arrHotpots } = this.state;\r\n    const { lat, lon } = position;\r\n\r\n    // Tính toán khoảng cách giữa điểm đã chọn và tất cả các điểm nhà hàng\r\n    const distances = arrHotpots.map((hotpot) => {\r\n      return {\r\n        hotpot,\r\n        distance: this.calculateDistance(\r\n          lat,\r\n          lon,\r\n          hotpot.latitude,\r\n          hotpot.longitude\r\n        ),\r\n      };\r\n    });\r\n\r\n    // Sắp xếp các điểm nhà hàng theo khoảng cách tăng dần\r\n    distances.sort((a, b) => a.distance - b.distance);\r\n\r\n    // Chọn 5 nhà hàng gần nhất\r\n    const nearestHotpots = distances.slice(0, 5);\r\n    this.setState({ nearestHotpots: nearestHotpots });\r\n  };\r\n\r\n  handelSelectPosition = (position) => {\r\n    this.setState({\r\n      selectPosition: position,\r\n      currentPosition: null,\r\n      // center: { lat: position.lat, lng: position.lon },\r\n    });\r\n    // Lấy tham chiếu tới bản đồ\r\n    const map = this.mapRef.current.leafletElement;\r\n    // Di chuyển bản đồ đến vị trí mới với hiệu ứng mượt mà\r\n    map.flyTo([position.lat, position.lon], this.state.ZOOM_LEVEL, {\r\n      animate: true,\r\n    });\r\n\r\n    this.getNearestHotpots(position);\r\n  };\r\n\r\n  handleClearPlace = () => {\r\n    // Gọi hàm showMyLocation để thực hiện chức năng \"Locate Me\"\r\n    this.showMyLocation();\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      center,\r\n      ZOOM_LEVEL,\r\n      location,\r\n      arrHotpots,\r\n      selectPosition,\r\n      currentPosition,\r\n      nearestHotpots,\r\n    } = this.state;\r\n    console.log(\"nearestHotpots\", nearestHotpots);\r\n    console.log(\"arrHotpots\", arrHotpots);\r\n\r\n    return (\r\n      <div>\r\n        <HomeHeader isShowBanner={false} />\r\n        <div className=\"body-container\">\r\n          <div className=\"list-res\">\r\n            <div className=\"name-des\">Nhà hàng gần bạn</div>\r\n\r\n            {nearestHotpots.map((item, idex) => {\r\n              let imageBase64 = \"\";\r\n              if (item.hotpot) {\r\n                item = item.hotpot;\r\n              } else {\r\n                item = item;\r\n              }\r\n              let name = `${item.name}`;\r\n              if (item.image) {\r\n                imageBase64 = new Buffer(item.image, \"base64\").toString(\r\n                  \"binary\"\r\n                );\r\n              }\r\n              return (\r\n                <div className=\"res\">\r\n                  <div className=\"image\">\r\n                    <div\r\n                      className=\"bg-image\"\r\n                      style={{\r\n                        backgroundImage: `url(${imageBase64})`,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"info\">\r\n                    <div className=\"name\">{name}</div>\r\n                    <div className=\"address\">{item.note}</div>\r\n                    <div className=\"more\">\r\n                      <div>Đánh giá: Tốt</div>\r\n                      <div>PHÙ HỢP:Đặt tiệc, tiếp khách, gia đình,</div>\r\n                      <div>bạn bè, sinh nhật, liên hoan…</div>\r\n                      <div>KHÔNG GIAN:</div>\r\n                      <div>- Hiện đại. Trẻ trung</div>\r\n                      <div>- Sức chứa: 120 khách (02 tầng)</div>{\" \"}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"map-container\">\r\n            <div className=\"search-box\">\r\n              <SearchBox\r\n                selectPosition={selectPosition}\r\n                handelSelectPosition={this.handelSelectPosition}\r\n                handleClearPlace={this.handleClearPlace}\r\n              />\r\n            </div>\r\n            <div className=\"map-body\">\r\n              {/* <div className=\"btn-locate justify-content-center\">\r\n            <button className=\"btn btn-primary\" onClick={this.showMyLocation}>\r\n              Locate Me <i className=\"fas fa-globe\"></i>\r\n            </button>\r\n          </div> */}\r\n\r\n              <div className=\"map text-center\">\r\n                <Map center={center} zoom={ZOOM_LEVEL} ref={this.mapRef}>\r\n                  <TileLayer\r\n                    url={osm.maptiler.url}\r\n                    attribution={osm.maptiler.attribution}\r\n                  />\r\n                  {selectPosition && !currentPosition ? (\r\n                    <Marker\r\n                      icon={markerIcon1}\r\n                      position={[selectPosition.lat, selectPosition.lon]}\r\n                    ></Marker>\r\n                  ) : (\r\n                    location.loaded &&\r\n                    !location.error && (\r\n                      <Marker\r\n                        icon={markerIcon1}\r\n                        position={[\r\n                          location.coordinates.lat,\r\n                          location.coordinates.lng,\r\n                        ]}\r\n                      ></Marker>\r\n                    )\r\n                  )}\r\n                  {arrHotpots.map((item, idex) => {\r\n                    let imageBase64 = \"\";\r\n                    let name = `${item.name}`;\r\n                    if (item.image) {\r\n                      imageBase64 = new Buffer(item.image, \"base64\").toString(\r\n                        \"binary\"\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Marker\r\n                        //position={[10.7285492637418, 106.616285747586]}\r\n                        position={[item.latitude, item.longitude]}\r\n                        icon={markerIcon2}\r\n                        key={idex}\r\n                        riseOnHover={true}\r\n                        riseOffset={200}\r\n                        //onClick={() => this.handleViewDetailHotpot(item)}\r\n                      >\r\n                        <Tooltip\r\n                          className=\"tool-tip\"\r\n                          direction=\"bottom\"\r\n                          offset={[0, -10]}\r\n                          opacity={1}\r\n                        >\r\n                          <div className=\"customize-border\">\r\n                            <div className=\"image\">\r\n                              <div\r\n                                className=\"bg-image section-hotpot\"\r\n                                style={{\r\n                                  backgroundImage: `url(${imageBase64})`,\r\n                                }}\r\n                              />\r\n                            </div>\r\n                            <div className=\"info\">\r\n                              <div className=\"name\">{name}</div>\r\n                              <div className=\"address\">{item.note}</div>\r\n                              <div className=\"more\">\r\n                                <div>Đánh giá: Tốt</div>\r\n                                <div>\r\n                                  PHÙ HỢP:Đặt tiệc, tiếp khách, gia đình,\r\n                                </div>\r\n                                <div>bạn bè, sinh nhật, liên hoan…</div>\r\n                                <div>KHÔNG GIAN:</div>\r\n                                <div>- Hiện đại. Trẻ trung</div>\r\n                                <div>- Sức chứa: 120 khách (02 tầng)</div>{\" \"}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </Tooltip>\r\n                        {/* <Popup open={true}>\r\n                    <b className=\"detail-hotpot\">\r\n                      {item.name}, {item.address}\r\n                    </b>\r\n                  </Popup> */}\r\n                      </Marker>\r\n                    );\r\n                  })}\r\n                </Map>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewMap);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\osm-provider.js",["451"],"export default {\r\n  maptiler: {\r\n    url: \"https://api.maptiler.com/maps/basic-v2/256/{z}/{x}/{y}.png?key=HZS0sPRJqM0kem8BoWaK\",\r\n    attribution:\r\n      '&copy; <a href=\"https://www.maptiler.com/\">MapTiler</a> &copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\r\n  },\r\n};\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\useGeoLocation.js",["452"],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\SearchBox.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\Customer\\Map\\NearSearch.js",["453"],"import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass NearSearch extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"pop-up\">\r\n        <div>Near Search</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//mapStateToProps: map state của redux vào react (Props), redux có thể lấy các biến qua câu lệnh this.props\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\n//fire events của redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NearSearch);\r\n//connect:kết nối react với redux\r\n//\r\n\r\n/**\r\n * muốn lưu thông tin vào redux thì phải fire actions của nó\r\n * muốn lấy thông tin thì dùng hàm map và lấy qua biến props\r\n */\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\routes\\Staff.js",["454","455","456","457"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport UserManage from \"../containers/System/UserManage\";\r\nimport HotpotManage from \"../containers/System/HotpotManage\";\r\n//import HotpotRedux from \"../containers/System/Admin/HotpotRedux\";\r\nimport UserRedux from \"../containers/System/Admin/UserRedux\";\r\nimport Header from \"../containers/Header/Header\";\r\n//import ManageHotpot from \"../containers/System/Admin/ManageHotpot\";\r\n//import ManageSchedule from \"../containers/System/Admin/ManageSchedule\";\r\nimport ManageType from \"../containers/System/Type/ManageType\";\r\nimport ManageRestaurant from \"../containers/System/Restaurant/ManageRestaurant\";\r\n//import ManageHp from \"../containers/System/Hp/ManageHp\";\r\nimport ManageSchedule from \"../containers/System/Staff/ManageSchedule\";\r\nimport HotpotRedux from \"../containers/System/Staff/HotpotRedux\";\r\nimport ExtraInfoHotpot from \"../containers/System/Staff/ExtraInfoHotpot\";\r\nimport ManageCustomer from \"../containers/System/Staff/ManageCustomer\";\r\nimport ManageHp from \"../containers/System/Staff/ManageHp\";\r\n\r\nclass Staff extends Component {\r\n  render() {\r\n    const { systemMenuPath, isLoggedIn } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        {isLoggedIn && <Header />}\r\n        <div className=\"system-container\">\r\n          <div className=\"system-list\">\r\n            <Switch>\r\n              <Route\r\n                path=\"/staff/extra-info-hotpot\"\r\n                component={ExtraInfoHotpot}\r\n              />\r\n              <Route path=\"/system/CRUD-hotpot\" component={HotpotManage} />\r\n              {/* <Route path=\"/system/CRUD-user\" component={UserManage} /> */}\r\n              <Route path=\"/staff/hotpot-redux\" component={HotpotRedux} />\r\n              {/* <Route path=\"/system/user-redux\" component={UserRedux} />\r\n              <Route path=\"/system/manage-type\" component={ManageType} /> */}\r\n              <Route path=\"/staff/manage-customer\" component={ManageCustomer} />\r\n              {/* <Route\r\n                path=\"/system/manage-restaurant\"\r\n                component={ManageRestaurant}\r\n              /> */}\r\n              <Route path=\"/staff/schedule-manage\" component={ManageSchedule} />\r\n              <Route path=\"/staff/manage-hp\" component={ManageHp} />\r\n              component=\r\n              {() => {\r\n                return <Redirect to={systemMenuPath} />;\r\n              }}\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    systemMenuPath: state.app.systemMenuPath,\r\n    isLoggedIn: state.user.isLoggedIn,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Staff);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ManageSchedule.js",["458","459","460","461","462","463","464","465","466"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport \"./ManageSchedule.scss\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Select from \"react-select\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from \"../../../utils\";\r\nimport DatePicker from \"../../../components/Input/DatePicker\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport _, { result } from \"lodash\";\r\nimport { saveBulkScheduleHotpot } from \"../../../services/hotpotService\";\r\nclass ManageSchedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listHotpotNames: [],\r\n      selectedHotpot: {},\r\n      currentDate: \"\",\r\n      rangeTime: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAllHotpotNames();\r\n    this.props.fetchAllScheduleTime();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allHotpotNames !== this.props.allHotpotNames) {\r\n      let dataSelect = this.buildDataInputSelect(this.props.allHotpotNames);\r\n      this.setState({\r\n        listHotpotNames: dataSelect,\r\n      });\r\n    }\r\n    if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n      let data = this.props.allScheduleTime;\r\n      if (data && data.length > 0) {\r\n        data = data.map((item) => ({ ...item, isSelected: false }));\r\n      }\r\n      this.setState({\r\n        rangeTime: data,\r\n      });\r\n    }\r\n  }\r\n\r\n  buildDataInputSelect = (inputData) => {\r\n    let result = [];\r\n    let { userInfo } = this.props;\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        let object = {};\r\n        if (item.staffId === userInfo.id) {\r\n          object.label = `${item.name}`;\r\n          object.value = item.id;\r\n          result.push(object);\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  handleChangeSelect = async (selectedHotpot) => {\r\n    this.setState({ selectedHotpot });\r\n  };\r\n\r\n  handleOnChangeDatePicker = (date) => {\r\n    this.setState({\r\n      currentDate: date[0],\r\n    });\r\n  };\r\n  handleClickTimeBtn = (time) => {\r\n    let { rangeTime } = this.state;\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      rangeTime = rangeTime.map((item) => {\r\n        if (item.id === time.id) {\r\n          item.isSelected = !item.isSelected;\r\n        }\r\n        return item;\r\n      });\r\n      this.setState({\r\n        rangeTime: rangeTime,\r\n      });\r\n    }\r\n  };\r\n\r\n  //_.isEmpty(selectedHotpot) tra ve true khi object rỗng\r\n\r\n  handleSaveSchedule = async () => {\r\n    let { rangeTime, selectedHotpot, currentDate } = this.state;\r\n    let result = [];\r\n    if (!currentDate) {\r\n      toast.error(\"Invalid date!\");\r\n      return;\r\n    }\r\n    if (selectedHotpot && _.isEmpty(selectedHotpot)) {\r\n      toast.error(\"Invalid selected hotpot!\");\r\n      return;\r\n    }\r\n    let formatedDate = new Date(currentDate).getTime();\r\n    if (rangeTime && rangeTime.length > 0) {\r\n      let selectedTime = rangeTime.filter((item) => item.isSelected === true);\r\n      selectedTime.map((schedule) => {\r\n        let object = {};\r\n        object.hotpotId = selectedHotpot.value;\r\n        object.date = formatedDate;\r\n        object.timeType = schedule.keyMap;\r\n        result.push(object);\r\n      });\r\n    } else {\r\n      toast.error(\"Invalid selected time!\");\r\n      return;\r\n    }\r\n    let res = await saveBulkScheduleHotpot({\r\n      arrSchedule: result,\r\n      hotpotId: selectedHotpot.value,\r\n      formatedDate: formatedDate,\r\n    });\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Save info successfully!\");\r\n    } else {\r\n      toast.error(\"error saveBulkScheduleHotpot\");\r\n      console.log(\"error saveBulkScheduleHotpot >>> res:\", res);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { rangeTime } = this.state;\r\n    let { language } = this.props;\r\n    let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n    return (\r\n      <div className=\"manage-schedule-container\">\r\n        <div className=\"manage-schedule-title\">\r\n          <FormattedMessage id=\"manage-schedule.title\" />\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-6 form-group\">\r\n              <label>\r\n                {/* <FormattedMessage id=\"manage-schedule.choose-hotpot\" /> */}\r\n                Chọn nhà hàng\r\n              </label>\r\n              <Select\r\n                value={this.state.selectedHotpot}\r\n                onChange={this.handleChangeSelect}\r\n                options={this.state.listHotpotNames}\r\n              />\r\n            </div>\r\n            <div className=\"col-6 form-group\">\r\n              <label>\r\n                <FormattedMessage id=\"manage-schedule.choose-date\" />\r\n              </label>\r\n              <DatePicker\r\n                onChange={this.handleOnChangeDatePicker}\r\n                className=\"form-control\"\r\n                value={this.state.currentDate}\r\n                minDate={yesterday}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 pick-hour-container\">\r\n              {rangeTime &&\r\n                rangeTime.length > 0 &&\r\n                rangeTime.map((item, index) => {\r\n                  return (\r\n                    <button\r\n                      button\r\n                      className={\r\n                        item.isSelected === true\r\n                          ? \"btn btn-schedule active\"\r\n                          : \"btn btn-schedule\"\r\n                      }\r\n                      key={index}\r\n                      onClick={() => this.handleClickTimeBtn(item)}\r\n                    >\r\n                      {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                    </button>\r\n                  );\r\n                })}\r\n            </div>\r\n            <div className=\"col-12\">\r\n              <button\r\n                className=\"btn btn-primary btn-save-schedule\"\r\n                onClick={() => this.handleSaveSchedule()}\r\n              >\r\n                <FormattedMessage id=\"manage-schedule.save\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.user.isLoggedIn,\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n    language: state.app.language,\r\n    allScheduleTime: state.admin.allScheduleTime,\r\n    userInfo: state.user.userInfo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n    fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\HotpotRedux.js",["467","468","469","470","471","472","473","474"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from \"../../../utils\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport \"./HotpotRedux.scss\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport \"react-image-lightbox/style.css\";\r\nimport TableManageHotpot from \"./TableManageHotpot\";\r\nimport { getAllRestaurantNamesService } from \"../../../services/hotpotService\";\r\nclass HotpotRedux extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      provinceArr: [],\r\n      priceArr: [],\r\n      paymentArr: [],\r\n      previewImgURL: \"\",\r\n      isOpen: false,\r\n      name: \"\",\r\n      phonenumber: \"\",\r\n      provinceId: \"\",\r\n      restaurantId: \"\",\r\n      typeId: \"\",\r\n      priceId: \"\",\r\n      paymentId: \"\",\r\n      note: \"\",\r\n      image: \"\",\r\n      action: \"\",\r\n      hotpotEditId: \"\",\r\n      listRestaurantNames: [],\r\n      //restaurantAddress:[],\r\n      listTypeNames: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.props.getPriceStart();\r\n    this.props.getPaymentStart();\r\n    this.props.getProvinceStart();\r\n    this.props.fetchAllRestaurantNames();\r\n    this.props.fetchAllTypeNames();\r\n    this.props.fetchAllHotpotNames();\r\n    // try {\r\n    //   let res = await getAllCodeService(\"province\");\r\n    //   console.log(\"check provine\", res);\r\n    //   if (res && res.errCode === 0) {\r\n    //     this.setState({\r\n    //       provinceArr: res.data,\r\n    //     });\r\n    //   }\r\n    // } catch (e) {\r\n    //   console.log(e);\r\n    // }\r\n  }\r\n\r\n  // sau khi render chay se goi den ham componentDidUpdate\r\n  //hàm componentDidUpdate so sánh hiện tại (this) và quá khứ (prev) của provinceRedux\r\n  // quá khứ là chưa fire event, hiện tại là đã fire event\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.priceRedux !== this.props.priceRedux) {\r\n      let arrPrices = this.props.priceRedux;\r\n      this.setState({\r\n        priceArr: arrPrices,\r\n        priceId: arrPrices && arrPrices.length > 0 ? arrPrices[0].keyMap : \"\",\r\n      });\r\n    }\r\n    if (prevProps.paymentRedux !== this.props.paymentRedux) {\r\n      let arrPayments = this.props.paymentRedux;\r\n      this.setState({\r\n        paymentArr: arrPayments,\r\n        paymentId:\r\n          arrPayments && arrPayments.length > 0 ? arrPayments[0].keyMap : \" \",\r\n      });\r\n    }\r\n    if (prevProps.provinceRedux !== this.props.provinceRedux) {\r\n      let arrProvinces = this.props.provinceRedux;\r\n      this.setState({\r\n        provinceArr: arrProvinces,\r\n        provinceId:\r\n          arrProvinces && arrProvinces.length > 0 ? arrProvinces[0].keyMap : \"\",\r\n      });\r\n    }\r\n\r\n    if (prevProps.allRestaurantNames !== this.props.allRestaurantNames) {\r\n      let arrRestaurantNames = this.props.allRestaurantNames;\r\n      this.setState({\r\n        listRestaurantNames: arrRestaurantNames,\r\n        restaurantId:\r\n          arrRestaurantNames && arrRestaurantNames.length > 0\r\n            ? arrRestaurantNames[0].id\r\n            : \"\",\r\n      });\r\n    }\r\n    if (prevProps.allTypeNames !== this.props.allTypeNames) {\r\n      let arrTypeNames = this.props.allTypeNames;\r\n      this.setState({\r\n        listTypeNames: arrTypeNames,\r\n        typeId:\r\n          arrTypeNames && arrTypeNames.length > 0 ? arrTypeNames[0].id : \"\",\r\n      });\r\n    }\r\n    if (prevProps.listHotpots !== this.props.listHotpots) {\r\n      let arrProvinces = this.props.provinceRedux;\r\n      let arrPayments = this.props.paymentRedux;\r\n      let arrPrices = this.props.priceRedux;\r\n      let arrRestaurantNames = this.props.allRestaurantNames;\r\n      let arrTypeNames = this.props.allTypeNames;\r\n      this.setState({\r\n        name: \"\",\r\n        phonenumber: \"\",\r\n        note: \"\",\r\n        //image: \"\",\r\n        provinceId:\r\n          arrProvinces && arrProvinces.length > 0 ? arrProvinces[0].keyMap : \"\",\r\n        paymentId:\r\n          arrPayments && arrPayments.length > 0 ? arrPayments[0].keyMap : \" \",\r\n        priceId: arrPrices && arrPrices.length > 0 ? arrPrices[0].keyMap : \"\",\r\n        restaurantId:\r\n          arrRestaurantNames && arrRestaurantNames.length > 0\r\n            ? arrRestaurantNames[0].id\r\n            : \"\",\r\n        typeId:\r\n          arrTypeNames && arrTypeNames.length > 0 ? arrTypeNames[0].id : \"\",\r\n        action: CRUD_ACTIONS.CREATE,\r\n        previewImgURL: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        image: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveHotpot = () => {\r\n    let { userInfo } = this.props;\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === false) return;\r\n    let { action } = this.state;\r\n    //let action = this.state.action\r\n    //fire redux create hotpot\r\n    console.log(\"check userInfo handleSave\", userInfo);\r\n    if (action === CRUD_ACTIONS.CREATE) {\r\n      this.props.createNewHotpot({\r\n        name: this.state.name,\r\n        phonenumber: this.state.phonenumber,\r\n        priceId: this.state.priceId,\r\n        provinceId: this.state.provinceId,\r\n        paymentId: this.state.paymentId,\r\n        typeId: this.state.typeId,\r\n        restaurantId: this.state.restaurantId,\r\n        note: this.state.note,\r\n        image: this.state.image,\r\n        staffId: userInfo.id,\r\n      });\r\n    }\r\n    if (action === CRUD_ACTIONS.EDIT) {\r\n      //Fire redux edit hotpot\r\n      this.props.editHotpotRedux({\r\n        id: this.state.hotpotEditId,\r\n        name: this.state.name,\r\n        phonenumber: this.state.phonenumber,\r\n        priceId: this.state.priceId,\r\n        provinceId: this.state.provinceId,\r\n        paymentId: this.state.paymentId,\r\n        typeId: this.state.typeId,\r\n        restaurantId: this.state.restaurantId,\r\n        note: this.state.note,\r\n        image: this.state.image,\r\n        staffId: userInfo.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrCheck = [\r\n      \"name\",\r\n      //\"phonenumber\",\r\n      \"provinceId\",\r\n      \"restaurantId\",\r\n      \"typeId\",\r\n      \"priceId\",\r\n      \"paymentId\",\r\n      //\"note\",\r\n    ];\r\n    for (let i = 0; i < arrCheck.length; i++) {\r\n      if (!this.state[arrCheck[i]]) {\r\n        isValid = false;\r\n        alert(\"This input is required: \" + arrCheck[i]);\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  onChangeInput = (event, id) => {\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    let imageBase64 = \"\";\r\n    if (hotpot.image) {\r\n      imageBase64 = new Buffer(hotpot.image, \"base64\").toString(\"binary\");\r\n    }\r\n    this.setState({\r\n      name: hotpot.name,\r\n      phonenumber: hotpot.phonenumber,\r\n      restaurantId: hotpot.restaurantId,\r\n      typeId: hotpot.typeId,\r\n      note: hotpot.note,\r\n      image: \"\",\r\n      previewImgURL: imageBase64,\r\n      provinceId: hotpot.provinceId,\r\n      paymentId: hotpot.paymentId,\r\n      priceId: hotpot.priceId,\r\n      action: CRUD_ACTIONS.EDIT,\r\n      hotpotEditId: hotpot.id,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let language = this.props.language;\r\n    let isLoadingProvince = this.props.isLoadingProvince;\r\n    let provinces = this.state.provinceArr;\r\n    let prices = this.state.priceArr;\r\n    let payments = this.state.paymentArr;\r\n    let restaurantNames = this.state.listRestaurantNames;\r\n    let typeNames = this.state.listTypeNames;\r\n\r\n    let {\r\n      name,\r\n      phonenumber,\r\n      provinceId,\r\n      restaurantId,\r\n      typeId,\r\n      priceId,\r\n      paymentId,\r\n      note,\r\n      image,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"hotpot-redux-container\">\r\n        <div className=\"title\">MANAGE RESTAURANT</div>\r\n        <div className=\"hotpot-redux-body\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 mb-5 \">\r\n                <TableManageHotpot\r\n                  handleEditHotpot={this.handleEditHotpot}\r\n                  action={this.state.action}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 my-3\">\r\n                <b>\r\n                  {/* <FormattedMessage id=\"manage-hotpot.add\" /> */}\r\n                  Edit restaurant\r\n                </b>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                {isLoadingProvince === true ? \"Loading province\" : \"\"}\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.name\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={name}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"name\");\r\n                  }}\r\n                  // dùng disabled để khi edit không cho phép chỉnh sửa trường này\r\n                  // disabled={\r\n                  //   this.state.action === CRUD_ACTIONS.EDIT ? true : false\r\n                  // }\r\n                />\r\n              </div>\r\n              {/* <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.phone-number\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={phonenumber}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"phonenumber\");\r\n                  }}\r\n                />\r\n              </div> */}\r\n\r\n              {/* <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.restaurantId\" />\r\n                </label>\r\n \r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"restaurantId\");\r\n                  }}\r\n                  value={restaurantId}\r\n                >\r\n                  {restaurantNames &&\r\n                    restaurantNames.length > 0 &&\r\n                    restaurantNames.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.id}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.typeId\" />\r\n                </label>\r\n\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"typeId\");\r\n                  }}\r\n                  value={typeId}\r\n                >\r\n                  {typeNames &&\r\n                    typeNames.length > 0 &&\r\n                    typeNames.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.id}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div> */}\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.provinceId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"provinceId\");\r\n                  }}\r\n                  value={provinceId}\r\n                >\r\n                  {provinces &&\r\n                    provinces.length > 0 &&\r\n                    provinces.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.priceId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"priceId\");\r\n                  }}\r\n                  value={priceId}\r\n                >\r\n                  {prices &&\r\n                    prices.length > 0 &&\r\n                    prices.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.paymentId\" />\r\n                </label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"paymentId\");\r\n                  }}\r\n                  value={paymentId}\r\n                >\r\n                  {payments &&\r\n                    payments.length > 0 &&\r\n                    payments.map((item, index) => {\r\n                      return (\r\n                        <option key={index} value={item.keyMap}>\r\n                          {language === LANGUAGES.VI\r\n                            ? item.valueVi\r\n                            : item.valueEn}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </select>\r\n              </div>\r\n              {/* <div className=\"col-8\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.note\" />\r\n                </label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={note}\r\n                  onChange={(event) => {\r\n                    this.onChangeInput(event, \"note\");\r\n                  }}\r\n                />\r\n              </div> */}\r\n              <div className=\"col-4\">\r\n                <label>\r\n                  <FormattedMessage id=\"manage-hotpot.image\" />\r\n                </label>\r\n                <div className=\"preview-img-container\">\r\n                  <input\r\n                    id=\"previewImg\"\r\n                    type=\"file\"\r\n                    hidden\r\n                    onChange={(event) => this.handleOnChangeImage(event)}\r\n                  />\r\n                  <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                    Upload image <i className=\"fas fa-upload\"></i>\r\n                  </label>\r\n                  <div\r\n                    className=\"preview-image\"\r\n                    style={{\r\n                      backgroundImage: `url(${this.state.previewImgURL})`,\r\n                    }}\r\n                    onClick={() => this.openPreviewImage()}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-12 my-3\">\r\n                <button\r\n                  // className={\r\n                  //   this.state.action === CRUD_ACTIONS.EDIT\r\n                  //     ? \"btn btn-warning\"\r\n                  //     : \"btn btn-primary\"\r\n                  // }\r\n                  className={\"btn btn-warning\"}\r\n                  onClick={() => this.handleSaveHotpot()}\r\n                >\r\n                  {/* {this.state.action === CRUD_ACTIONS.EDIT ? (\r\n                    <FormattedMessage id=\"manage-hotpot.edit\" />\r\n                  ) : (\r\n                    <FormattedMessage id=\"manage-hotpot.save\" />\r\n                  )} */}\r\n                  <FormattedMessage id=\"manage-hotpot.edit\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n    userInfo: state.user.userInfo,\r\n    priceRedux: state.admin.prices,\r\n    paymentRedux: state.admin.payments,\r\n    provinceRedux: state.admin.provinces,\r\n    allRestaurantNames: state.admin.allRestaurantNames,\r\n    allTypeNames: state.admin.allTypeNames,\r\n    isLoadingProvince: state.admin.isLoadingProvince,\r\n    listHotpots: state.admin.hotpots,\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getPriceStart: () => dispatch(actions.fetchPriceStart()),\r\n    getPaymentStart: () => dispatch(actions.fetchPaymentStart()),\r\n    getProvinceStart: () => dispatch(actions.fetchProvinceStart()),\r\n    createNewHotpot: (data) => dispatch(actions.createNewHotpot(data)),\r\n    fetchHotpotsRedux: () => dispatch(actions.fetchAllHotpotsStart()),\r\n    editHotpotRedux: (data) => dispatch(actions.editHotpot(data)),\r\n    fetchAllRestaurantNames: () => dispatch(actions.fetchAllRestaurantNames()),\r\n    fetchAllTypeNames: () => dispatch(actions.fetchAllTypeNames()),\r\n    // processLogout: () => dispatch(actions.processLogout()),\r\n    // changeLanguageAppRedux: (language) =>\r\n    //   dispatch(actions.changeLanguageApp(language)),\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HotpotRedux);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\TableManageHotpot.js",["475","476","477","478","479"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./TableManageHotpot.scss\";\r\nimport * as actions from \"../../../store/actions\";\r\n\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\n// import style manually\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\n\r\n// Register plugins if required\r\n// MdEditor.use(YOUR_PLUGINS_HERE);\r\n\r\n// Initialize a markdown parser\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n// Finish!\r\nfunction handleEditorChange({ html, text }) {\r\n  console.log(\"handleEditorChange\", html, text);\r\n}\r\n\r\nclass TableManageHotpot extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class TableManageHotpot này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hotpotsRedux: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchHotpotRedux();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.listHotpots !== this.props.listHotpots) {\r\n      let hotpots = this.getHotpotByStaffId(this.props.listHotpots);\r\n      this.setState({\r\n        hotpotsRedux: hotpots,\r\n      });\r\n    }\r\n  }\r\n\r\n  getHotpotByStaffId = (inputData) => {\r\n    let result = [];\r\n    let { userInfo } = this.props;\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        // let object = {};\r\n        // if (item.staffId === userInfo.id) {\r\n        //   object.label = `${item.name}`;\r\n        //   object.value = item.id;\r\n        //   result.push(object);\r\n        // }\r\n        if (item.staffId === userInfo.id) {\r\n          result.push(item);\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  handleDeleteHotpot = (hotpot) => {\r\n    this.props.deleteHotpotRedux(hotpot.id);\r\n  };\r\n\r\n  handleEditHotpot = (hotpot) => {\r\n    this.props.handleEditHotpot(hotpot);\r\n  };\r\n\r\n  render() {\r\n    let arrHotpots = this.state.hotpotsRedux;\r\n    return (\r\n      <React.Fragment>\r\n        <table id=\"TableManageHotpot\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>ProvinceId</th>\r\n              {/* <th>Phone number</th> */}\r\n              {/* <th>Restaurant Id</th>\r\n              <th>Type Id</th> */}\r\n              <th>PriceId</th>\r\n              {/* <th>Note</th> */}\r\n              <th>PaymentId</th>\r\n              <th>Action</th>\r\n            </tr>\r\n\r\n            {arrHotpots &&\r\n              arrHotpots.length > 0 &&\r\n              arrHotpots.map((item, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.provinceId}</td>\r\n                    {/* <td>{item.phonenumber}</td> */}\r\n                    {/* <td>{item.restaurantId}</td>\r\n                    <td>{item.typeId}</td> */}\r\n                    <td>{item.priceId}</td>\r\n                    {/* <td>{item.note}</td> */}\r\n                    <td>{item.paymentId}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => this.handleEditHotpot(item)}\r\n                        className=\"btn-edit\"\r\n                      >\r\n                        <i className=\"fas fa-pencil-alt\"></i>\r\n                      </button>\r\n                      {/* <button\r\n                        onClick={() => this.handleDeleteHotpot(item)}\r\n                        className=\"btn-delete\"\r\n                      >\r\n                        <i className=\"fas fa-trash\"></i>\r\n                      </button> */}\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </table>\r\n        {/* <MdEditor\r\n          style={{ height: \"500px\" }}\r\n          renderHTML={(text) => mdParser.render(text)}\r\n          onChange={handleEditorChange}\r\n        /> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    listHotpots: state.admin.hotpots,\r\n    userInfo: state.user.userInfo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchHotpotRedux: () => dispatch(actions.fetchAllHotpotsStart()),\r\n    deleteHotpotRedux: (id) => dispatch(actions.deleteHotpot(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Admin\\ExtraInfoHotpot.js",["480","481","482"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./ExtraInfoHotpot.scss\";\r\nimport * as actions from \"../../../store/actions\";\r\n\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\nimport Select from \"react-select\";\r\nimport { getDetailInfoHotpot } from \"../../../services/hotpotService\";\r\nimport { CRUD_ACTIONS, LANGUAGES } from \"../../../utils\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ExtraInfoHotpot extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class ManageHotpot này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contentMarkdown: \"\",\r\n      contentHTML: \"\",\r\n      selectedHotpot: \"\",\r\n      description: \"\",\r\n      listHotpotNames: [],\r\n      hasOldData: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAllHotpotNames();\r\n  }\r\n\r\n  buildDataInputSelect = (inputData) => {\r\n    let result = [];\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        let object = {};\r\n        object.label = `${item.name}`;\r\n        object.value = item.id;\r\n        result.push(object);\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allHotpotNames !== this.props.allHotpotNames) {\r\n      let dataSelect = this.buildDataInputSelect(this.props.allHotpotNames);\r\n      this.setState({\r\n        listHotpotNames: dataSelect,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleEditorChange = ({ html, text }) => {\r\n    this.setState({\r\n      contentMarkdown: text,\r\n      contentHTML: html,\r\n    });\r\n  };\r\n\r\n  handleSaveContentMarkdown = () => {\r\n    let { hasOldData } = this.state;\r\n    this.props.saveDetailHotpot({\r\n      contentHTML: this.state.contentHTML,\r\n      contentMarkdown: this.state.contentMarkdown,\r\n      description: this.state.description,\r\n      hotpotId: this.state.selectedHotpot.value,\r\n      action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = async (selectedHotpot) => {\r\n    this.setState({ selectedHotpot });\r\n    let res = await getDetailInfoHotpot(selectedHotpot.value);\r\n    if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n      let markdown = res.data.Markdown;\r\n      this.setState({\r\n        contentHTML: markdown.contentHTML,\r\n        contentMarkdown: markdown.contentMarkdown,\r\n        description: markdown.description,\r\n        hasOldData: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        contentHTML: \"\",\r\n        contentMarkdown: \"\",\r\n        description: \"\",\r\n        hasOldData: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOnChangeDesc = (event) => {\r\n    this.setState({\r\n      description: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { hasOldData } = this.state;\r\n    return (\r\n      <div className=\"manage-hotpot-container\">\r\n        <div className=\"manage-hotpot-title\">Add restaurant infomation</div>\r\n        <div className=\"more-info\">\r\n          <div className=\"content-left form-group\">\r\n            <label>Chọn nhà hàng</label>\r\n            <Select\r\n              value={this.state.selectedHotpot}\r\n              onChange={this.handleChangeSelect}\r\n              options={this.state.listHotpotNames}\r\n            />\r\n          </div>\r\n          <div className=\"content-right\">\r\n            <label>Thông tin giới thiệu</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              rows=\"4\"\r\n              onChange={(event) => this.handleOnChangeDesc(event)}\r\n              value={this.state.description}\r\n            >\r\n              asdfghj\r\n            </textarea>\r\n          </div>\r\n        </div>\r\n        <div className=\"manage-hotpot-editor\">\r\n          <label>Thông tin chi tiết</label>\r\n          <MdEditor\r\n            style={{ height: \"500px\" }}\r\n            renderHTML={(text) => mdParser.render(text)}\r\n            onChange={this.handleEditorChange}\r\n            value={this.state.contentMarkdown}\r\n          />\r\n        </div>\r\n        <button\r\n          className={\r\n            hasOldData === true\r\n              ? \"save-content-hotpot\"\r\n              : \"create-content-hotpot\"\r\n          }\r\n          onClick={() => this.handleSaveContentMarkdown()}\r\n        >\r\n          {hasOldData === true ? (\r\n            <span>Lưu thông tin </span>\r\n          ) : (\r\n            <span>Tạo thông tin</span>\r\n          )}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n    language: state.app.language,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n    saveDetailHotpot: (data) => dispatch(actions.saveDetailHotpot(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtraInfoHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ExtraInfoHotpot.js",["483","484","485"],"import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./ExtraInfoHotpot.scss\";\r\nimport * as actions from \"../../../store/actions\";\r\n\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\nimport Select from \"react-select\";\r\nimport { getDetailInfoHotpot } from \"../../../services/hotpotService\";\r\nimport { CRUD_ACTIONS, LANGUAGES } from \"../../../utils\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ExtraInfoHotpot extends Component {\r\n  state = {};\r\n  //constructor:\r\n  //khi component được render thì nó sẽ check hàm constructor đầu tiên\r\n  // khởi tạo những state (những biến mà ta muốn dùng class ManageHotpot này)\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contentMarkdown: \"\",\r\n      contentHTML: \"\",\r\n      selectedHotpot: \"\",\r\n      description: \"\",\r\n      listHotpotNames: [],\r\n      hasOldData: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAllHotpotNames();\r\n  }\r\n\r\n  buildDataInputSelect = (inputData) => {\r\n    console.log(\"check inputData\", inputData);\r\n    let result = [];\r\n    let { userInfo } = this.props;\r\n    console.log(\"check userInfo11\", userInfo);\r\n    if (inputData && inputData.length > 0) {\r\n      inputData.map((item, index) => {\r\n        let object = {};\r\n        if (item.staffId === userInfo.id) {\r\n          object.label = `${item.name}`;\r\n          object.value = item.id;\r\n          result.push(object);\r\n        }\r\n      });\r\n    }\r\n    console.log(\"check result\", result);\r\n    return result;\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.allHotpotNames !== this.props.allHotpotNames) {\r\n      let dataSelect = this.buildDataInputSelect(this.props.allHotpotNames);\r\n      this.setState({\r\n        listHotpotNames: dataSelect,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleEditorChange = ({ html, text }) => {\r\n    this.setState({\r\n      contentMarkdown: text,\r\n      contentHTML: html,\r\n    });\r\n  };\r\n\r\n  handleSaveContentMarkdown = () => {\r\n    let { hasOldData } = this.state;\r\n    this.props.saveDetailHotpot({\r\n      contentHTML: this.state.contentHTML,\r\n      contentMarkdown: this.state.contentMarkdown,\r\n      description: this.state.description,\r\n      hotpotId: this.state.selectedHotpot.value,\r\n      action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = async (selectedHotpot) => {\r\n    this.setState({ selectedHotpot });\r\n    let res = await getDetailInfoHotpot(selectedHotpot.value);\r\n    if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n      let markdown = res.data.Markdown;\r\n      this.setState({\r\n        contentHTML: markdown.contentHTML,\r\n        contentMarkdown: markdown.contentMarkdown,\r\n        description: markdown.description,\r\n        hasOldData: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        contentHTML: \"\",\r\n        contentMarkdown: \"\",\r\n        description: \"\",\r\n        hasOldData: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOnChangeDesc = (event) => {\r\n    this.setState({\r\n      description: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { hasOldData } = this.state;\r\n    return (\r\n      <div className=\"manage-hotpot-container\">\r\n        <div className=\"manage-hotpot-title\">Add restaurant infomation</div>\r\n        <div className=\"more-info\">\r\n          <div className=\"content-left form-group\">\r\n            <label>Chọn nhà hàng</label>\r\n            <Select\r\n              value={this.state.selectedHotpot}\r\n              onChange={this.handleChangeSelect}\r\n              options={this.state.listHotpotNames}\r\n            />\r\n          </div>\r\n          <div className=\"content-right\">\r\n            <label>Thông tin giới thiệu</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              rows=\"4\"\r\n              onChange={(event) => this.handleOnChangeDesc(event)}\r\n              value={this.state.description}\r\n            >\r\n              asdfghj\r\n            </textarea>\r\n          </div>\r\n        </div>\r\n        <div className=\"manage-hotpot-editor\">\r\n          <label>Thông tin chi tiết</label>\r\n          <MdEditor\r\n            style={{ height: \"500px\" }}\r\n            renderHTML={(text) => mdParser.render(text)}\r\n            onChange={this.handleEditorChange}\r\n            value={this.state.contentMarkdown}\r\n          />\r\n        </div>\r\n        <button\r\n          className={\r\n            hasOldData === true\r\n              ? \"save-content-hotpot\"\r\n              : \"create-content-hotpot\"\r\n          }\r\n          onClick={() => this.handleSaveContentMarkdown()}\r\n        >\r\n          {hasOldData === true ? (\r\n            <span>Lưu thông tin </span>\r\n          ) : (\r\n            <span>Tạo thông tin</span>\r\n          )}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allHotpotNames: state.admin.allHotpotNames,\r\n    language: state.app.language,\r\n    userInfo: state.user.userInfo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllHotpotNames: () => dispatch(actions.fetchAllHotpotNames()),\r\n    saveDetailHotpot: (data) => dispatch(actions.saveDetailHotpot(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtraInfoHotpot);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ManageCustomer.js",["486"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./ManageCustomer.scss\";\r\nimport DatePicker from \"../../../components/Input/DatePicker\";\r\nimport {\r\n  getListCustomerForStaff,\r\n  getHotpotByStaffId,\r\n} from \"../../../services/staffService\";\r\nimport moment from \"moment\";\r\n\r\nclass ManageCustomer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentDate: moment(new Date()).add(0, \"days\").startOf(\"day\").valueOf(),\r\n      dataCustomer: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let { userInfo } = this.props;\r\n    let { currentDate } = this.state;\r\n    let formatedDate = new Date(currentDate).getTime();\r\n    this.getDataCustomer(userInfo, formatedDate);\r\n  }\r\n\r\n  getDataCustomer = async (userInfo, formatedDate) => {\r\n    let res = await getListCustomerForStaff({\r\n      staffId: userInfo.id,\r\n      date: formatedDate,\r\n    });\r\n\r\n    let res1 = await getHotpotByStaffId(userInfo.id);\r\n    console.log(\"res1\", res1);\r\n    if (res && res.errCode === 0) {\r\n      this.setState({\r\n        dataCustomer: res.data,\r\n      });\r\n    }\r\n  };\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeDatePicker = (date) => {\r\n    this.setState(\r\n      {\r\n        currentDate: date[0],\r\n      },\r\n      () => {\r\n        let { userInfo } = this.props;\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        this.getDataCustomer(userInfo, formatedDate);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    console.log(\"state\", this.state);\r\n    let { dataCustomer } = this.state;\r\n    return (\r\n      <div className=\"manage-customer-container\">\r\n        <div className=\"m-c-title\">Quan ly khach hang</div>\r\n        <div className=\"manage-customer-body row\">\r\n          <div className=\"col-4 form-group\">\r\n            <label>Chon ngay</label>\r\n            <DatePicker\r\n              onChange={this.handleOnChangeDatePicker}\r\n              className=\"form-control\"\r\n              value={this.state.currentDate}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 table-manage-customer\">\r\n            <table style={{ width: \"100%\" }}>\r\n              <tbody>\r\n                <tr>\r\n                  <th>STT </th>\r\n                  <th>Time</th>\r\n                  <th>First Name</th>\r\n                  <th>Last Name</th>\r\n                  <th>Email</th>\r\n                  <th>Phone Number</th>\r\n                </tr>\r\n                {dataCustomer && dataCustomer.length > 0 ? (\r\n                  dataCustomer.map((item, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{item.timeTypeDataBooking.valueVi}</td>\r\n                        <td>{item.customerData.firstName}</td>\r\n                        <td>{item.customerData.lastName}</td>\r\n                        <td>{item.customerData.email}</td>\r\n                        <td>{item.customerData.phonenumber}</td>\r\n                      </tr>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <tr>no data</tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n    userInfo: state.user.userInfo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageCustomer);\r\n","C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\services\\staffService.js",[],"C:\\Users\\admin\\Downloads\\GR2\\reactjs\\src\\containers\\System\\Staff\\ManageHp.js",["487","488","489","490"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport \"./ManageHp.scss\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport { LANGUAGES, CommonUtils } from \"../../../utils\";\r\nimport Lightbox from \"react-image-lightbox\";\r\nimport { createNewHp } from \"../../../services/hotpotService\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getHotpotByStaffId } from \"../../../services/staffService\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageHp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      imageBase64: \"\",\r\n      hotpotId: \"\",\r\n      previewImgURL: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let stateCopy = { ...this.state };\r\n    stateCopy[id] = event.target.value;\r\n    this.setState({\r\n      ...stateCopy,\r\n    });\r\n  };\r\n\r\n  //   handleEditorChange = ({ html, text }) => {\r\n  //     this.setState({\r\n  //       descriptionHTML: html,\r\n  //       descriptionMarkdown: text,\r\n  //     });\r\n  //   };\r\n\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      console.log(\"check base64\", base64);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        imageBase64: base64,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n\r\n  handleSaveNewHp = async () => {\r\n    console.log(\"hp\", this.state);\r\n    let res = await createNewHp(this.state);\r\n    if (res && res.errCode === 0) {\r\n      toast.success(\"Create new hp successfully!\");\r\n      this.state = {\r\n        name: \"\",\r\n        imageBase64: \"\",\r\n        //hotpotId: \"\",\r\n      };\r\n    } else {\r\n      toast.error(\"Create new hp serror!\");\r\n    }\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let { userInfo } = this.props;\r\n    this.getHotpotId(userInfo);\r\n  }\r\n\r\n  getHotpotId = async (userInfo) => {\r\n    let res = await getHotpotByStaffId(userInfo.id);\r\n    if (res && res.errCode === 0) {\r\n      this.setState({\r\n        hotpotId: res.data.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { hotpotId } = this.state;\r\n    console.log(\"hotpotId\", hotpotId);\r\n    return (\r\n      <div className=\"manage-hp-container\">\r\n        <div className=\"manage-hp-title\">Manage hotpot</div>\r\n\r\n        <div className=\"add-new-hp row\">\r\n          <div className=\"col-6 form-group\">\r\n            <label>Hotpot name</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"name\")}\r\n            ></input>\r\n          </div>\r\n          {/* <div className=\"col-6 form-group\">\r\n            <label>hotpotId</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={this.state.hotpotId}\r\n              onChange={(event) => this.handleOnChangeInput(event, \"hotpotId\")}\r\n            ></input>\r\n          </div> */}\r\n          <div className=\"col-12 form-group\">\r\n            <label>Image</label>\r\n            {/* <input className=\"form-control-file\" type=\"file\"\r\n            onChange={(event) => this.handleOnChangeImage(event)}></input> */}\r\n            <div className=\"preview-img-container\">\r\n              <input\r\n                id=\"previewImg\"\r\n                type=\"file\"\r\n                hidden\r\n                onChange={(event) => this.handleOnChangeImage(event)}\r\n              />\r\n              <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                Upload image <i className=\"fas fa-upload\"></i>\r\n              </label>\r\n              <div\r\n                className=\"preview-image\"\r\n                style={{\r\n                  backgroundImage: `url(${this.state.previewImgURL})`,\r\n                }}\r\n                onClick={() => this.openPreviewImage()}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn-save-hp\"\r\n              onClick={() => this.handleSaveNewHp()}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true && (\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    language: state.app.language,\r\n    userInfo: state.user.userInfo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageHp);\r\n",{"ruleId":"491","replacedBy":"492"},{"ruleId":"493","replacedBy":"494"},{"ruleId":"495","severity":1,"message":"496","line":19,"column":8,"nodeType":"497","messageId":"498","endLine":19,"endColumn":14},{"ruleId":"495","severity":1,"message":"499","line":22,"column":10,"nodeType":"497","messageId":"498","endLine":22,"endColumn":32},{"ruleId":"491","replacedBy":"500"},{"ruleId":"493","replacedBy":"501"},{"ruleId":"495","severity":1,"message":"502","line":8,"column":10,"nodeType":"497","messageId":"498","endLine":8,"endColumn":26},{"ruleId":"503","severity":1,"message":"504","line":28,"column":1,"nodeType":"505","endLine":34,"endColumn":6},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"506","line":5,"column":10,"nodeType":"497","messageId":"498","endLine":5,"endColumn":17},{"ruleId":"495","severity":1,"message":"507","line":2,"column":8,"nodeType":"497","messageId":"498","endLine":2,"endColumn":9},{"ruleId":"495","severity":1,"message":"508","line":15,"column":17,"nodeType":"497","messageId":"498","endLine":15,"endColumn":21},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"509","line":78,"column":11,"nodeType":"497","messageId":"498","endLine":78,"endColumn":19},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"506","line":5,"column":10,"nodeType":"497","messageId":"498","endLine":5,"endColumn":17},{"ruleId":"495","severity":1,"message":"510","line":9,"column":8,"nodeType":"497","messageId":"498","endLine":9,"endColumn":18},{"ruleId":"495","severity":1,"message":"511","line":10,"column":8,"nodeType":"497","messageId":"498","endLine":10,"endColumn":18},{"ruleId":"495","severity":1,"message":"512","line":12,"column":8,"nodeType":"497","messageId":"498","endLine":12,"endColumn":16},{"ruleId":"495","severity":1,"message":"502","line":6,"column":10,"nodeType":"497","messageId":"498","endLine":6,"endColumn":26},{"ruleId":"495","severity":1,"message":"513","line":107,"column":11,"nodeType":"497","messageId":"498","endLine":107,"endColumn":19},{"ruleId":"495","severity":1,"message":"514","line":107,"column":21,"nodeType":"497","messageId":"498","endLine":107,"endColumn":33},{"ruleId":"495","severity":1,"message":"515","line":107,"column":35,"nodeType":"497","messageId":"498","endLine":107,"endColumn":44},{"ruleId":"495","severity":1,"message":"516","line":108,"column":9,"nodeType":"497","messageId":"498","endLine":108,"endColumn":24},{"ruleId":"495","severity":1,"message":"502","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":26},{"ruleId":"495","severity":1,"message":"517","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":14},{"ruleId":"518","severity":1,"message":"519","line":52,"column":25,"nodeType":"520","messageId":"521","endLine":52,"endColumn":27},{"ruleId":"495","severity":1,"message":"502","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":26},{"ruleId":"495","severity":1,"message":"502","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":26},{"ruleId":"495","severity":1,"message":"502","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":26},{"ruleId":"522","severity":1,"message":"523","line":18,"column":11,"nodeType":"524","messageId":"525","endLine":18,"endColumn":74,"fix":"526"},{"ruleId":"495","severity":1,"message":"527","line":10,"column":10,"nodeType":"497","messageId":"498","endLine":10,"endColumn":38},{"ruleId":"495","severity":1,"message":"516","line":249,"column":9,"nodeType":"497","messageId":"498","endLine":249,"endColumn":24},{"ruleId":"495","severity":1,"message":"528","line":250,"column":9,"nodeType":"497","messageId":"498","endLine":250,"endColumn":18},{"ruleId":"495","severity":1,"message":"529","line":254,"column":7,"nodeType":"497","messageId":"498","endLine":254,"endColumn":18},{"ruleId":"495","severity":1,"message":"514","line":256,"column":7,"nodeType":"497","messageId":"498","endLine":256,"endColumn":19},{"ruleId":"495","severity":1,"message":"530","line":257,"column":7,"nodeType":"497","messageId":"498","endLine":257,"endColumn":13},{"ruleId":"495","severity":1,"message":"531","line":260,"column":7,"nodeType":"497","messageId":"498","endLine":260,"endColumn":11},{"ruleId":"495","severity":1,"message":"532","line":261,"column":7,"nodeType":"497","messageId":"498","endLine":261,"endColumn":12},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"533","line":193,"column":11,"nodeType":"497","messageId":"498","endLine":193,"endColumn":15},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"534","line":8,"column":8,"nodeType":"497","messageId":"498","endLine":8,"endColumn":16},{"ruleId":"495","severity":1,"message":"535","line":16,"column":7,"nodeType":"497","messageId":"498","endLine":16,"endColumn":15},{"ruleId":"495","severity":1,"message":"536","line":19,"column":10,"nodeType":"497","messageId":"498","endLine":19,"endColumn":28},{"ruleId":"495","severity":1,"message":"537","line":6,"column":8,"nodeType":"497","messageId":"498","endLine":6,"endColumn":22},{"ruleId":"495","severity":1,"message":"538","line":7,"column":8,"nodeType":"497","messageId":"498","endLine":7,"endColumn":23},{"ruleId":"495","severity":1,"message":"539","line":40,"column":11,"nodeType":"497","messageId":"498","endLine":40,"endColumn":19},{"ruleId":"495","severity":1,"message":"540","line":44,"column":5,"nodeType":"497","messageId":"498","endLine":44,"endColumn":9},{"ruleId":"495","severity":1,"message":"541","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":18},{"ruleId":"495","severity":1,"message":"542","line":3,"column":20,"nodeType":"497","messageId":"498","endLine":3,"endColumn":25},{"ruleId":"495","severity":1,"message":"543","line":3,"column":27,"nodeType":"497","messageId":"498","endLine":3,"endColumn":33},{"ruleId":"495","severity":1,"message":"544","line":8,"column":10,"nodeType":"497","messageId":"498","endLine":8,"endColumn":22},{"ruleId":"495","severity":1,"message":"545","line":8,"column":35,"nodeType":"497","messageId":"498","endLine":8,"endColumn":45},{"ruleId":"495","severity":1,"message":"546","line":10,"column":8,"nodeType":"497","messageId":"498","endLine":10,"endColumn":14},{"ruleId":"495","severity":1,"message":"547","line":12,"column":13,"nodeType":"497","messageId":"498","endLine":12,"endColumn":19},{"ruleId":"518","severity":1,"message":"519","line":51,"column":35,"nodeType":"520","messageId":"521","endLine":51,"endColumn":37},{"ruleId":"518","severity":1,"message":"519","line":101,"column":35,"nodeType":"520","messageId":"521","endLine":101,"endColumn":37},{"ruleId":"495","severity":1,"message":"548","line":4,"column":8,"nodeType":"497","messageId":"498","endLine":4,"endColumn":14},{"ruleId":"495","severity":1,"message":"549","line":6,"column":8,"nodeType":"497","messageId":"498","endLine":6,"endColumn":20},{"ruleId":"495","severity":1,"message":"548","line":4,"column":8,"nodeType":"497","messageId":"498","endLine":4,"endColumn":14},{"ruleId":"495","severity":1,"message":"546","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":14},{"ruleId":"495","severity":1,"message":"549","line":6,"column":8,"nodeType":"497","messageId":"498","endLine":6,"endColumn":20},{"ruleId":"495","severity":1,"message":"550","line":10,"column":3,"nodeType":"497","messageId":"498","endLine":10,"endColumn":22},{"ruleId":"495","severity":1,"message":"550","line":7,"column":3,"nodeType":"497","messageId":"498","endLine":7,"endColumn":22},{"ruleId":"495","severity":1,"message":"549","line":13,"column":8,"nodeType":"497","messageId":"498","endLine":13,"endColumn":20},{"ruleId":"495","severity":1,"message":"502","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":26},{"ruleId":"495","severity":1,"message":"551","line":7,"column":10,"nodeType":"497","messageId":"498","endLine":7,"endColumn":19},{"ruleId":"495","severity":1,"message":"502","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":26},{"ruleId":"495","severity":1,"message":"551","line":7,"column":10,"nodeType":"497","messageId":"498","endLine":7,"endColumn":19},{"ruleId":"495","severity":1,"message":"502","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":26},{"ruleId":"495","severity":1,"message":"552","line":11,"column":3,"nodeType":"497","messageId":"498","endLine":11,"endColumn":20},{"ruleId":"495","severity":1,"message":"551","line":14,"column":10,"nodeType":"497","messageId":"498","endLine":14,"endColumn":19},{"ruleId":"518","severity":1,"message":"519","line":41,"column":28,"nodeType":"520","messageId":"521","endLine":41,"endColumn":30},{"ruleId":"495","severity":1,"message":"539","line":60,"column":11,"nodeType":"497","messageId":"498","endLine":60,"endColumn":19},{"ruleId":"495","severity":1,"message":"502","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":26},{"ruleId":"518","severity":1,"message":"519","line":50,"column":28,"nodeType":"520","messageId":"521","endLine":50,"endColumn":30},{"ruleId":"518","severity":1,"message":"519","line":101,"column":28,"nodeType":"520","messageId":"521","endLine":101,"endColumn":30},{"ruleId":"495","severity":1,"message":"539","line":40,"column":11,"nodeType":"497","messageId":"498","endLine":40,"endColumn":19},{"ruleId":"495","severity":1,"message":"502","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":26},{"ruleId":"495","severity":1,"message":"534","line":6,"column":8,"nodeType":"497","messageId":"498","endLine":6,"endColumn":16},{"ruleId":"495","severity":1,"message":"551","line":7,"column":10,"nodeType":"497","messageId":"498","endLine":7,"endColumn":19},{"ruleId":"495","severity":1,"message":"535","line":12,"column":7,"nodeType":"497","messageId":"498","endLine":12,"endColumn":15},{"ruleId":"495","severity":1,"message":"548","line":4,"column":8,"nodeType":"497","messageId":"498","endLine":4,"endColumn":14},{"ruleId":"495","severity":1,"message":"546","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":14},{"ruleId":"495","severity":1,"message":"549","line":6,"column":8,"nodeType":"497","messageId":"498","endLine":6,"endColumn":20},{"ruleId":"495","severity":1,"message":"550","line":10,"column":3,"nodeType":"497","messageId":"498","endLine":10,"endColumn":22},{"ruleId":"495","severity":1,"message":"553","line":13,"column":8,"nodeType":"497","messageId":"498","endLine":13,"endColumn":20},{"ruleId":"495","severity":1,"message":"554","line":57,"column":11,"nodeType":"497","messageId":"498","endLine":57,"endColumn":27},{"ruleId":"495","severity":1,"message":"555","line":3,"column":34,"nodeType":"497","messageId":"498","endLine":3,"endColumn":39},{"ruleId":"495","severity":1,"message":"556","line":10,"column":13,"nodeType":"497","messageId":"498","endLine":10,"endColumn":20},{"ruleId":"495","severity":1,"message":"557","line":11,"column":10,"nodeType":"497","messageId":"498","endLine":11,"endColumn":23},{"ruleId":"558","severity":1,"message":"559","line":208,"column":24,"nodeType":"497","messageId":"560","endLine":208,"endColumn":28},{"ruleId":"503","severity":1,"message":"561","line":1,"column":1,"nodeType":"505","endLine":7,"endColumn":3},{"ruleId":"495","severity":1,"message":"562","line":1,"column":8,"nodeType":"497","messageId":"498","endLine":1,"endColumn":13},{"ruleId":"495","severity":1,"message":"502","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":26},{"ruleId":"495","severity":1,"message":"563","line":4,"column":8,"nodeType":"497","messageId":"498","endLine":4,"endColumn":18},{"ruleId":"495","severity":1,"message":"564","line":7,"column":8,"nodeType":"497","messageId":"498","endLine":7,"endColumn":17},{"ruleId":"495","severity":1,"message":"565","line":11,"column":8,"nodeType":"497","messageId":"498","endLine":11,"endColumn":18},{"ruleId":"495","severity":1,"message":"566","line":12,"column":8,"nodeType":"497","messageId":"498","endLine":12,"endColumn":24},{"ruleId":"495","severity":1,"message":"541","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":18},{"ruleId":"495","severity":1,"message":"542","line":3,"column":20,"nodeType":"497","messageId":"498","endLine":3,"endColumn":25},{"ruleId":"495","severity":1,"message":"543","line":3,"column":27,"nodeType":"497","messageId":"498","endLine":3,"endColumn":33},{"ruleId":"495","severity":1,"message":"544","line":8,"column":10,"nodeType":"497","messageId":"498","endLine":8,"endColumn":22},{"ruleId":"495","severity":1,"message":"545","line":8,"column":35,"nodeType":"497","messageId":"498","endLine":8,"endColumn":45},{"ruleId":"495","severity":1,"message":"546","line":10,"column":8,"nodeType":"497","messageId":"498","endLine":10,"endColumn":14},{"ruleId":"495","severity":1,"message":"547","line":12,"column":13,"nodeType":"497","messageId":"498","endLine":12,"endColumn":19},{"ruleId":"518","severity":1,"message":"519","line":52,"column":35,"nodeType":"520","messageId":"521","endLine":52,"endColumn":37},{"ruleId":"518","severity":1,"message":"519","line":104,"column":35,"nodeType":"520","messageId":"521","endLine":104,"endColumn":37},{"ruleId":"495","severity":1,"message":"527","line":10,"column":10,"nodeType":"497","messageId":"498","endLine":10,"endColumn":38},{"ruleId":"495","severity":1,"message":"516","line":249,"column":9,"nodeType":"497","messageId":"498","endLine":249,"endColumn":24},{"ruleId":"495","severity":1,"message":"528","line":250,"column":9,"nodeType":"497","messageId":"498","endLine":250,"endColumn":18},{"ruleId":"495","severity":1,"message":"529","line":254,"column":7,"nodeType":"497","messageId":"498","endLine":254,"endColumn":18},{"ruleId":"495","severity":1,"message":"514","line":256,"column":7,"nodeType":"497","messageId":"498","endLine":256,"endColumn":19},{"ruleId":"495","severity":1,"message":"530","line":257,"column":7,"nodeType":"497","messageId":"498","endLine":257,"endColumn":13},{"ruleId":"495","severity":1,"message":"531","line":260,"column":7,"nodeType":"497","messageId":"498","endLine":260,"endColumn":11},{"ruleId":"495","severity":1,"message":"532","line":261,"column":7,"nodeType":"497","messageId":"498","endLine":261,"endColumn":12},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"534","line":8,"column":8,"nodeType":"497","messageId":"498","endLine":8,"endColumn":16},{"ruleId":"495","severity":1,"message":"535","line":16,"column":7,"nodeType":"497","messageId":"498","endLine":16,"endColumn":15},{"ruleId":"495","severity":1,"message":"536","line":19,"column":10,"nodeType":"497","messageId":"498","endLine":19,"endColumn":28},{"ruleId":"518","severity":1,"message":"519","line":52,"column":35,"nodeType":"520","messageId":"521","endLine":52,"endColumn":37},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"551","line":12,"column":24,"nodeType":"497","messageId":"498","endLine":12,"endColumn":33},{"ruleId":"518","severity":1,"message":"519","line":40,"column":35,"nodeType":"520","messageId":"521","endLine":40,"endColumn":37},{"ruleId":"495","severity":1,"message":"502","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"551","line":12,"column":24,"nodeType":"497","messageId":"498","endLine":12,"endColumn":33},{"ruleId":"518","severity":1,"message":"519","line":43,"column":35,"nodeType":"520","messageId":"521","endLine":43,"endColumn":37},{"ruleId":"495","severity":1,"message":"502","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":26},{"ruleId":"495","severity":1,"message":"502","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":26},{"ruleId":"495","severity":1,"message":"534","line":6,"column":8,"nodeType":"497","messageId":"498","endLine":6,"endColumn":16},{"ruleId":"495","severity":1,"message":"551","line":7,"column":10,"nodeType":"497","messageId":"498","endLine":7,"endColumn":19},{"ruleId":"495","severity":1,"message":"535","line":13,"column":7,"nodeType":"497","messageId":"498","endLine":13,"endColumn":15},"no-native-reassign",["567"],"no-negated-in-lhs",["568"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'CustomToastCloseButton' is defined but never used.",["567"],["568"],"'FormattedMessage' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'emitter' is defined but never used.","'_' is defined but never used.","'data' is assigned a value but never used.","'response' is assigned a value but never used.","'HotpotType' is defined but never used.","'Restaurant' is defined but never used.","'HandBook' is defined but never used.","'dataType' is assigned a value but never used.","'restaurantId' is assigned a value but never used.","'isClicked' is assigned a value but never used.","'restaurantNames' is assigned a value but never used.","'Slider' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"569","text":"570"},"'getAllRestaurantNamesService' is defined but never used.","'typeNames' is assigned a value but never used.","'phonenumber' is assigned a value but never used.","'typeId' is assigned a value but never used.","'note' is assigned a value but never used.","'image' is assigned a value but never used.","'res1' is assigned a value but never used.","'MdEditor' is defined but never used.","'mdParser' is assigned a value but never used.","'handleEditorChange' is defined but never used.","'HotpotSchedule' is defined but never used.","'HotpotExtraInfo' is defined but never used.","'language' is assigned a value but never used.","'name' is assigned a value but never used.","'Redirect' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'CRUD_ACTIONS' is defined but never used.","'dateFormat' is defined but never used.","'moment' is defined but never used.","'result' is defined but never used.","'Select' is defined but never used.","'localization' is defined but never used.","'getDetailInfoHotpot' is defined but never used.","'LANGUAGES' is defined but never used.","'getAllCodeService' is defined but never used.","'NumberFormat' is defined but never used.","'isShowDetailInfo' is assigned a value but never used.","'Popup' is defined but never used.","'actions' is defined but never used.","'getAllHotpots' is defined but never used.","no-self-assign","'item' is assigned to itself.","selfAssignment","Assign object to a variable before exporting as module default","'React' is defined but never used.","'UserManage' is defined but never used.","'UserRedux' is defined but never used.","'ManageType' is defined but never used.","'ManageRestaurant' is defined but never used.","no-global-assign","no-unsafe-negation",[610,610]," rel=\"noreferrer\""]