{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nimport { getAllCodeService, createNewRestaurantService, getAllRestaurants, deleteRestaurantService, editRestaurantService, getTopRestaurantService, getAllRestaurantNameServices, saveDetailRestaurantService, getAllTypeNamesService } from \"../../services/restaurantService\";\nimport { toast } from \"react-toastify\";\n\n// export const fetchProvinceStart = () => ({\n//   type: actionTypes.FETCH_PROVINCE_START,\n// });\n\n//provine\nexport const fetchProvinceStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_PROVINCE_START\n      });\n      let res = await getAllCodeService(\"PROVINCE\");\n      if (res && res.errCode === 0) {\n        dispatch(fetchProvinceSuccess(res.data));\n      } else {\n        dispatch(fetchProvinceFailed());\n      }\n    } catch (e) {\n      dispatch(fetchProvinceFailed());\n      console.log(\"fetchProvinceStart error\", e);\n    }\n  };\n};\nexport const fetchProvinceSuccess = provinceData => ({\n  type: actionTypes.FETCH_PROVINCE_SUCCESS,\n  data: provinceData\n});\nexport const fetchProvinceFailed = () => ({\n  type: actionTypes.FETCH_PROVINCE_FAILED\n});\n\n//price\n\nexport const fetchPriceSuccess = priceData => ({\n  type: actionTypes.FETCH_PRICE_SUCCESS,\n  data: priceData\n});\nexport const fetchPriceFailed = () => ({\n  type: actionTypes.FETCH_PRICE_FAILED\n});\n\n//payment\n\nexport const fetchPaymentSuccess = paymentData => ({\n  type: actionTypes.FETCH_PAYMENT_SUCCESS,\n  data: paymentData\n});\nexport const fetchPaymentFailed = () => ({\n  type: actionTypes.FETCH_PAYMENT_FAILED\n});\nexport const fetchPriceStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_PRICE_START\n      });\n      let res = await getAllCodeService(\"PRICE\");\n      if (res && res.errCode === 0) {\n        dispatch(fetchPriceSuccess(res.data));\n      } else {\n        dispatch(fetchPriceFailed());\n      }\n    } catch (e) {\n      dispatch(fetchPriceFailed());\n      console.log(\"fetchPriceStart error\", e);\n    }\n  };\n};\nexport const fetchPaymentStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_PAYMENT_START\n      });\n      let res = await getAllCodeService(\"PAYMENT\");\n      if (res && res.errCode === 0) {\n        dispatch(fetchPaymentSuccess(res.data));\n      } else {\n        dispatch(fetchPaymentFailed());\n      }\n    } catch (e) {\n      dispatch(fetchPaymentFailed());\n      console.log(\"fetchPaymentStart error\", e);\n    }\n  };\n};\nexport const fetchAllTypeNames = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllTypeNamesService();\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_SUCCESS,\n          dataTypeNames: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"FETCH_ALL_TYPE_NAME_FAILED error\", e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED\n      });\n    }\n  };\n};\nexport const createNewRestaurant = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewRestaurantService(data);\n      if (res && res.errCode === 0) {\n        toast.success(\"Create a new restaurant succeed!\");\n        dispatch(createRestaurantSuccess());\n        dispatch(fetchAllRestaurantsStart());\n      } else {\n        toast.error(\"Create a new restaurant error!\");\n        dispatch(createRestaurantFailed());\n      }\n    } catch (e) {\n      dispatch(createRestaurantFailed());\n      console.log(\"createNewRestaurant error\", e);\n    }\n  };\n};\nexport const createRestaurantFailed = () => ({\n  type: actionTypes.CREATE_RESTAURANT_FAILED\n});\nexport const createRestaurantSuccess = () => ({\n  type: actionTypes.CREATE_RESTAURANT_SUCCESS\n});\nexport const fetchAllRestaurantsStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_PROVINCE_START\n      });\n      let res = await getAllRestaurants(\"ALL\");\n      let res1 = await getTopRestaurantService(\"\");\n      console.log(\"check res get top restaurant res:\", res);\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllRestaurantsSuccess(res.restaurants.restaurants.reverse()));\n      } else {\n        dispatch(fetchAllRestaurantsFailed());\n      }\n    } catch (e) {\n      dispatch(fetchAllRestaurantsFailed());\n      console.log(\"fetchAllRestaurantsStart error\", e);\n    }\n  };\n};\nexport const fetchAllRestaurantsFailed = () => ({\n  type: actionTypes.FETCH_ALL_RESTAURANTS_FAILED\n});\nexport const fetchAllRestaurantsSuccess = data => ({\n  type: actionTypes.FETCH_ALL_RESTAURANTS_SUCCESS,\n  restaurants: data\n});\nexport const deleteRestaurant = restaurantId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteRestaurantService(restaurantId);\n      if (res && res.errCode === 0) {\n        toast.success(\"Delete the restaurant succeed!\");\n        dispatch(deleteRestaurantSuccess());\n        dispatch(fetchAllRestaurantsStart());\n      } else {\n        toast.error(\"Delete the restaurant error!\");\n        dispatch(deleteRestaurantFailed());\n      }\n    } catch (e) {\n      dispatch(deleteRestaurantFailed());\n      console.log(\"deleteRestaurant error\", e);\n    }\n  };\n};\nexport const deleteRestaurantFailed = () => ({\n  type: actionTypes.DELETE_RESTAURANT_FAILED\n});\nexport const deleteRestaurantSuccess = data => ({\n  type: actionTypes.DELETE_RESTAURANT_SUCCESS,\n  restaurants: data\n});\nexport const editRestaurant = restaurantId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editRestaurantService(restaurantId);\n      if (res && res.errCode === 0) {\n        toast.success(\"edit the restaurant succeed!\");\n        dispatch(editRestaurantSuccess());\n        dispatch(fetchAllRestaurantsStart());\n      } else {\n        toast.error(\"edit the restaurant error!\");\n        dispatch(editRestaurantFailed());\n      }\n    } catch (e) {\n      dispatch(editRestaurantFailed());\n      console.log(\"editRestaurant error\", e);\n    }\n  };\n};\nexport const editRestaurantFailed = () => ({\n  type: actionTypes.DELETE_RESTAURANT_FAILED\n});\nexport const editRestaurantSuccess = data => ({\n  type: actionTypes.DELETE_RESTAURANT_SUCCESS,\n  restaurants: data\n});\nexport const fetchTopRestaurant = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getTopRestaurantService(\"1000\");\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_TOP_RESTAURANT_SUCCESS,\n          dataRestaurants: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_RESTAURANT_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"FETCH_TOP_RESTAURANT_FAILED error\", e);\n      dispatch({\n        type: actionTypes.FETCH_TOP_RESTAURANT_FAILED\n      });\n    }\n  };\n};\nexport const fetchAllRestaurantNames = () => {\n  console.log(\"FETCH_ hotpo1\");\n  return async (dispatch, getState) => {\n    try {\n      console.log(\"FETCH_ hotpo2\");\n      let res = await getAllRestaurantNameServices();\n      if (res && res.errCode === 0) {\n        console.log(\"FETCH_ hotpo3\");\n        dispatch({\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_SUCCESS,\n          dataRestaurantNames: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"FETCH_ALL_RESTAURANT_NAME_FAILED error\", e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED\n      });\n    }\n  };\n};\nexport const saveDetailRestaurant = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await saveDetailRestaurantService(data);\n      if (res && res.errCode === 0) {\n        toast.success(\"Save info detail restaurant succeed!\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_RESTAURANT_SUCCESS\n        });\n      } else {\n        console.log(\"error res linh\", res);\n        toast.error(\"Save info detail restaurant error!\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_RESTAURANT_FAILED\n        });\n      }\n    } catch (e) {\n      toast.error(\"Save info detail RESTAURANT error!\");\n      console.log(\"SAVE_DETAIL_RESTAURANT_FAILED error\", e);\n      dispatch({\n        type: actionTypes.FSAVE_DETAIL_RESTAURANT_FAILED\n      });\n    }\n  };\n};\nexport const fetchAllScheduleTime = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"TIME\");\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\n          dataTime: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(\"FETCH_ALLCODE_SCHEDULE_TIME_FAILED error\", e);\n      dispatch({\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED\n      });\n    }\n  };\n};","map":{"version":3,"names":["actionTypes","getAllCodeService","createNewRestaurantService","getAllRestaurants","deleteRestaurantService","editRestaurantService","getTopRestaurantService","getAllRestaurantNameServices","saveDetailRestaurantService","getAllTypeNamesService","toast","fetchProvinceStart","dispatch","getState","type","FETCH_PROVINCE_START","res","errCode","fetchProvinceSuccess","data","fetchProvinceFailed","e","console","log","provinceData","FETCH_PROVINCE_SUCCESS","FETCH_PROVINCE_FAILED","fetchPriceSuccess","priceData","FETCH_PRICE_SUCCESS","fetchPriceFailed","FETCH_PRICE_FAILED","fetchPaymentSuccess","paymentData","FETCH_PAYMENT_SUCCESS","fetchPaymentFailed","FETCH_PAYMENT_FAILED","fetchPriceStart","FETCH_PRICE_START","fetchPaymentStart","FETCH_PAYMENT_START","fetchAllTypeNames","FETCH_ALL_TYPE_NAMES_SUCCESS","dataTypeNames","FETCH_ALL_TYPE_NAMES_FAILED","createNewRestaurant","success","createRestaurantSuccess","fetchAllRestaurantsStart","error","createRestaurantFailed","CREATE_RESTAURANT_FAILED","CREATE_RESTAURANT_SUCCESS","res1","fetchAllRestaurantsSuccess","restaurants","reverse","fetchAllRestaurantsFailed","FETCH_ALL_RESTAURANTS_FAILED","FETCH_ALL_RESTAURANTS_SUCCESS","deleteRestaurant","restaurantId","deleteRestaurantSuccess","deleteRestaurantFailed","DELETE_RESTAURANT_FAILED","DELETE_RESTAURANT_SUCCESS","editRestaurant","editRestaurantSuccess","editRestaurantFailed","fetchTopRestaurant","FETCH_TOP_RESTAURANT_SUCCESS","dataRestaurants","FETCH_TOP_RESTAURANT_FAILED","fetchAllRestaurantNames","FETCH_ALL_RESTAURANT_NAMES_SUCCESS","dataRestaurantNames","FETCH_ALL_RESTAURANT_NAMES_FAILED","saveDetailRestaurant","SAVE_DETAIL_RESTAURANT_SUCCESS","SAVE_DETAIL_RESTAURANT_FAILED","FSAVE_DETAIL_RESTAURANT_FAILED","fetchAllScheduleTime","FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS","dataTime","FETCH_ALLCODE_SCHEDULE_TIME_FAILED"],"sources":["C:/Users/admin/Downloads/GR2 - Copy (3)/reactjs/src/store/actions/adminActions.js"],"sourcesContent":["import actionTypes from \"./actionTypes\";\r\nimport {\r\n  getAllCodeService,\r\n  createNewRestaurantService,\r\n  getAllRestaurants,\r\n  deleteRestaurantService,\r\n  editRestaurantService,\r\n  getTopRestaurantService,\r\n  getAllRestaurantNameServices,\r\n  saveDetailRestaurantService,\r\n  getAllTypeNamesService,\r\n} from \"../../services/restaurantService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// export const fetchProvinceStart = () => ({\r\n//   type: actionTypes.FETCH_PROVINCE_START,\r\n// });\r\n\r\n//provine\r\nexport const fetchProvinceStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PROVINCE_START,\r\n      });\r\n      let res = await getAllCodeService(\"PROVINCE\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchProvinceSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchProvinceFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchProvinceFailed());\r\n      console.log(\"fetchProvinceStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchProvinceSuccess = (provinceData) => ({\r\n  type: actionTypes.FETCH_PROVINCE_SUCCESS,\r\n  data: provinceData,\r\n});\r\n\r\nexport const fetchProvinceFailed = () => ({\r\n  type: actionTypes.FETCH_PROVINCE_FAILED,\r\n});\r\n\r\n//price\r\n\r\nexport const fetchPriceSuccess = (priceData) => ({\r\n  type: actionTypes.FETCH_PRICE_SUCCESS,\r\n  data: priceData,\r\n});\r\n\r\nexport const fetchPriceFailed = () => ({\r\n  type: actionTypes.FETCH_PRICE_FAILED,\r\n});\r\n\r\n//payment\r\n\r\nexport const fetchPaymentSuccess = (paymentData) => ({\r\n  type: actionTypes.FETCH_PAYMENT_SUCCESS,\r\n  data: paymentData,\r\n});\r\n\r\nexport const fetchPaymentFailed = () => ({\r\n  type: actionTypes.FETCH_PAYMENT_FAILED,\r\n});\r\n\r\nexport const fetchPriceStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PRICE_START,\r\n      });\r\n      let res = await getAllCodeService(\"PRICE\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchPriceSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchPriceFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchPriceFailed());\r\n      console.log(\"fetchPriceStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchPaymentStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PAYMENT_START,\r\n      });\r\n      let res = await getAllCodeService(\"PAYMENT\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch(fetchPaymentSuccess(res.data));\r\n      } else {\r\n        dispatch(fetchPaymentFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchPaymentFailed());\r\n      console.log(\"fetchPaymentStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllTypeNames = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllTypeNamesService();\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_SUCCESS,\r\n          dataTypeNames: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_TYPE_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_TYPE_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const createNewRestaurant = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await createNewRestaurantService(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Create a new restaurant succeed!\");\r\n        dispatch(createRestaurantSuccess());\r\n        dispatch(fetchAllRestaurantsStart());\r\n      } else {\r\n        toast.error(\"Create a new restaurant error!\");\r\n        dispatch(createRestaurantFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(createRestaurantFailed());\r\n      console.log(\"createNewRestaurant error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createRestaurantFailed = () => ({\r\n  type: actionTypes.CREATE_RESTAURANT_FAILED,\r\n});\r\n\r\nexport const createRestaurantSuccess = () => ({\r\n  type: actionTypes.CREATE_RESTAURANT_SUCCESS,\r\n});\r\n\r\nexport const fetchAllRestaurantsStart = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: actionTypes.FETCH_PROVINCE_START,\r\n      });\r\n      let res = await getAllRestaurants(\"ALL\");\r\n      let res1 = await getTopRestaurantService(\"\");\r\n      console.log(\"check res get top restaurant res:\", res);\r\n      if (res && res.errCode === 0) {\r\n        dispatch(\r\n          fetchAllRestaurantsSuccess(res.restaurants.restaurants.reverse())\r\n        );\r\n      } else {\r\n        dispatch(fetchAllRestaurantsFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(fetchAllRestaurantsFailed());\r\n      console.log(\"fetchAllRestaurantsStart error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllRestaurantsFailed = () => ({\r\n  type: actionTypes.FETCH_ALL_RESTAURANTS_FAILED,\r\n});\r\n\r\nexport const fetchAllRestaurantsSuccess = (data) => ({\r\n  type: actionTypes.FETCH_ALL_RESTAURANTS_SUCCESS,\r\n  restaurants: data,\r\n});\r\n\r\nexport const deleteRestaurant = (restaurantId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await deleteRestaurantService(restaurantId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Delete the restaurant succeed!\");\r\n        dispatch(deleteRestaurantSuccess());\r\n        dispatch(fetchAllRestaurantsStart());\r\n      } else {\r\n        toast.error(\"Delete the restaurant error!\");\r\n        dispatch(deleteRestaurantFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(deleteRestaurantFailed());\r\n      console.log(\"deleteRestaurant error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteRestaurantFailed = () => ({\r\n  type: actionTypes.DELETE_RESTAURANT_FAILED,\r\n});\r\n\r\nexport const deleteRestaurantSuccess = (data) => ({\r\n  type: actionTypes.DELETE_RESTAURANT_SUCCESS,\r\n  restaurants: data,\r\n});\r\n\r\nexport const editRestaurant = (restaurantId) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await editRestaurantService(restaurantId);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"edit the restaurant succeed!\");\r\n        dispatch(editRestaurantSuccess());\r\n        dispatch(fetchAllRestaurantsStart());\r\n      } else {\r\n        toast.error(\"edit the restaurant error!\");\r\n        dispatch(editRestaurantFailed());\r\n      }\r\n    } catch (e) {\r\n      dispatch(editRestaurantFailed());\r\n      console.log(\"editRestaurant error\", e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editRestaurantFailed = () => ({\r\n  type: actionTypes.DELETE_RESTAURANT_FAILED,\r\n});\r\n\r\nexport const editRestaurantSuccess = (data) => ({\r\n  type: actionTypes.DELETE_RESTAURANT_SUCCESS,\r\n  restaurants: data,\r\n});\r\n\r\nexport const fetchTopRestaurant = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getTopRestaurantService(\"1000\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_TOP_RESTAURANT_SUCCESS,\r\n          dataRestaurants: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_TOP_RESTAURANT_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_TOP_RESTAURANT_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_TOP_RESTAURANT_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllRestaurantNames = () => {\r\n  console.log(\"FETCH_ hotpo1\");\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      console.log(\"FETCH_ hotpo2\");\r\n      let res = await getAllRestaurantNameServices();\r\n      if (res && res.errCode === 0) {\r\n        console.log(\"FETCH_ hotpo3\");\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_SUCCESS,\r\n          dataRestaurantNames: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALL_RESTAURANT_NAME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALL_RESTAURANT_NAMES_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveDetailRestaurant = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await saveDetailRestaurantService(data);\r\n      if (res && res.errCode === 0) {\r\n        toast.success(\"Save info detail restaurant succeed!\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_RESTAURANT_SUCCESS,\r\n        });\r\n      } else {\r\n        console.log(\"error res linh\", res);\r\n        toast.error(\"Save info detail restaurant error!\");\r\n        dispatch({\r\n          type: actionTypes.SAVE_DETAIL_RESTAURANT_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Save info detail RESTAURANT error!\");\r\n      console.log(\"SAVE_DETAIL_RESTAURANT_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FSAVE_DETAIL_RESTAURANT_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let res = await getAllCodeService(\"TIME\");\r\n      if (res && res.errCode === 0) {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\r\n          dataTime: res.data,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"FETCH_ALLCODE_SCHEDULE_TIME_FAILED error\", e);\r\n      dispatch({\r\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}